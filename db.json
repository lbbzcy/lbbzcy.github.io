{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/maupassant/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/default.css","path":"css/default.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/donate/index.html","path":"donate/index.html","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/AliPayQR.png","path":"img/AliPayQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/BTCQR.png","path":"img/BTCQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/WeChatQR.png","path":"img/WeChatQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/canvas-nest.js","path":"js/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/canvas-nest.umd.js","path":"js/canvas-nest.umd.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/gitment.browser.js","path":"js/gitment.browser.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/maupassant/.gitignore","hash":"d7d27e5a9bcffe7f90dc2f4f0752e19020e40f40","modified":1548300740912},{"_id":"themes/maupassant/.travis.yml","hash":"f8da426b97088e4caa5226cff219a5d95087961f","modified":1548300740913},{"_id":"themes/maupassant/LICENSE","hash":"0663fd3a7ea9fc4f4c634b4d73e2da426b536f86","modified":1548300740914},{"_id":"themes/maupassant/README.md","hash":"1c8631bc25c0f616e2dbd01c7fc224fa19eefdf3","modified":1548300740915},{"_id":"themes/maupassant/_config.yml","hash":"835b0f84943de4fb6592b817b9a37ec686aed9df","modified":1548729442715},{"_id":"themes/maupassant/package.json","hash":"5328c4c435cd4a5fe47caae31b9975013cdca5bb","modified":1548300740943},{"_id":"source/_posts/IntelliJ-IDEA-控制台中文乱码解决方案.md","hash":"a21fc7b1c3682ed0ee965fbbcd768d7d9a24eb9c","modified":1551249967393},{"_id":"source/_posts/Linux查看系统配置参数命令.md","hash":"0c4711bb9fce143850099ecf69ed9340b1b01a15","modified":1548728176039},{"_id":"source/_posts/Typora-Markdown-笔记.md","hash":"557f17a9bcf153b26d8f988bbe244f964d566d2f","modified":1550137597745},{"_id":"source/_posts/centos7安装Docker.md","hash":"a83645436ad16eaa60d9deb2e3550e29705b2dc9","modified":1548728295017},{"_id":"source/_posts/gitlab搭建.md","hash":"2fe8087ecad1d0fb1bd1d9d736d5c5a67317efb3","modified":1548728177551},{"_id":"source/_posts/oninstack安装.md","hash":"5d15de5983f373af9d54fdc9ee130b7a8a4fc37c","modified":1548728248660},{"_id":"source/_posts/shadowsocks实现翻墙.md","hash":"bb07f1bdcee88e006fede0966d64ebc3d3551ff5","modified":1551249231631},{"_id":"source/_posts/如何优雅的设计和使用缓存.md","hash":"f5841ecdb59cff828a47679b6690ad32bb86ed71","modified":1551249639030},{"_id":"source/about/index.md","hash":"23ba9ec4b19697377040ff28c020d51c9bcd47b2","modified":1548727945778},{"_id":"themes/maupassant/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1548300740874},{"_id":"themes/maupassant/.git/config","hash":"3dbf80769093e21ccab51f5f2b02a6d764498803","modified":1548300740885},{"_id":"themes/maupassant/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1548300734741},{"_id":"themes/maupassant/.git/index","hash":"512fee8c8e84643b90106ae1f33f28651105c9b3","modified":1548726401789},{"_id":"themes/maupassant/.git/packed-refs","hash":"530b1f83462059ec7d3ef1c56447b035bfde9c8a","modified":1548300740864},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"25d1d8cd8113045a7603c14af1ea1539fc6456ed","modified":1548300740917},{"_id":"themes/maupassant/languages/en.yml","hash":"518beaa8538a772ca697122264d667059797e458","modified":1548300740918},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"3cc9312fbdba4a8f8e8254804121e4724c719bcc","modified":1548300740918},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"3a50568f200b9c1258415b53727e42c6b6c7ea0b","modified":1548300740919},{"_id":"themes/maupassant/languages/ko.yml","hash":"a454bcec60113507bc1d593a699849822386c196","modified":1548300740920},{"_id":"themes/maupassant/languages/ru.yml","hash":"36edc014c6aaef367d58929089bf7915375e71a6","modified":1548300740920},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"339a4401e9f9d0e48fc2764e4ca5c10f8d3805ad","modified":1548644813911},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"34dba7ac67aeb316f629ca73e546fa143cc362d5","modified":1548300740922},{"_id":"themes/maupassant/layout/archive.pug","hash":"e749f047da5eb6449060a724a543ce84e80a2b8b","modified":1548300740937},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"b0a0ec63ee0225eaa0996d72164202bc9a28a225","modified":1548300740938},{"_id":"themes/maupassant/layout/base.pug","hash":"7451a590db6943edc099dc0e13b317c38686e8fc","modified":1548300740939},{"_id":"themes/maupassant/layout/index.pug","hash":"d1d56fa62f1293cd0cbefe96dbbde2d35b557a0a","modified":1548300740940},{"_id":"themes/maupassant/layout/page.pug","hash":"a21e638d5459120d88e45e8f18a23dc072d9ca07","modified":1548300740940},{"_id":"themes/maupassant/layout/post.pug","hash":"b112011fbb6a32b33e341be7edf043bc4ad5f97e","modified":1548300740941},{"_id":"themes/maupassant/layout/single-column.pug","hash":"8b4b731cdf86379d526821a1fa950bf15ed61f15","modified":1548300740942},{"_id":"themes/maupassant/layout/timeline.pug","hash":"04f7efdc45acda1faff409d0f80fa5a0dd2309d0","modified":1548300740943},{"_id":"themes/maupassant/source/favicon.ico","hash":"2cac829d0489b65505285eaac4e3d02801a60858","modified":1548674989332},{"_id":"source/_posts/IntelliJ-IDEA-控制台中文乱码解决方案/20190227144412.png","hash":"b91d56860d0c0ceb641b22bc9fc98fe905ca8d67","modified":1551249857694},{"_id":"source/_posts/IntelliJ-IDEA-控制台中文乱码解决方案/20190227144538.png","hash":"8aa45dff9b30970c5464ade89df9229684d61e35","modified":1551249943381},{"_id":"source/_posts/如何优雅的设计和使用缓存/1550200980167.png","hash":"d72cc134256f6d57b592ce563718fd841d05e15b","modified":1550200980199},{"_id":"source/_posts/如何优雅的设计和使用缓存/1550200994217.png","hash":"d72cc134256f6d57b592ce563718fd841d05e15b","modified":1550200994248},{"_id":"source/_posts/如何优雅的设计和使用缓存/1550201017361.png","hash":"9aa64c589f38d68ac8d1238df4c8caf2df7094fc","modified":1550201017386},{"_id":"source/_posts/如何优雅的设计和使用缓存/1550201074569.png","hash":"6d73ef5b6d05bae3ea823be47c1cc0b9c19c50cd","modified":1550201074597},{"_id":"source/_posts/如何优雅的设计和使用缓存/1550201097208.png","hash":"11ea6087809d45d28afd74f775f685e44230008c","modified":1550201097231},{"_id":"source/_posts/如何优雅的设计和使用缓存/1550201125950.png","hash":"c4128a1d9ed6537cb7928a5ea0c121f12a143a72","modified":1550201125980},{"_id":"source/_posts/如何优雅的设计和使用缓存/1550201151740.png","hash":"486ea850dd905ebb2afe1285c42810a228b1ac04","modified":1550201151764},{"_id":"source/_posts/如何优雅的设计和使用缓存/1550201242038.png","hash":"fb1988e7afec4e246df3ebf62042e25a4e3954b9","modified":1550201242051},{"_id":"themes/maupassant/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1548300734743},{"_id":"themes/maupassant/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1548300734743},{"_id":"themes/maupassant/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1548300734745},{"_id":"themes/maupassant/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1548300734745},{"_id":"themes/maupassant/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1548300734746},{"_id":"themes/maupassant/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1548300734747},{"_id":"themes/maupassant/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1548300734748},{"_id":"themes/maupassant/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1548300734749},{"_id":"themes/maupassant/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1548300734749},{"_id":"themes/maupassant/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1548300734750},{"_id":"themes/maupassant/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1548300734752},{"_id":"themes/maupassant/.git/logs/HEAD","hash":"0ea9da1ce1966aaa456e9ea3da26da5f5216774e","modified":1548300740879},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"b925856dcdc95f82c56a633b855ba9bba32f0057","modified":1548387163841},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"efaf0788b6b70aa03c928137cd13b28afa706f75","modified":1548300740925},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"92aa15e813bfb411803cc54218feb5410469a9c2","modified":1548300740926},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"b3c96f55afaeaeb010daeb96014f911db10c7f99","modified":1548300740926},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"bf18749da89ade5e9b6064756a0e9744b57bb235","modified":1548725609853},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"ac6e3a92bf18ab6bbd0e041b6796b295bae963ee","modified":1548300740928},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"234a792e64ba208fa97d2f99772ece23056a53ec","modified":1548300740929},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1548300740930},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1548300740930},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"6145b483b271bba05ad1db7c039fe352a768215b","modified":1548300740931},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"eb91a3baf9411188c7c8130f63a674f541ca9c81","modified":1548300740931},{"_id":"themes/maupassant/layout/_partial/wordcount.pug","hash":"6fb1d8ee09cfc4fd31e8ae53736e4f479d45e31e","modified":1548300740932},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"7707b4c718a935882ee986d0bb0078e50cdbea64","modified":1548300740933},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"7bc7c17cfd498c3e0c3371cef78f08f1dc25db36","modified":1548300740934},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"68bae3eb2f80e6127e03faa7ee1b78fb2e70aafc","modified":1548300740934},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"770b6c41cbf7969ed33adf87eec3be6f50a0911b","modified":1548300740935},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"6aa743486f282545f553a4fad6aae037afe26108","modified":1548300740936},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"37f236365b153fc40324391e5a602d6d50014e18","modified":1548300740937},{"_id":"themes/maupassant/source/css/default.css","hash":"b41d95120f9e64fd4530ae00ceaef09c7ea20818","modified":1548300740945},{"_id":"themes/maupassant/source/css/donate.css","hash":"ca39d14a598e1de5c51db4170ceb399c6a7131fe","modified":1548300740946},{"_id":"themes/maupassant/source/css/style.scss","hash":"b89d8098b3799644de812892742e4e24b8e08a0e","modified":1548300740948},{"_id":"themes/maupassant/source/donate/index.html","hash":"e6c9cbaf77300787329201cdf1ca663b2ea1bd15","modified":1548300740949},{"_id":"themes/maupassant/source/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1548300740950},{"_id":"themes/maupassant/source/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1548300740951},{"_id":"themes/maupassant/source/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1548300740952},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"292ea040e865c1d0be259703ff850570b3bdfc97","modified":1548300740953},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"eeb2ee8cf44ba5c298baeed84bb90866f4814955","modified":1548300740954},{"_id":"themes/maupassant/source/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1548300740954},{"_id":"themes/maupassant/source/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1548300740955},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"e916dea1c1bba1bc935510310f65b2c9328a401a","modified":1548300740956},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"30418295bed44bcc4b29076eb7deed49cf4d6c1c","modified":1548300740957},{"_id":"themes/maupassant/source/js/canvas-nest.js","hash":"ccfef66760b1490ebf7d510c8a3a78d7a753601a","modified":499162500000},{"_id":"themes/maupassant/source/js/canvas-nest.umd.js","hash":"8ea4dee8db6f59e7668b09554e6f66e2e751c5cc","modified":499162500000},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"c77270e684a60babc1abb7353e700ecdc5a66d30","modified":1548300740958},{"_id":"themes/maupassant/source/js/donate.js","hash":"780beaaf44b1e6c057752bdbc085b1048937e5e7","modified":1548300740959},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"8a993c1c4ad40789d2960b682cb2130382a0f26a","modified":1548300740960},{"_id":"themes/maupassant/source/js/search.js","hash":"dbda07a03e6edc73f1dc28a068c24a6037b97b56","modified":1548300740963},{"_id":"themes/maupassant/source/js/share.js","hash":"514e726c1efae9f6566600fa0e945b4b9e620f2e","modified":1548300740964},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"150ab1cad40d7ae081b0896b13f7d7cbac4e6338","modified":1548300740965},{"_id":"themes/maupassant/source/js/totop.js","hash":"15de186b089c245fe60766d509b587919f05ff23","modified":1548300740965},{"_id":"source/_posts/IntelliJ-IDEA-控制台中文乱码解决方案/20190227143717.png","hash":"3bd333537e47f7124e87b35d92d3f909e2d47264","modified":1551249474683},{"_id":"source/_posts/如何优雅的设计和使用缓存/1550201060498.png","hash":"68d664b851c7b8e9595b08c74b3badaeebe505cf","modified":1550201060536},{"_id":"source/_posts/如何优雅的设计和使用缓存/1550201180147.png","hash":"6009bfae48bb5128649bb709e6b3511f651577a2","modified":1550201180167},{"_id":"source/_posts/如何优雅的设计和使用缓存/1550201212401.png","hash":"9ff3162594e98627fa6629ab9fa57e8107fb879d","modified":1550201212432},{"_id":"source/_posts/如何优雅的设计和使用缓存/1550201224420.png","hash":"8594f57769da29b5d5ea68ed908e3c3c5c71e99f","modified":1550201224445},{"_id":"source/_posts/如何优雅的设计和使用缓存/1550201259654.png","hash":"dc860bf8c38be170cd02d7a626666f16e14c7a14","modified":1550201259694},{"_id":"themes/maupassant/.git/objects/01/683feadd374ca9d90578a534869a5cc3af1e48","hash":"b91a10f057a45972a71ff99f49d80d9e0560e61e","modified":1548675907000},{"_id":"themes/maupassant/.git/objects/16/f956f82ee3ee8713924453e57a84ddf08c1dd5","hash":"f2f07e472f249ddcadfff84d793dd4fd9bc2de44","modified":1548387101077},{"_id":"themes/maupassant/.git/objects/85/8c06d36fbd4f43ad7300df1319f43bbf9b8e43","hash":"4dd648a6bc5eb3d1ddf77ad498162a3f9a012372","modified":1548386364995},{"_id":"themes/maupassant/.git/objects/pack/pack-1059b8196dd2bf19171b859e2661b3435041db09.idx","hash":"dd388436b5ff9dd02f3327eff796ee35b2cbd90b","modified":1548300740692},{"_id":"themes/maupassant/.git/refs/heads/master","hash":"38b43765e68c34f06d29a9720592e8ac6ed250d9","modified":1548300740878},{"_id":"themes/maupassant/source/js/gitment.browser.js","hash":"b15998a45d5f386d30905cfbfbb1658336acbb5b","modified":1548300740962},{"_id":"themes/maupassant/.git/logs/refs/heads/master","hash":"0ea9da1ce1966aaa456e9ea3da26da5f5216774e","modified":1548300740880},{"_id":"themes/maupassant/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1548300740872},{"_id":"themes/maupassant/.git/logs/refs/remotes/origin/HEAD","hash":"0ea9da1ce1966aaa456e9ea3da26da5f5216774e","modified":1548300740871},{"_id":"themes/maupassant/.git/objects/pack/pack-1059b8196dd2bf19171b859e2661b3435041db09.pack","hash":"4e2f87dcbcec4d172721a7ea8247cc76355c9557","modified":1548726199000},{"_id":"public/atom.xml","hash":"fa78d2754353b7ac21f414b4e2b48629e506a6a7","modified":1551250275871},{"_id":"public/sitemap.xml","hash":"d6d915bb06cadb17f36aca70b53159ee8efcf011","modified":1551250275873},{"_id":"public/about/index.html","hash":"1d3fbbea824594ef960df4daad1b6d1238a7598a","modified":1551250275939},{"_id":"public/2019/01/28/shadowsocks实现翻墙/index.html","hash":"dcf8e4f28dab25e3b352e0aee7ed9fde01acfa59","modified":1551250275939},{"_id":"public/2019/01/24/Linux查看系统配置参数命令/index.html","hash":"dc1345a5e1b3cd0ec89b22bcd170e80a9ede4716","modified":1551250275940},{"_id":"public/2019/01/24/gitlab搭建/index.html","hash":"13dec5a8e2f68abfb849b2d0e5bdeb54ed86c9ec","modified":1551250275940},{"_id":"public/2018/09/03/centos7安装Docker/index.html","hash":"d5a5be2073d3700b3398e9402a47b53dc9063839","modified":1551250275940},{"_id":"public/2018/08/29/oninstack安装/index.html","hash":"b0aaa070118eb18431775a0da244a47fc4f86636","modified":1551250275940},{"_id":"public/archives/index.html","hash":"fc1e2bdffc236715f021ffe0f8cde6f8aeb681e5","modified":1551250275940},{"_id":"public/archives/2018/index.html","hash":"89f85618ef17b037f8d79ce67c9d3b8544a7ee75","modified":1551250275940},{"_id":"public/archives/2018/08/index.html","hash":"4451c99fbfe63c5567a650a954d68ea08b07b249","modified":1551250275940},{"_id":"public/archives/2018/09/index.html","hash":"07764cbbf78775d89d19e9a921d05a610ca21d35","modified":1551250275941},{"_id":"public/archives/2019/index.html","hash":"dd2dcca702ba5092ed1b51895b4ff28c8c0e2057","modified":1551250275941},{"_id":"public/archives/2019/01/index.html","hash":"de06653536aac1f66baa8a7d713beb675c9c57b8","modified":1551250275941},{"_id":"public/archives/2019/02/index.html","hash":"a58689b229ccc9c4d600b9c1295c2976dd7da902","modified":1551250275941},{"_id":"public/categories/Linux/index.html","hash":"b223153159a63dc54bc77567cc521ab248fab9b8","modified":1551250275941},{"_id":"public/index.html","hash":"a1bb80d1755aaf47e6e2c2d0b347283d8b24ee3d","modified":1551250275941},{"_id":"public/page/2/index.html","hash":"104749eaa4857d04b61aca5981c5c810d41b2b7f","modified":1551250275941},{"_id":"public/tags/Linux/index.html","hash":"ad00e02a9a6a3bc0c5dbc3cc8ecc78a7222eb9d3","modified":1551250275941},{"_id":"public/tags/笔记/index.html","hash":"8fffee6f76d4d364064ac4a2b181954c3bee0c2d","modified":1551250275941},{"_id":"public/2019/02/15/如何优雅的设计和使用缓存/index.html","hash":"65a61f99e1f189a85eccc3d31a63ce45f8e0692b","modified":1551250275942},{"_id":"public/2019/01/28/Typora-Markdown-笔记/index.html","hash":"4b49e465c3624e04ab159be53dc3f6b31ec2471c","modified":1551250275942},{"_id":"public/2019/02/27/IntelliJ-IDEA-控制台中文乱码解决方案/index.html","hash":"4fffe7456211ce7654c4e3657d1ed123c9fa8e25","modified":1551250275945},{"_id":"public/tags/工具使用/index.html","hash":"00cb3667271ac172ad7b9fcfc381014b8347cb48","modified":1551250275945},{"_id":"public/2019/02/27/IntelliJ-IDEA-控制台中文乱码解决方案/20190227144412.png","hash":"b91d56860d0c0ceb641b22bc9fc98fe905ca8d67","modified":1551250278180},{"_id":"public/2019/02/27/IntelliJ-IDEA-控制台中文乱码解决方案/20190227144538.png","hash":"8aa45dff9b30970c5464ade89df9229684d61e35","modified":1551250278180},{"_id":"public/2019/02/15/如何优雅的设计和使用缓存/1550200980167.png","hash":"d72cc134256f6d57b592ce563718fd841d05e15b","modified":1551250278180},{"_id":"public/2019/02/15/如何优雅的设计和使用缓存/1550201017361.png","hash":"9aa64c589f38d68ac8d1238df4c8caf2df7094fc","modified":1551250278181},{"_id":"public/2019/02/15/如何优雅的设计和使用缓存/1550200994217.png","hash":"d72cc134256f6d57b592ce563718fd841d05e15b","modified":1551250278181},{"_id":"public/2019/02/15/如何优雅的设计和使用缓存/1550201074569.png","hash":"6d73ef5b6d05bae3ea823be47c1cc0b9c19c50cd","modified":1551250278181},{"_id":"public/2019/02/15/如何优雅的设计和使用缓存/1550201097208.png","hash":"11ea6087809d45d28afd74f775f685e44230008c","modified":1551250278181},{"_id":"public/2019/02/15/如何优雅的设计和使用缓存/1550201125950.png","hash":"c4128a1d9ed6537cb7928a5ea0c121f12a143a72","modified":1551250278182},{"_id":"public/2019/02/15/如何优雅的设计和使用缓存/1550201151740.png","hash":"486ea850dd905ebb2afe1285c42810a228b1ac04","modified":1551250278182},{"_id":"public/2019/02/15/如何优雅的设计和使用缓存/1550201242038.png","hash":"fb1988e7afec4e246df3ebf62042e25a4e3954b9","modified":1551250278182},{"_id":"public/2019/02/27/IntelliJ-IDEA-控制台中文乱码解决方案/20190227143717.png","hash":"3bd333537e47f7124e87b35d92d3f909e2d47264","modified":1551250278189},{"_id":"public/2019/02/15/如何优雅的设计和使用缓存/1550201060498.png","hash":"68d664b851c7b8e9595b08c74b3badaeebe505cf","modified":1551250278190},{"_id":"public/2019/02/15/如何优雅的设计和使用缓存/1550201180147.png","hash":"6009bfae48bb5128649bb709e6b3511f651577a2","modified":1551250278190},{"_id":"public/2019/02/15/如何优雅的设计和使用缓存/1550201212401.png","hash":"9ff3162594e98627fa6629ab9fa57e8107fb879d","modified":1551250278190},{"_id":"public/2019/02/15/如何优雅的设计和使用缓存/1550201224420.png","hash":"8594f57769da29b5d5ea68ed908e3c3c5c71e99f","modified":1551250278190},{"_id":"public/2019/02/15/如何优雅的设计和使用缓存/1550201259654.png","hash":"dc860bf8c38be170cd02d7a626666f16e14c7a14","modified":1551250278226}],"Category":[{"name":"Linux","_id":"cjsmu9nmz000a4sjqv3dtzzd0"}],"Data":[],"Page":[{"title":"个人简介","date":"2019-01-24T09:51:49.000Z","layout":"single-column","_content":"## 个人信息\n\n- 姓名：朱春雨\n- 年龄：24\n- 电话：17312308596 <!--微信号-->\n- 邮箱：17602188143@163.com\n- 籍贯：江苏省睢宁县\n\n## 教育背景\n\n- 2013.09-2017.06\t\t淮海工学院\t\t网络工程专业\n- 主修课程：计算机基础、计算机网络、程序语言、Linux操作系统等\n\n## 工作经历\n\n##### 2017.11-至今                    亚信科技（南京）有限公司                   Java开发工程师\n\n* 江苏电信新一代BSS项目\n\n* 作为系统最重要的部分（订单受理），系统高效运行，订单正常受理，数据正确。\n* 集团电渠等外系统生单接口逻辑开发\n\n##### 2017.07-2017.09             北京顶象技术有限公司                           Java后台开发\n\n- 数据的分析和报表展示\n- 对系统产生的日志文件进行分析过滤出有效信息，以报表的形式展示给用户。并提供hive查询接口，让用户可以自己查询出自己需要的信息。\n- 系统微服务化，将复杂的系统模块化，便于理解、开发、维护；服务之间使用RPC来互相通信；每个服务独立布署。\n\n##### 2016.11-2017.05             深圳市雁联计算系统有限公司上海分公司           Java开发工程师（实习生）\n\n- 上海保交所资金后台管理系统的开发\n- 客户计息、客户利息、商户退款、对账退款、详细信息展示。银行利息、客户利息的记录excel导出。\n- mybatis对数据库的CRUD操作，POI操作EXCEL表格对数据处理。\n\n## 求职意向\n\n- 期望城市：南京\n\n- 期望职位：Java开发工程师\n\n## 专业技能\n\n- 良好的编码习惯及文档接口的编写、扎实的Java基础\n\n- 熟悉前端开发技术\n\n- 熟悉JavaWeb开发常用框架（mvc）\n\n- 熟练使用IDEA、Eclipse开发工具\n\n- 熟悉Oracle、MySQL数据库开发技术\n\n- 熟练使用Git、Maven项目管理工具\n\n- 熟悉HTTP和TCP等计算机网络协议\n\n- 了解redis、nginx、dubbo、docker开发常用技术\n\n- 熟练使用Linux常用操作命令以及简单shell脚本编写\n\n## 技能证书\n\n- 英语六级\n- 网络工程师（中级）\n- 校一等奖学金、校编程大赛一等奖\n\n## 自我评价\n\n- 解决问题能力强、懂得团队协作、对新技术有钻研的兴趣、做事踏实。\n","source":"about/index.md","raw":"---\ntitle: 个人简介\ndate: 2019-01-24 17:51:49\nlayout: single-column\n---\n## 个人信息\n\n- 姓名：朱春雨\n- 年龄：24\n- 电话：17312308596 <!--微信号-->\n- 邮箱：17602188143@163.com\n- 籍贯：江苏省睢宁县\n\n## 教育背景\n\n- 2013.09-2017.06\t\t淮海工学院\t\t网络工程专业\n- 主修课程：计算机基础、计算机网络、程序语言、Linux操作系统等\n\n## 工作经历\n\n##### 2017.11-至今                    亚信科技（南京）有限公司                   Java开发工程师\n\n* 江苏电信新一代BSS项目\n\n* 作为系统最重要的部分（订单受理），系统高效运行，订单正常受理，数据正确。\n* 集团电渠等外系统生单接口逻辑开发\n\n##### 2017.07-2017.09             北京顶象技术有限公司                           Java后台开发\n\n- 数据的分析和报表展示\n- 对系统产生的日志文件进行分析过滤出有效信息，以报表的形式展示给用户。并提供hive查询接口，让用户可以自己查询出自己需要的信息。\n- 系统微服务化，将复杂的系统模块化，便于理解、开发、维护；服务之间使用RPC来互相通信；每个服务独立布署。\n\n##### 2016.11-2017.05             深圳市雁联计算系统有限公司上海分公司           Java开发工程师（实习生）\n\n- 上海保交所资金后台管理系统的开发\n- 客户计息、客户利息、商户退款、对账退款、详细信息展示。银行利息、客户利息的记录excel导出。\n- mybatis对数据库的CRUD操作，POI操作EXCEL表格对数据处理。\n\n## 求职意向\n\n- 期望城市：南京\n\n- 期望职位：Java开发工程师\n\n## 专业技能\n\n- 良好的编码习惯及文档接口的编写、扎实的Java基础\n\n- 熟悉前端开发技术\n\n- 熟悉JavaWeb开发常用框架（mvc）\n\n- 熟练使用IDEA、Eclipse开发工具\n\n- 熟悉Oracle、MySQL数据库开发技术\n\n- 熟练使用Git、Maven项目管理工具\n\n- 熟悉HTTP和TCP等计算机网络协议\n\n- 了解redis、nginx、dubbo、docker开发常用技术\n\n- 熟练使用Linux常用操作命令以及简单shell脚本编写\n\n## 技能证书\n\n- 英语六级\n- 网络工程师（中级）\n- 校一等奖学金、校编程大赛一等奖\n\n## 自我评价\n\n- 解决问题能力强、懂得团队协作、对新技术有钻研的兴趣、做事踏实。\n","updated":"2019-01-29T02:12:25.778Z","path":"about/index.html","comments":1,"_id":"cjsmu9nmf00014sjqsmtkvqjo","content":"<h2 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h2><ul>\n<li>姓名：朱春雨</li>\n<li>年龄：24</li>\n<li>电话：17312308596 <!--微信号--></li>\n<li>邮箱：<a href=\"mailto:17602188143@163.com\" target=\"_blank\" rel=\"noopener\">17602188143@163.com</a></li>\n<li>籍贯：江苏省睢宁县</li>\n</ul>\n<h2 id=\"教育背景\"><a href=\"#教育背景\" class=\"headerlink\" title=\"教育背景\"></a>教育背景</h2><ul>\n<li>2013.09-2017.06        淮海工学院        网络工程专业</li>\n<li>主修课程：计算机基础、计算机网络、程序语言、Linux操作系统等</li>\n</ul>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><h5 id=\"2017-11-至今-亚信科技（南京）有限公司-Java开发工程师\"><a href=\"#2017-11-至今-亚信科技（南京）有限公司-Java开发工程师\" class=\"headerlink\" title=\"2017.11-至今                    亚信科技（南京）有限公司                   Java开发工程师\"></a>2017.11-至今                    亚信科技（南京）有限公司                   Java开发工程师</h5><ul>\n<li><p>江苏电信新一代BSS项目</p>\n</li>\n<li><p>作为系统最重要的部分（订单受理），系统高效运行，订单正常受理，数据正确。</p>\n</li>\n<li>集团电渠等外系统生单接口逻辑开发</li>\n</ul>\n<h5 id=\"2017-07-2017-09-北京顶象技术有限公司-Java后台开发\"><a href=\"#2017-07-2017-09-北京顶象技术有限公司-Java后台开发\" class=\"headerlink\" title=\"2017.07-2017.09             北京顶象技术有限公司                           Java后台开发\"></a>2017.07-2017.09             北京顶象技术有限公司                           Java后台开发</h5><ul>\n<li>数据的分析和报表展示</li>\n<li>对系统产生的日志文件进行分析过滤出有效信息，以报表的形式展示给用户。并提供hive查询接口，让用户可以自己查询出自己需要的信息。</li>\n<li>系统微服务化，将复杂的系统模块化，便于理解、开发、维护；服务之间使用RPC来互相通信；每个服务独立布署。</li>\n</ul>\n<h5 id=\"2016-11-2017-05-深圳市雁联计算系统有限公司上海分公司-Java开发工程师（实习生）\"><a href=\"#2016-11-2017-05-深圳市雁联计算系统有限公司上海分公司-Java开发工程师（实习生）\" class=\"headerlink\" title=\"2016.11-2017.05             深圳市雁联计算系统有限公司上海分公司           Java开发工程师（实习生）\"></a>2016.11-2017.05             深圳市雁联计算系统有限公司上海分公司           Java开发工程师（实习生）</h5><ul>\n<li>上海保交所资金后台管理系统的开发</li>\n<li>客户计息、客户利息、商户退款、对账退款、详细信息展示。银行利息、客户利息的记录excel导出。</li>\n<li>mybatis对数据库的CRUD操作，POI操作EXCEL表格对数据处理。</li>\n</ul>\n<h2 id=\"求职意向\"><a href=\"#求职意向\" class=\"headerlink\" title=\"求职意向\"></a>求职意向</h2><ul>\n<li><p>期望城市：南京</p>\n</li>\n<li><p>期望职位：Java开发工程师</p>\n</li>\n</ul>\n<h2 id=\"专业技能\"><a href=\"#专业技能\" class=\"headerlink\" title=\"专业技能\"></a>专业技能</h2><ul>\n<li><p>良好的编码习惯及文档接口的编写、扎实的Java基础</p>\n</li>\n<li><p>熟悉前端开发技术</p>\n</li>\n<li><p>熟悉JavaWeb开发常用框架（mvc）</p>\n</li>\n<li><p>熟练使用IDEA、Eclipse开发工具</p>\n</li>\n<li><p>熟悉Oracle、MySQL数据库开发技术</p>\n</li>\n<li><p>熟练使用Git、Maven项目管理工具</p>\n</li>\n<li><p>熟悉HTTP和TCP等计算机网络协议</p>\n</li>\n<li><p>了解redis、nginx、dubbo、docker开发常用技术</p>\n</li>\n<li><p>熟练使用Linux常用操作命令以及简单shell脚本编写</p>\n</li>\n</ul>\n<h2 id=\"技能证书\"><a href=\"#技能证书\" class=\"headerlink\" title=\"技能证书\"></a>技能证书</h2><ul>\n<li>英语六级</li>\n<li>网络工程师（中级）</li>\n<li>校一等奖学金、校编程大赛一等奖</li>\n</ul>\n<h2 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h2><ul>\n<li>解决问题能力强、懂得团队协作、对新技术有钻研的兴趣、做事踏实。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h2><ul>\n<li>姓名：朱春雨</li>\n<li>年龄：24</li>\n<li>电话：17312308596 <!--微信号--></li>\n<li>邮箱：<a href=\"mailto:17602188143@163.com\" target=\"_blank\" rel=\"noopener\">17602188143@163.com</a></li>\n<li>籍贯：江苏省睢宁县</li>\n</ul>\n<h2 id=\"教育背景\"><a href=\"#教育背景\" class=\"headerlink\" title=\"教育背景\"></a>教育背景</h2><ul>\n<li>2013.09-2017.06        淮海工学院        网络工程专业</li>\n<li>主修课程：计算机基础、计算机网络、程序语言、Linux操作系统等</li>\n</ul>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><h5 id=\"2017-11-至今-亚信科技（南京）有限公司-Java开发工程师\"><a href=\"#2017-11-至今-亚信科技（南京）有限公司-Java开发工程师\" class=\"headerlink\" title=\"2017.11-至今                    亚信科技（南京）有限公司                   Java开发工程师\"></a>2017.11-至今                    亚信科技（南京）有限公司                   Java开发工程师</h5><ul>\n<li><p>江苏电信新一代BSS项目</p>\n</li>\n<li><p>作为系统最重要的部分（订单受理），系统高效运行，订单正常受理，数据正确。</p>\n</li>\n<li>集团电渠等外系统生单接口逻辑开发</li>\n</ul>\n<h5 id=\"2017-07-2017-09-北京顶象技术有限公司-Java后台开发\"><a href=\"#2017-07-2017-09-北京顶象技术有限公司-Java后台开发\" class=\"headerlink\" title=\"2017.07-2017.09             北京顶象技术有限公司                           Java后台开发\"></a>2017.07-2017.09             北京顶象技术有限公司                           Java后台开发</h5><ul>\n<li>数据的分析和报表展示</li>\n<li>对系统产生的日志文件进行分析过滤出有效信息，以报表的形式展示给用户。并提供hive查询接口，让用户可以自己查询出自己需要的信息。</li>\n<li>系统微服务化，将复杂的系统模块化，便于理解、开发、维护；服务之间使用RPC来互相通信；每个服务独立布署。</li>\n</ul>\n<h5 id=\"2016-11-2017-05-深圳市雁联计算系统有限公司上海分公司-Java开发工程师（实习生）\"><a href=\"#2016-11-2017-05-深圳市雁联计算系统有限公司上海分公司-Java开发工程师（实习生）\" class=\"headerlink\" title=\"2016.11-2017.05             深圳市雁联计算系统有限公司上海分公司           Java开发工程师（实习生）\"></a>2016.11-2017.05             深圳市雁联计算系统有限公司上海分公司           Java开发工程师（实习生）</h5><ul>\n<li>上海保交所资金后台管理系统的开发</li>\n<li>客户计息、客户利息、商户退款、对账退款、详细信息展示。银行利息、客户利息的记录excel导出。</li>\n<li>mybatis对数据库的CRUD操作，POI操作EXCEL表格对数据处理。</li>\n</ul>\n<h2 id=\"求职意向\"><a href=\"#求职意向\" class=\"headerlink\" title=\"求职意向\"></a>求职意向</h2><ul>\n<li><p>期望城市：南京</p>\n</li>\n<li><p>期望职位：Java开发工程师</p>\n</li>\n</ul>\n<h2 id=\"专业技能\"><a href=\"#专业技能\" class=\"headerlink\" title=\"专业技能\"></a>专业技能</h2><ul>\n<li><p>良好的编码习惯及文档接口的编写、扎实的Java基础</p>\n</li>\n<li><p>熟悉前端开发技术</p>\n</li>\n<li><p>熟悉JavaWeb开发常用框架（mvc）</p>\n</li>\n<li><p>熟练使用IDEA、Eclipse开发工具</p>\n</li>\n<li><p>熟悉Oracle、MySQL数据库开发技术</p>\n</li>\n<li><p>熟练使用Git、Maven项目管理工具</p>\n</li>\n<li><p>熟悉HTTP和TCP等计算机网络协议</p>\n</li>\n<li><p>了解redis、nginx、dubbo、docker开发常用技术</p>\n</li>\n<li><p>熟练使用Linux常用操作命令以及简单shell脚本编写</p>\n</li>\n</ul>\n<h2 id=\"技能证书\"><a href=\"#技能证书\" class=\"headerlink\" title=\"技能证书\"></a>技能证书</h2><ul>\n<li>英语六级</li>\n<li>网络工程师（中级）</li>\n<li>校一等奖学金、校编程大赛一等奖</li>\n</ul>\n<h2 id=\"自我评价\"><a href=\"#自我评价\" class=\"headerlink\" title=\"自我评价\"></a>自我评价</h2><ul>\n<li>解决问题能力强、懂得团队协作、对新技术有钻研的兴趣、做事踏实。</li>\n</ul>\n"}],"Post":[{"title":"IntelliJ IDEA 控制台中文乱码解决方案","date":"2019-02-27T06:35:06.000Z","description":"IntelliJ IDEA 控制台中文乱码解决方案。。。。。。","_content":"\n#### 配置Intellij的配置文件\n\n![](IntelliJ-IDEA-控制台中文乱码解决方案/20190227143717.png)\n\nidea的安装目录，修改如图配置文件。添加\n\n```shell\n-Dfile.encoding=UTF-8\n```\n\n#### 配置项目编码及IDE编码\n\n![](IntelliJ-IDEA-控制台中文乱码解决方案/20190227144412.png)\n\n#### 配置项目启动服务器参数\n\n![](IntelliJ-IDEA-控制台中文乱码解决方案/20190227144538.png)","source":"_posts/IntelliJ-IDEA-控制台中文乱码解决方案.md","raw":"---\ntitle: IntelliJ IDEA 控制台中文乱码解决方案\ndate: 2019-02-27 14:35:06\ntags:  工具使用\ndescription: IntelliJ IDEA 控制台中文乱码解决方案。。。。。。\n---\n\n#### 配置Intellij的配置文件\n\n![](IntelliJ-IDEA-控制台中文乱码解决方案/20190227143717.png)\n\nidea的安装目录，修改如图配置文件。添加\n\n```shell\n-Dfile.encoding=UTF-8\n```\n\n#### 配置项目编码及IDE编码\n\n![](IntelliJ-IDEA-控制台中文乱码解决方案/20190227144412.png)\n\n#### 配置项目启动服务器参数\n\n![](IntelliJ-IDEA-控制台中文乱码解决方案/20190227144538.png)","slug":"IntelliJ-IDEA-控制台中文乱码解决方案","published":1,"updated":"2019-02-27T06:46:07.393Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsmu9nm500004sjqyuplqc4n","content":"<h4 id=\"配置Intellij的配置文件\"><a href=\"#配置Intellij的配置文件\" class=\"headerlink\" title=\"配置Intellij的配置文件\"></a>配置Intellij的配置文件</h4><p><img src=\"/2019/02/27/IntelliJ-IDEA-控制台中文乱码解决方案/20190227143717.png\" alt=\"\"></p>\n<p>idea的安装目录，修改如图配置文件。添加</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Dfile.encoding=UTF-8</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置项目编码及IDE编码\"><a href=\"#配置项目编码及IDE编码\" class=\"headerlink\" title=\"配置项目编码及IDE编码\"></a>配置项目编码及IDE编码</h4><p><img src=\"/2019/02/27/IntelliJ-IDEA-控制台中文乱码解决方案/20190227144412.png\" alt=\"\"></p>\n<h4 id=\"配置项目启动服务器参数\"><a href=\"#配置项目启动服务器参数\" class=\"headerlink\" title=\"配置项目启动服务器参数\"></a>配置项目启动服务器参数</h4><p><img src=\"/2019/02/27/IntelliJ-IDEA-控制台中文乱码解决方案/20190227144538.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"配置Intellij的配置文件\"><a href=\"#配置Intellij的配置文件\" class=\"headerlink\" title=\"配置Intellij的配置文件\"></a>配置Intellij的配置文件</h4><p><img src=\"/2019/02/27/IntelliJ-IDEA-控制台中文乱码解决方案/20190227143717.png\" alt=\"\"></p>\n<p>idea的安装目录，修改如图配置文件。添加</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Dfile.encoding=UTF-8</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置项目编码及IDE编码\"><a href=\"#配置项目编码及IDE编码\" class=\"headerlink\" title=\"配置项目编码及IDE编码\"></a>配置项目编码及IDE编码</h4><p><img src=\"/2019/02/27/IntelliJ-IDEA-控制台中文乱码解决方案/20190227144412.png\" alt=\"\"></p>\n<h4 id=\"配置项目启动服务器参数\"><a href=\"#配置项目启动服务器参数\" class=\"headerlink\" title=\"配置项目启动服务器参数\"></a>配置项目启动服务器参数</h4><p><img src=\"/2019/02/27/IntelliJ-IDEA-控制台中文乱码解决方案/20190227144538.png\" alt=\"\"></p>\n"},{"title":"Linux查看系统配置参数命令","date":"2019-01-24T08:39:35.000Z","description":"本文介绍了Linux系统下查看系统参数配置的一些常用命令。。。。。。","_content":"\n```shell\n1. uname -a # 查看内核/操作系统/CPU信息的linux系统信息  \n2. head -n l /etc/issue # 查看操作系统版本  \n3. cat /proc/cpuinfo # 查看CPU信息  \n4. hostname # 查看计算机名的linux系统信息命令  \n5. lspci -tv # 列出所有PCI设备   \n6. lsusb -tv # 列出所有USB设备的linux系统信息命令  \n7. lsmod # 列出加载的内核模块   \n8. env # 查看环境变量资源  \n9. free -m # 查看内存使用量和交换区使用量   \n10. df -h # 查看各分区使用情况  \n11. du -sh # 查看指定目录的大小   \n12. grep MemTotal /proc/meminfo # 查看内存总量  \n13. grep MemFree /proc/meminfo # 查看空闲内存量   \n14. uptime # 查看系统运行时间、用户数、负载  \n15. cat /proc/loadavg # 查看系统负载磁盘和分区   \n16. mount | column -t # 查看挂接的分区状态  \n17. fdisk -l # 查看所有分区   \n18. swapon -s # 查看所有交换分区  \n19. hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备)   \n20. dmesg | grep IDE # 查看启动时IDE设备检测状况网络  \n21. ifconfig # 查看所有网络接口的属性   \n22. iptables -L # 查看防火墙设置  \n23. route -n # 查看路由表   \n24. netstat -lntp # 查看所有监听端口  \n25. netstat -antp # 查看所有已经建立的连接   \n26. netstat -s # 查看网络统计信息进程  \n27. ps -ef # 查看所有进程   \n28. top # 实时显示进程状态用户  \n29. w # 查看活动用户   \n30. id # 查看指定用户信息  \n31. last # 查看用户登录日志   \n32. cut -d: -f1 /etc/passwd # 查看系统所有用户  \n33. cut -d: -f1 /etc/group # 查看系统所有组   \n34. crontab -l # 查看当前用户的计划任务服务  \n35. chkconfig –list # 列出所有系统服务   \n36. chkconfig –list | grep on # 列出所有启动的系统服务程序  \n37. rpm -qa # 查看所有安装的软件包   \n38. cat /proc/cpuinfo ：查看CPU相关参数的linux系统命令  \n39. cat /proc/partitions ：查看linux硬盘和分区信息的系统信息命令   \n40. cat /proc/meminfo ：查看linux系统内存信息的linux系统命令  \n41. cat /proc/version ：查看版本，类似uname -r   \n42. cat /proc/ioports ：查看设备io端口  \n43. cat /proc/interrupts ：查看中断   \n44. cat /proc/pci ：查看pci设备的信息  \n45. cat /proc/swaps ：查看所有swap分区的信息 \n\n```","source":"_posts/Linux查看系统配置参数命令.md","raw":"---\ntitle: Linux查看系统配置参数命令\ndate: 2019-01-24 16:39:35\ntags: Linux\ndescription: 本文介绍了Linux系统下查看系统参数配置的一些常用命令。。。。。。\n---\n\n```shell\n1. uname -a # 查看内核/操作系统/CPU信息的linux系统信息  \n2. head -n l /etc/issue # 查看操作系统版本  \n3. cat /proc/cpuinfo # 查看CPU信息  \n4. hostname # 查看计算机名的linux系统信息命令  \n5. lspci -tv # 列出所有PCI设备   \n6. lsusb -tv # 列出所有USB设备的linux系统信息命令  \n7. lsmod # 列出加载的内核模块   \n8. env # 查看环境变量资源  \n9. free -m # 查看内存使用量和交换区使用量   \n10. df -h # 查看各分区使用情况  \n11. du -sh # 查看指定目录的大小   \n12. grep MemTotal /proc/meminfo # 查看内存总量  \n13. grep MemFree /proc/meminfo # 查看空闲内存量   \n14. uptime # 查看系统运行时间、用户数、负载  \n15. cat /proc/loadavg # 查看系统负载磁盘和分区   \n16. mount | column -t # 查看挂接的分区状态  \n17. fdisk -l # 查看所有分区   \n18. swapon -s # 查看所有交换分区  \n19. hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备)   \n20. dmesg | grep IDE # 查看启动时IDE设备检测状况网络  \n21. ifconfig # 查看所有网络接口的属性   \n22. iptables -L # 查看防火墙设置  \n23. route -n # 查看路由表   \n24. netstat -lntp # 查看所有监听端口  \n25. netstat -antp # 查看所有已经建立的连接   \n26. netstat -s # 查看网络统计信息进程  \n27. ps -ef # 查看所有进程   \n28. top # 实时显示进程状态用户  \n29. w # 查看活动用户   \n30. id # 查看指定用户信息  \n31. last # 查看用户登录日志   \n32. cut -d: -f1 /etc/passwd # 查看系统所有用户  \n33. cut -d: -f1 /etc/group # 查看系统所有组   \n34. crontab -l # 查看当前用户的计划任务服务  \n35. chkconfig –list # 列出所有系统服务   \n36. chkconfig –list | grep on # 列出所有启动的系统服务程序  \n37. rpm -qa # 查看所有安装的软件包   \n38. cat /proc/cpuinfo ：查看CPU相关参数的linux系统命令  \n39. cat /proc/partitions ：查看linux硬盘和分区信息的系统信息命令   \n40. cat /proc/meminfo ：查看linux系统内存信息的linux系统命令  \n41. cat /proc/version ：查看版本，类似uname -r   \n42. cat /proc/ioports ：查看设备io端口  \n43. cat /proc/interrupts ：查看中断   \n44. cat /proc/pci ：查看pci设备的信息  \n45. cat /proc/swaps ：查看所有swap分区的信息 \n\n```","slug":"Linux查看系统配置参数命令","published":1,"updated":"2019-01-29T02:16:16.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsmu9nmh00024sjqrkjbxn0v","content":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. uname -a # 查看内核/操作系统/CPU信息的linux系统信息  </span><br><span class=\"line\">2. head -n l /etc/issue # 查看操作系统版本  </span><br><span class=\"line\">3. cat /proc/cpuinfo # 查看CPU信息  </span><br><span class=\"line\">4. hostname # 查看计算机名的linux系统信息命令  </span><br><span class=\"line\">5. lspci -tv # 列出所有PCI设备   </span><br><span class=\"line\">6. lsusb -tv # 列出所有USB设备的linux系统信息命令  </span><br><span class=\"line\">7. lsmod # 列出加载的内核模块   </span><br><span class=\"line\">8. env # 查看环境变量资源  </span><br><span class=\"line\">9. free -m # 查看内存使用量和交换区使用量   </span><br><span class=\"line\">10. df -h # 查看各分区使用情况  </span><br><span class=\"line\">11. du -sh # 查看指定目录的大小   </span><br><span class=\"line\">12. grep MemTotal /proc/meminfo # 查看内存总量  </span><br><span class=\"line\">13. grep MemFree /proc/meminfo # 查看空闲内存量   </span><br><span class=\"line\">14. uptime # 查看系统运行时间、用户数、负载  </span><br><span class=\"line\">15. cat /proc/loadavg # 查看系统负载磁盘和分区   </span><br><span class=\"line\">16. mount | column -t # 查看挂接的分区状态  </span><br><span class=\"line\">17. fdisk -l # 查看所有分区   </span><br><span class=\"line\">18. swapon -s # 查看所有交换分区  </span><br><span class=\"line\">19. hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备)   </span><br><span class=\"line\">20. dmesg | grep IDE # 查看启动时IDE设备检测状况网络  </span><br><span class=\"line\">21. ifconfig # 查看所有网络接口的属性   </span><br><span class=\"line\">22. iptables -L # 查看防火墙设置  </span><br><span class=\"line\">23. route -n # 查看路由表   </span><br><span class=\"line\">24. netstat -lntp # 查看所有监听端口  </span><br><span class=\"line\">25. netstat -antp # 查看所有已经建立的连接   </span><br><span class=\"line\">26. netstat -s # 查看网络统计信息进程  </span><br><span class=\"line\">27. ps -ef # 查看所有进程   </span><br><span class=\"line\">28. top # 实时显示进程状态用户  </span><br><span class=\"line\">29. w # 查看活动用户   </span><br><span class=\"line\">30. id # 查看指定用户信息  </span><br><span class=\"line\">31. last # 查看用户登录日志   </span><br><span class=\"line\">32. cut -d: -f1 /etc/passwd # 查看系统所有用户  </span><br><span class=\"line\">33. cut -d: -f1 /etc/group # 查看系统所有组   </span><br><span class=\"line\">34. crontab -l # 查看当前用户的计划任务服务  </span><br><span class=\"line\">35. chkconfig –list # 列出所有系统服务   </span><br><span class=\"line\">36. chkconfig –list | grep on # 列出所有启动的系统服务程序  </span><br><span class=\"line\">37. rpm -qa # 查看所有安装的软件包   </span><br><span class=\"line\">38. cat /proc/cpuinfo ：查看CPU相关参数的linux系统命令  </span><br><span class=\"line\">39. cat /proc/partitions ：查看linux硬盘和分区信息的系统信息命令   </span><br><span class=\"line\">40. cat /proc/meminfo ：查看linux系统内存信息的linux系统命令  </span><br><span class=\"line\">41. cat /proc/version ：查看版本，类似uname -r   </span><br><span class=\"line\">42. cat /proc/ioports ：查看设备io端口  </span><br><span class=\"line\">43. cat /proc/interrupts ：查看中断   </span><br><span class=\"line\">44. cat /proc/pci ：查看pci设备的信息  </span><br><span class=\"line\">45. cat /proc/swaps ：查看所有swap分区的信息</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. uname -a # 查看内核/操作系统/CPU信息的linux系统信息  </span><br><span class=\"line\">2. head -n l /etc/issue # 查看操作系统版本  </span><br><span class=\"line\">3. cat /proc/cpuinfo # 查看CPU信息  </span><br><span class=\"line\">4. hostname # 查看计算机名的linux系统信息命令  </span><br><span class=\"line\">5. lspci -tv # 列出所有PCI设备   </span><br><span class=\"line\">6. lsusb -tv # 列出所有USB设备的linux系统信息命令  </span><br><span class=\"line\">7. lsmod # 列出加载的内核模块   </span><br><span class=\"line\">8. env # 查看环境变量资源  </span><br><span class=\"line\">9. free -m # 查看内存使用量和交换区使用量   </span><br><span class=\"line\">10. df -h # 查看各分区使用情况  </span><br><span class=\"line\">11. du -sh # 查看指定目录的大小   </span><br><span class=\"line\">12. grep MemTotal /proc/meminfo # 查看内存总量  </span><br><span class=\"line\">13. grep MemFree /proc/meminfo # 查看空闲内存量   </span><br><span class=\"line\">14. uptime # 查看系统运行时间、用户数、负载  </span><br><span class=\"line\">15. cat /proc/loadavg # 查看系统负载磁盘和分区   </span><br><span class=\"line\">16. mount | column -t # 查看挂接的分区状态  </span><br><span class=\"line\">17. fdisk -l # 查看所有分区   </span><br><span class=\"line\">18. swapon -s # 查看所有交换分区  </span><br><span class=\"line\">19. hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备)   </span><br><span class=\"line\">20. dmesg | grep IDE # 查看启动时IDE设备检测状况网络  </span><br><span class=\"line\">21. ifconfig # 查看所有网络接口的属性   </span><br><span class=\"line\">22. iptables -L # 查看防火墙设置  </span><br><span class=\"line\">23. route -n # 查看路由表   </span><br><span class=\"line\">24. netstat -lntp # 查看所有监听端口  </span><br><span class=\"line\">25. netstat -antp # 查看所有已经建立的连接   </span><br><span class=\"line\">26. netstat -s # 查看网络统计信息进程  </span><br><span class=\"line\">27. ps -ef # 查看所有进程   </span><br><span class=\"line\">28. top # 实时显示进程状态用户  </span><br><span class=\"line\">29. w # 查看活动用户   </span><br><span class=\"line\">30. id # 查看指定用户信息  </span><br><span class=\"line\">31. last # 查看用户登录日志   </span><br><span class=\"line\">32. cut -d: -f1 /etc/passwd # 查看系统所有用户  </span><br><span class=\"line\">33. cut -d: -f1 /etc/group # 查看系统所有组   </span><br><span class=\"line\">34. crontab -l # 查看当前用户的计划任务服务  </span><br><span class=\"line\">35. chkconfig –list # 列出所有系统服务   </span><br><span class=\"line\">36. chkconfig –list | grep on # 列出所有启动的系统服务程序  </span><br><span class=\"line\">37. rpm -qa # 查看所有安装的软件包   </span><br><span class=\"line\">38. cat /proc/cpuinfo ：查看CPU相关参数的linux系统命令  </span><br><span class=\"line\">39. cat /proc/partitions ：查看linux硬盘和分区信息的系统信息命令   </span><br><span class=\"line\">40. cat /proc/meminfo ：查看linux系统内存信息的linux系统命令  </span><br><span class=\"line\">41. cat /proc/version ：查看版本，类似uname -r   </span><br><span class=\"line\">42. cat /proc/ioports ：查看设备io端口  </span><br><span class=\"line\">43. cat /proc/interrupts ：查看中断   </span><br><span class=\"line\">44. cat /proc/pci ：查看pci设备的信息  </span><br><span class=\"line\">45. cat /proc/swaps ：查看所有swap分区的信息</span><br></pre></td></tr></table></figure>"},{"title":"gitlab搭建","date":"2019-01-24T08:32:26.000Z","comments":1,"description":"本文介绍了在linux操作系统下安装gitlab的命令。。。。。。","_content":"\n1. 配置yum源\n   vim /etc/yum.repos.d/gitlab-ce.repo\n\n   复制以下内容：\n\n    [gitlab-ce]\n\n   name=Gitlab CE Repository\n\n   baseurl=[https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/](https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/)\n\n   gpgcheck=0\n\n   enabled=1\n\n2. 更新本地yum缓存\n\n   sudo yum makecache\n\n3. 安装GitLab社区版\n\n   sudo yum install gitlab-ce        #自动安装最新版\n   sudo yum install gitlab-ce-x.x.x    #安装指定版本\n\n4. GitLab常用命令\n\n   sudo gitlab-ctl start    # 启动所有 gitlab 组件；\n   sudo gitlab-ctl stop        # 停止所有 gitlab 组件；\n   sudo gitlab-ctl restart        # 重启所有 gitlab 组件；\n   sudo gitlab-ctl status        # 查看服务状态；\n   sudo gitlab-ctl reconfigure        # 启动服务；\n   sudo vim /etc/gitlab/gitlab.rb        # 修改默认的配置文件；\n   gitlab-rake gitlab:check SANITIZE=true --trace    # 检查gitlab；\n   sudo gitlab-ctl tail        # 查看日志；\n\n   安装：\n\n   ```\n   $ curl -fsSL get.docker.com -o get-docker.sh #下载get-docker.sh文件\n   $ sudo sh get-docker.sh --mirror Aliyun #以阿里云镜像安装get-docker.sh脚本内容\n   ```\n\n   ------\n\n   调优：\n\n   ```\n   $ sudo systemctl enable docker #开机启动docker\n   $ sudo systemctl start docker #启动docker\n   $ sudo groupadd docker #建立docker组\n   $ sudo usermod -aG docker $USER #将当前用户加入 docker 组\n   $ sudo vim /etc/systemd/system/multi-user.target.wants/docker.service #添加下面仓库地址到此文件\n   ExecStart=/usr/bin/dockerd --registry-mirror=https://ckq4qobq.mirror.aliyuncs.com  #使用阿里云加速\n   $ sudo systemctl daemon-reload #重新加载daemon\n   $ sudo systemctl restart docker  #重启docker\n   ```\n\n   验证：\n\n   ```shell\n   $ sudo docker run --name webserver -d -p\n   81:80 nginx \n   #docker从仓库pull下nginx镜像并命名为webserver，此镜像以后台模式，81端口映射宿主机80端口运行\n   #如果下载速度较慢，可能国内镜像加速未成功。\n   $ firefox #打开firefox浏览器\n   #输入  localhost：81  看到nginx欢迎界面表示搭建成功\n   ```","source":"_posts/gitlab搭建.md","raw":"---\ntitle: gitlab搭建\ndate: 2019-01-24 16:32:26\ntags: Linux\ncomments:\ndescription: 本文介绍了在linux操作系统下安装gitlab的命令。。。。。。\n---\n\n1. 配置yum源\n   vim /etc/yum.repos.d/gitlab-ce.repo\n\n   复制以下内容：\n\n    [gitlab-ce]\n\n   name=Gitlab CE Repository\n\n   baseurl=[https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/](https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/)\n\n   gpgcheck=0\n\n   enabled=1\n\n2. 更新本地yum缓存\n\n   sudo yum makecache\n\n3. 安装GitLab社区版\n\n   sudo yum install gitlab-ce        #自动安装最新版\n   sudo yum install gitlab-ce-x.x.x    #安装指定版本\n\n4. GitLab常用命令\n\n   sudo gitlab-ctl start    # 启动所有 gitlab 组件；\n   sudo gitlab-ctl stop        # 停止所有 gitlab 组件；\n   sudo gitlab-ctl restart        # 重启所有 gitlab 组件；\n   sudo gitlab-ctl status        # 查看服务状态；\n   sudo gitlab-ctl reconfigure        # 启动服务；\n   sudo vim /etc/gitlab/gitlab.rb        # 修改默认的配置文件；\n   gitlab-rake gitlab:check SANITIZE=true --trace    # 检查gitlab；\n   sudo gitlab-ctl tail        # 查看日志；\n\n   安装：\n\n   ```\n   $ curl -fsSL get.docker.com -o get-docker.sh #下载get-docker.sh文件\n   $ sudo sh get-docker.sh --mirror Aliyun #以阿里云镜像安装get-docker.sh脚本内容\n   ```\n\n   ------\n\n   调优：\n\n   ```\n   $ sudo systemctl enable docker #开机启动docker\n   $ sudo systemctl start docker #启动docker\n   $ sudo groupadd docker #建立docker组\n   $ sudo usermod -aG docker $USER #将当前用户加入 docker 组\n   $ sudo vim /etc/systemd/system/multi-user.target.wants/docker.service #添加下面仓库地址到此文件\n   ExecStart=/usr/bin/dockerd --registry-mirror=https://ckq4qobq.mirror.aliyuncs.com  #使用阿里云加速\n   $ sudo systemctl daemon-reload #重新加载daemon\n   $ sudo systemctl restart docker  #重启docker\n   ```\n\n   验证：\n\n   ```shell\n   $ sudo docker run --name webserver -d -p\n   81:80 nginx \n   #docker从仓库pull下nginx镜像并命名为webserver，此镜像以后台模式，81端口映射宿主机80端口运行\n   #如果下载速度较慢，可能国内镜像加速未成功。\n   $ firefox #打开firefox浏览器\n   #输入  localhost：81  看到nginx欢迎界面表示搭建成功\n   ```","slug":"gitlab搭建","published":1,"updated":"2019-01-29T02:16:17.551Z","layout":"post","photos":[],"link":"","_id":"cjsmu9nmo00044sjq6gccddaj","content":"<ol>\n<li><p>配置yum源<br>vim /etc/yum.repos.d/gitlab-ce.repo</p>\n<p>复制以下内容：</p>\n<p> [gitlab-ce]</p>\n<p>name=Gitlab CE Repository</p>\n<p>baseurl=<a href=\"https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/</a></p>\n<p>gpgcheck=0</p>\n<p>enabled=1</p>\n</li>\n<li><p>更新本地yum缓存</p>\n<p>sudo yum makecache</p>\n</li>\n<li><p>安装GitLab社区版</p>\n<p>sudo yum install gitlab-ce        #自动安装最新版<br>sudo yum install gitlab-ce-x.x.x    #安装指定版本</p>\n</li>\n<li><p>GitLab常用命令</p>\n<p>sudo gitlab-ctl start    # 启动所有 gitlab 组件；<br>sudo gitlab-ctl stop        # 停止所有 gitlab 组件；<br>sudo gitlab-ctl restart        # 重启所有 gitlab 组件；<br>sudo gitlab-ctl status        # 查看服务状态；<br>sudo gitlab-ctl reconfigure        # 启动服务；<br>sudo vim /etc/gitlab/gitlab.rb        # 修改默认的配置文件；<br>gitlab-rake gitlab:check SANITIZE=true –trace    # 检查gitlab；<br>sudo gitlab-ctl tail        # 查看日志；</p>\n<p>安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -fsSL get.docker.com -o get-docker.sh #下载get-docker.sh文件</span><br><span class=\"line\">$ sudo sh get-docker.sh --mirror Aliyun #以阿里云镜像安装get-docker.sh脚本内容</span><br></pre></td></tr></table></figure>\n<hr>\n<p>调优：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl enable docker #开机启动docker</span><br><span class=\"line\">$ sudo systemctl start docker #启动docker</span><br><span class=\"line\">$ sudo groupadd docker #建立docker组</span><br><span class=\"line\">$ sudo usermod -aG docker $USER #将当前用户加入 docker 组</span><br><span class=\"line\">$ sudo vim /etc/systemd/system/multi-user.target.wants/docker.service #添加下面仓库地址到此文件</span><br><span class=\"line\">ExecStart=/usr/bin/dockerd --registry-mirror=https://ckq4qobq.mirror.aliyuncs.com  #使用阿里云加速</span><br><span class=\"line\">$ sudo systemctl daemon-reload #重新加载daemon</span><br><span class=\"line\">$ sudo systemctl restart docker  #重启docker</span><br></pre></td></tr></table></figure>\n<p>验证：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo docker run --name webserver -d -p</span><br><span class=\"line\">81:80 nginx </span><br><span class=\"line\"><span class=\"meta\">#</span>docker从仓库pull下nginx镜像并命名为webserver，此镜像以后台模式，81端口映射宿主机80端口运行</span><br><span class=\"line\"><span class=\"meta\">#</span>如果下载速度较慢，可能国内镜像加速未成功。</span><br><span class=\"line\"><span class=\"meta\">$</span> firefox #打开firefox浏览器</span><br><span class=\"line\"><span class=\"meta\">#</span>输入  localhost：81  看到nginx欢迎界面表示搭建成功</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>配置yum源<br>vim /etc/yum.repos.d/gitlab-ce.repo</p>\n<p>复制以下内容：</p>\n<p> [gitlab-ce]</p>\n<p>name=Gitlab CE Repository</p>\n<p>baseurl=<a href=\"https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/</a></p>\n<p>gpgcheck=0</p>\n<p>enabled=1</p>\n</li>\n<li><p>更新本地yum缓存</p>\n<p>sudo yum makecache</p>\n</li>\n<li><p>安装GitLab社区版</p>\n<p>sudo yum install gitlab-ce        #自动安装最新版<br>sudo yum install gitlab-ce-x.x.x    #安装指定版本</p>\n</li>\n<li><p>GitLab常用命令</p>\n<p>sudo gitlab-ctl start    # 启动所有 gitlab 组件；<br>sudo gitlab-ctl stop        # 停止所有 gitlab 组件；<br>sudo gitlab-ctl restart        # 重启所有 gitlab 组件；<br>sudo gitlab-ctl status        # 查看服务状态；<br>sudo gitlab-ctl reconfigure        # 启动服务；<br>sudo vim /etc/gitlab/gitlab.rb        # 修改默认的配置文件；<br>gitlab-rake gitlab:check SANITIZE=true –trace    # 检查gitlab；<br>sudo gitlab-ctl tail        # 查看日志；</p>\n<p>安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -fsSL get.docker.com -o get-docker.sh #下载get-docker.sh文件</span><br><span class=\"line\">$ sudo sh get-docker.sh --mirror Aliyun #以阿里云镜像安装get-docker.sh脚本内容</span><br></pre></td></tr></table></figure>\n<hr>\n<p>调优：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo systemctl enable docker #开机启动docker</span><br><span class=\"line\">$ sudo systemctl start docker #启动docker</span><br><span class=\"line\">$ sudo groupadd docker #建立docker组</span><br><span class=\"line\">$ sudo usermod -aG docker $USER #将当前用户加入 docker 组</span><br><span class=\"line\">$ sudo vim /etc/systemd/system/multi-user.target.wants/docker.service #添加下面仓库地址到此文件</span><br><span class=\"line\">ExecStart=/usr/bin/dockerd --registry-mirror=https://ckq4qobq.mirror.aliyuncs.com  #使用阿里云加速</span><br><span class=\"line\">$ sudo systemctl daemon-reload #重新加载daemon</span><br><span class=\"line\">$ sudo systemctl restart docker  #重启docker</span><br></pre></td></tr></table></figure>\n<p>验证：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo docker run --name webserver -d -p</span><br><span class=\"line\">81:80 nginx </span><br><span class=\"line\"><span class=\"meta\">#</span>docker从仓库pull下nginx镜像并命名为webserver，此镜像以后台模式，81端口映射宿主机80端口运行</span><br><span class=\"line\"><span class=\"meta\">#</span>如果下载速度较慢，可能国内镜像加速未成功。</span><br><span class=\"line\"><span class=\"meta\">$</span> firefox #打开firefox浏览器</span><br><span class=\"line\"><span class=\"meta\">#</span>输入  localhost：81  看到nginx欢迎界面表示搭建成功</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Typora Markdown 笔记","date":"2019-01-28T06:50:59.000Z","toc":true,"description":"typora markdown 常见语法介绍。。。。。。","_content":"\n### 1. 基本操作\n\n#### 1.1 内容目录\n\n* 语法\n\n```\n[toc]\n```\n\n#### 1.2 标题\n\n* 语法\n\n```reStructuredText\n#          一级标题\n##         二级标题\n###        三级标题\n####       四级标题\n#####      五级标题\n######     六级标题\n```\n\n#### 1.3 引用\n\n* 语法\n\n``` reStructuredText\n>  引用内容1\n>  引用内容2\n>> 引用内容3\n```\n\n* 效果\n\n> 引用内容1\n>\n> 引用内容2\n>\n> >\n> >\n> > 引用内容3\n>\n>\n\n\n\n### 2. 代码\n\n#### 2.1 单行代码\n\n* 语法\n\n``` reStructuredText\n`String str1=\"hello\";`\n```\n\n* 效果\n\n`String str1 = \"hello\";`\n\n#### 2.2 多行代码\n\n* 语法\n\n  ``` reStructuredText\n  ~~~\n  ​```\n  ~~~java\n  ​```c\n  ```\n\n* 效果\n\n~~~java\nint a = 10;\nint b = 20;\n~~~\n\n### 3.列表\n\n#### 3.1 无序列表\n\n- 语法\n\n~~~ reStructuredText\n* 无序列表1\n+ 无序列表2\n- 无序列表3\n~~~\n\n* 效果\n* 无序列表1\n* 无序列表2\n* 无序列表3\n\n#### 3.2 多行无序列表\n\n* 语法\n\n~~~reStructuredText\n* 多行无序列表1\nTAB * 多行无序列表2\nTAB TAB * 多行无序列表3\n~~~\n\n* 效果\n\n* 多行无序列表1\n  * 多行无序列表2\n    * 多行无序列表3\n\n#### 3.3 有序列表\n\n* 语法\n\n~~~reStructuredText\n1. 有序列表1\n2. 有序列表2\n3. 有序列表3\n~~~\n\n* 效果\n\n1. 有序列表1\n2. 有序列表2\n3. 有序列表3\n\n#### 3.4多行有序列表\n\n* 语法\n\n~~~reStructuredText\n1. 多行有序列表1\n2. 多行有序列表2\n\t1. 多行有序列表2-1\n\t2. 多行有序列表2-1\n3. 多行有序列表2\n\t1. 多行有序列表3-1\n\t2. 多行有序列表3-1\n~~~\n\n* 效果\n\n1. 多行有序列表1\n2. 多行有序列表2\n   1. 多行有序列表2-1\n   2. 多行有序列表2-2\n\n#### 3.5 任务列表\n\n* 语法\n\n~~~reStructuredText\n-[ ] 抽烟\n-[x] 喝酒\n-[ ] 烫头\n~~~\n\n* 效果\n\n-[  ] 抽烟 \n\n-[x] 喝酒\n\n-[ ] 烫头\n\n#### 3.6 表格\n\n* 语法\n\n~~~ reStructuredText\n|姓名|性别|年龄|手机号|\n|:---|:--:|:--:|---:|\n|张三|男|21|18975346876|\n|李四|女|23|17789548964|\n|王五|男|25|15876513546|\n~~~\n\n* 效果\n\n| 姓名 | 性别 | 年龄 |      手机号 |\n| :--- | :--: | :--: | ----------: |\n| 张三 |  男  |  21  | 18975346876 |\n| 李四 |  女  |  23  | 17789548964 |\n| 王五 |  男  |  25  | 15876513546 |\n\n### 4.链接\n\n#### 4.1 图片\n\n* 语法1（*本地图片*）\n\n~~~ reStructuredText\n[图片上传失败...(image-)]\n~~~\n\n* 语法2（*网络图片*）\n\n~~~ reStructuredText\n![typroa.jpg](https://upload-images.jianshu.io/upload_images/1538862-d91e815790b81e4a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n~~~\n\n* 效果2\n\n![typroa.jpg](https://upload-images.jianshu.io/upload_images/1538862-d91e815790b81e4a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### 4.2 超链接\n\n- 语法1（*行内式链接*）\n\n~~~ reStructuredText\n[百度][https://www.baidu.com/]\n~~~\n\n* 效果\n\n[百度][https://www.baidu.com/]\n\n* 语法2（*参考式链接*）\n\n~~~ reStructuredText\n[CSDN][CSDN网址]\n[CSDN网址]:https://www.csdn.net/\n~~~\n\n* 效果2\n\n[CSDN]:https://www.csdn.net/\n\n* 语法3（*自动链接*）\n\n~~~ :arrow_heading_down:\n<https://github.com/>\n~~~\n\n* 效果\n\n[https://github.com/](https://link.jianshu.com/?t=https%3A%2F%2Fgithub.com%2F)\n\n### 5. 其它\n\n#### 5.1 斜体\n\n* 语法\n\n~~~ :arrow_heading_up:\n*斜体*\n_斜体_\n~~~\n\n* 效果\n\n*斜体*\n\n_斜体_\n\n#### 5.2 加粗\n\n* 语法\n\n~~~ reStructuredText\n**加粗**\n___加粗__\n~~~\n\n* 效果\n\n**加粗**\n\n__加粗__\n\n#### 5.3 下划线\n\n* 语法\n\n~~~ :arrow_heading_down:\n<u>下划线</u>\n~~~\n\n* 效果\n\n<u>下划线</u>\n\n#### 5.4 删除线\n\n* 语法\n\n~~~ reStructuredText\n~~删除线~~\n~~~\n\n* 效果\n\n~~删除线~~\n\n#### 5.5 分隔线\n\n* 语法\n\n~~~ :black_heart:\n***\n---\n___\n~~~\n\n* 效果\n\n***\n\n---\n\n____\n\n#### 5.6 注脚\n\n* 语法\n\n~~~ reStructuredText\nTyproa[^1]\n[^1]markdown editor\n~~~\n\n* 效果\n\nTyproa[^1]\n\n[^1] A markdown editor\n\n#### 5.7 上下标\n\n* 语法\n\n~~~ :arrow_heading_down:\n$3^2=9$\n$3^{(3-1)}=9$\n$H_2SO_4$\n$H_{2SO_4}$\n~~~\n\n* 效果\n\n$3^2 = 9$\n\n$3^{(3-1)} = 9$\n\n$H_2SO_4$\n\n$H_{2SO_4}$\n\n#### 5.8 符号的输入\n\n* 语法\n\n~~~ reStructuredText\n\\\\   反斜线\n\\`   反引号\n\\*   星号\n\\_   底线\n\\{ \\}  花括号\n\\[ \\]  方括号\n\\( \\)  括弧\n\\#   井字号\n\\+   加号\n\\-   减号\n\\.   英文句点\n\\!   惊叹号\n~~~\n\n* 效果\n\n\\\\ \\` \\* \\_ \\{\\} \\[\\] \\(\\) \\# \\+ \\- \\. \\! \n\n#### 5.9 特殊符号\n\n* 语法\n\n~~~ reStructuredText\n&copy;      版权      \n&reg;       注册商标\n&trade;     商标\n&nbsp;      空格\n&amp;       和号\n&quot;      引号\n&apos;      撇号\n&lt;        小于号\n&gt;        大于号\n&ne;        不等号\n&le;        小于等于\n&ge;        大于等于\n&cent;      分\n&pound;     磅\n&euro;      欧元\n&yen;       元\n&sect;      节\n&times;     乘号\n&divide;    除号\n&plusmn;    正负号\n~~~\n\n* 效果\n\n&copy; &reg; &trade; &nbsp; &amp; &quot; &apos; &lt; &gt; &ne; &le; &cent; &pound; &euro; &yen; &sect; &times; &divide; &plusmn; ","source":"_posts/Typora-Markdown-笔记.md","raw":"---\ntitle: Typora Markdown 笔记\ndate: 2019-01-28 14:50:59\ntags: 笔记\ntoc: true\ndescription: typora markdown 常见语法介绍。。。。。。\n---\n\n### 1. 基本操作\n\n#### 1.1 内容目录\n\n* 语法\n\n```\n[toc]\n```\n\n#### 1.2 标题\n\n* 语法\n\n```reStructuredText\n#          一级标题\n##         二级标题\n###        三级标题\n####       四级标题\n#####      五级标题\n######     六级标题\n```\n\n#### 1.3 引用\n\n* 语法\n\n``` reStructuredText\n>  引用内容1\n>  引用内容2\n>> 引用内容3\n```\n\n* 效果\n\n> 引用内容1\n>\n> 引用内容2\n>\n> >\n> >\n> > 引用内容3\n>\n>\n\n\n\n### 2. 代码\n\n#### 2.1 单行代码\n\n* 语法\n\n``` reStructuredText\n`String str1=\"hello\";`\n```\n\n* 效果\n\n`String str1 = \"hello\";`\n\n#### 2.2 多行代码\n\n* 语法\n\n  ``` reStructuredText\n  ~~~\n  ​```\n  ~~~java\n  ​```c\n  ```\n\n* 效果\n\n~~~java\nint a = 10;\nint b = 20;\n~~~\n\n### 3.列表\n\n#### 3.1 无序列表\n\n- 语法\n\n~~~ reStructuredText\n* 无序列表1\n+ 无序列表2\n- 无序列表3\n~~~\n\n* 效果\n* 无序列表1\n* 无序列表2\n* 无序列表3\n\n#### 3.2 多行无序列表\n\n* 语法\n\n~~~reStructuredText\n* 多行无序列表1\nTAB * 多行无序列表2\nTAB TAB * 多行无序列表3\n~~~\n\n* 效果\n\n* 多行无序列表1\n  * 多行无序列表2\n    * 多行无序列表3\n\n#### 3.3 有序列表\n\n* 语法\n\n~~~reStructuredText\n1. 有序列表1\n2. 有序列表2\n3. 有序列表3\n~~~\n\n* 效果\n\n1. 有序列表1\n2. 有序列表2\n3. 有序列表3\n\n#### 3.4多行有序列表\n\n* 语法\n\n~~~reStructuredText\n1. 多行有序列表1\n2. 多行有序列表2\n\t1. 多行有序列表2-1\n\t2. 多行有序列表2-1\n3. 多行有序列表2\n\t1. 多行有序列表3-1\n\t2. 多行有序列表3-1\n~~~\n\n* 效果\n\n1. 多行有序列表1\n2. 多行有序列表2\n   1. 多行有序列表2-1\n   2. 多行有序列表2-2\n\n#### 3.5 任务列表\n\n* 语法\n\n~~~reStructuredText\n-[ ] 抽烟\n-[x] 喝酒\n-[ ] 烫头\n~~~\n\n* 效果\n\n-[  ] 抽烟 \n\n-[x] 喝酒\n\n-[ ] 烫头\n\n#### 3.6 表格\n\n* 语法\n\n~~~ reStructuredText\n|姓名|性别|年龄|手机号|\n|:---|:--:|:--:|---:|\n|张三|男|21|18975346876|\n|李四|女|23|17789548964|\n|王五|男|25|15876513546|\n~~~\n\n* 效果\n\n| 姓名 | 性别 | 年龄 |      手机号 |\n| :--- | :--: | :--: | ----------: |\n| 张三 |  男  |  21  | 18975346876 |\n| 李四 |  女  |  23  | 17789548964 |\n| 王五 |  男  |  25  | 15876513546 |\n\n### 4.链接\n\n#### 4.1 图片\n\n* 语法1（*本地图片*）\n\n~~~ reStructuredText\n[图片上传失败...(image-)]\n~~~\n\n* 语法2（*网络图片*）\n\n~~~ reStructuredText\n![typroa.jpg](https://upload-images.jianshu.io/upload_images/1538862-d91e815790b81e4a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n~~~\n\n* 效果2\n\n![typroa.jpg](https://upload-images.jianshu.io/upload_images/1538862-d91e815790b81e4a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n#### 4.2 超链接\n\n- 语法1（*行内式链接*）\n\n~~~ reStructuredText\n[百度][https://www.baidu.com/]\n~~~\n\n* 效果\n\n[百度][https://www.baidu.com/]\n\n* 语法2（*参考式链接*）\n\n~~~ reStructuredText\n[CSDN][CSDN网址]\n[CSDN网址]:https://www.csdn.net/\n~~~\n\n* 效果2\n\n[CSDN]:https://www.csdn.net/\n\n* 语法3（*自动链接*）\n\n~~~ :arrow_heading_down:\n<https://github.com/>\n~~~\n\n* 效果\n\n[https://github.com/](https://link.jianshu.com/?t=https%3A%2F%2Fgithub.com%2F)\n\n### 5. 其它\n\n#### 5.1 斜体\n\n* 语法\n\n~~~ :arrow_heading_up:\n*斜体*\n_斜体_\n~~~\n\n* 效果\n\n*斜体*\n\n_斜体_\n\n#### 5.2 加粗\n\n* 语法\n\n~~~ reStructuredText\n**加粗**\n___加粗__\n~~~\n\n* 效果\n\n**加粗**\n\n__加粗__\n\n#### 5.3 下划线\n\n* 语法\n\n~~~ :arrow_heading_down:\n<u>下划线</u>\n~~~\n\n* 效果\n\n<u>下划线</u>\n\n#### 5.4 删除线\n\n* 语法\n\n~~~ reStructuredText\n~~删除线~~\n~~~\n\n* 效果\n\n~~删除线~~\n\n#### 5.5 分隔线\n\n* 语法\n\n~~~ :black_heart:\n***\n---\n___\n~~~\n\n* 效果\n\n***\n\n---\n\n____\n\n#### 5.6 注脚\n\n* 语法\n\n~~~ reStructuredText\nTyproa[^1]\n[^1]markdown editor\n~~~\n\n* 效果\n\nTyproa[^1]\n\n[^1] A markdown editor\n\n#### 5.7 上下标\n\n* 语法\n\n~~~ :arrow_heading_down:\n$3^2=9$\n$3^{(3-1)}=9$\n$H_2SO_4$\n$H_{2SO_4}$\n~~~\n\n* 效果\n\n$3^2 = 9$\n\n$3^{(3-1)} = 9$\n\n$H_2SO_4$\n\n$H_{2SO_4}$\n\n#### 5.8 符号的输入\n\n* 语法\n\n~~~ reStructuredText\n\\\\   反斜线\n\\`   反引号\n\\*   星号\n\\_   底线\n\\{ \\}  花括号\n\\[ \\]  方括号\n\\( \\)  括弧\n\\#   井字号\n\\+   加号\n\\-   减号\n\\.   英文句点\n\\!   惊叹号\n~~~\n\n* 效果\n\n\\\\ \\` \\* \\_ \\{\\} \\[\\] \\(\\) \\# \\+ \\- \\. \\! \n\n#### 5.9 特殊符号\n\n* 语法\n\n~~~ reStructuredText\n&copy;      版权      \n&reg;       注册商标\n&trade;     商标\n&nbsp;      空格\n&amp;       和号\n&quot;      引号\n&apos;      撇号\n&lt;        小于号\n&gt;        大于号\n&ne;        不等号\n&le;        小于等于\n&ge;        大于等于\n&cent;      分\n&pound;     磅\n&euro;      欧元\n&yen;       元\n&sect;      节\n&times;     乘号\n&divide;    除号\n&plusmn;    正负号\n~~~\n\n* 效果\n\n&copy; &reg; &trade; &nbsp; &amp; &quot; &apos; &lt; &gt; &ne; &le; &cent; &pound; &euro; &yen; &sect; &times; &divide; &plusmn; ","slug":"Typora-Markdown-笔记","published":1,"updated":"2019-02-14T09:46:37.745Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsmu9nmq00054sjqmorqpw93","content":"<h3 id=\"1-基本操作\"><a href=\"#1-基本操作\" class=\"headerlink\" title=\"1. 基本操作\"></a>1. 基本操作</h3><h4 id=\"1-1-内容目录\"><a href=\"#1-1-内容目录\" class=\"headerlink\" title=\"1.1 内容目录\"></a>1.1 内容目录</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[toc]</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-2-标题\"><a href=\"#1-2-标题\" class=\"headerlink\" title=\"1.2 标题\"></a>1.2 标题</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#          一级标题</span><br><span class=\"line\">##         二级标题</span><br><span class=\"line\">###        三级标题</span><br><span class=\"line\">####       四级标题</span><br><span class=\"line\">#####      五级标题</span><br><span class=\"line\">######     六级标题</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-3-引用\"><a href=\"#1-3-引用\" class=\"headerlink\" title=\"1.3 引用\"></a>1.3 引用</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;  引用内容1</span><br><span class=\"line\">&gt;  引用内容2</span><br><span class=\"line\">&gt;&gt; 引用内容3</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<blockquote>\n<p>引用内容1</p>\n<p>引用内容2</p>\n<blockquote>\n<p>引用内容3</p>\n</blockquote>\n</blockquote>\n<h3 id=\"2-代码\"><a href=\"#2-代码\" class=\"headerlink\" title=\"2. 代码\"></a>2. 代码</h3><h4 id=\"2-1-单行代码\"><a href=\"#2-1-单行代码\" class=\"headerlink\" title=\"2.1 单行代码\"></a>2.1 单行代码</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`String str1=&quot;hello&quot;;`</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p><code>String str1 = &quot;hello&quot;;</code></p>\n<h4 id=\"2-2-多行代码\"><a href=\"#2-2-多行代码\" class=\"headerlink\" title=\"2.2 多行代码\"></a>2.2 多行代码</h4><ul>\n<li><p>语法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~~</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  ​```c</span><br><span class=\"line\">  ```</span><br><span class=\"line\"></span><br><span class=\"line\">* 效果</span><br><span class=\"line\"></span><br><span class=\"line\">~~~java</span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">20</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"3-列表\"><a href=\"#3-列表\" class=\"headerlink\" title=\"3.列表\"></a>3.列表</h3><h4 id=\"3-1-无序列表\"><a href=\"#3-1-无序列表\" class=\"headerlink\" title=\"3.1 无序列表\"></a>3.1 无序列表</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 无序列表1</span><br><span class=\"line\">+ 无序列表2</span><br><span class=\"line\">- 无序列表3</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n<li>无序列表1</li>\n<li>无序列表2</li>\n<li>无序列表3</li>\n</ul>\n<h4 id=\"3-2-多行无序列表\"><a href=\"#3-2-多行无序列表\" class=\"headerlink\" title=\"3.2 多行无序列表\"></a>3.2 多行无序列表</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 多行无序列表1</span><br><span class=\"line\">TAB * 多行无序列表2</span><br><span class=\"line\">TAB TAB * 多行无序列表3</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>效果</p>\n</li>\n<li><p>多行无序列表1</p>\n<ul>\n<li>多行无序列表2<ul>\n<li>多行无序列表3</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-3-有序列表\"><a href=\"#3-3-有序列表\" class=\"headerlink\" title=\"3.3 有序列表\"></a>3.3 有序列表</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 有序列表1</span><br><span class=\"line\">2. 有序列表2</span><br><span class=\"line\">3. 有序列表3</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<ol>\n<li>有序列表1</li>\n<li>有序列表2</li>\n<li>有序列表3</li>\n</ol>\n<h4 id=\"3-4多行有序列表\"><a href=\"#3-4多行有序列表\" class=\"headerlink\" title=\"3.4多行有序列表\"></a>3.4多行有序列表</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 多行有序列表1</span><br><span class=\"line\">2. 多行有序列表2</span><br><span class=\"line\">\t1. 多行有序列表2-1</span><br><span class=\"line\">\t2. 多行有序列表2-1</span><br><span class=\"line\">3. 多行有序列表2</span><br><span class=\"line\">\t1. 多行有序列表3-1</span><br><span class=\"line\">\t2. 多行有序列表3-1</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<ol>\n<li>多行有序列表1</li>\n<li>多行有序列表2<ol>\n<li>多行有序列表2-1</li>\n<li>多行有序列表2-2</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"3-5-任务列表\"><a href=\"#3-5-任务列表\" class=\"headerlink\" title=\"3.5 任务列表\"></a>3.5 任务列表</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-[ ] 抽烟</span><br><span class=\"line\">-[x] 喝酒</span><br><span class=\"line\">-[ ] 烫头</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p>-[  ] 抽烟 </p>\n<p>-[x] 喝酒</p>\n<p>-[ ] 烫头</p>\n<h4 id=\"3-6-表格\"><a href=\"#3-6-表格\" class=\"headerlink\" title=\"3.6 表格\"></a>3.6 表格</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|姓名|性别|年龄|手机号|</span><br><span class=\"line\">|:---|:--:|:--:|---:|</span><br><span class=\"line\">|张三|男|21|18975346876|</span><br><span class=\"line\">|李四|女|23|17789548964|</span><br><span class=\"line\">|王五|男|25|15876513546|</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">姓名</th>\n<th style=\"text-align:center\">性别</th>\n<th style=\"text-align:center\">年龄</th>\n<th style=\"text-align:right\">手机号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">张三</td>\n<td style=\"text-align:center\">男</td>\n<td style=\"text-align:center\">21</td>\n<td style=\"text-align:right\">18975346876</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">李四</td>\n<td style=\"text-align:center\">女</td>\n<td style=\"text-align:center\">23</td>\n<td style=\"text-align:right\">17789548964</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">王五</td>\n<td style=\"text-align:center\">男</td>\n<td style=\"text-align:center\">25</td>\n<td style=\"text-align:right\">15876513546</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"4-链接\"><a href=\"#4-链接\" class=\"headerlink\" title=\"4.链接\"></a>4.链接</h3><h4 id=\"4-1-图片\"><a href=\"#4-1-图片\" class=\"headerlink\" title=\"4.1 图片\"></a>4.1 图片</h4><ul>\n<li>语法1（<em>本地图片</em>）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[图片上传失败...(image-)]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>语法2（<em>网络图片</em>）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![typroa.jpg](https://upload-images.jianshu.io/upload_images/1538862-d91e815790b81e4a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果2</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1538862-d91e815790b81e4a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"typroa.jpg\"></p>\n<h4 id=\"4-2-超链接\"><a href=\"#4-2-超链接\" class=\"headerlink\" title=\"4.2 超链接\"></a>4.2 超链接</h4><ul>\n<li>语法1（<em>行内式链接</em>）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[百度][https://www.baidu.com/]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p>[百度][<a href=\"https://www.baidu.com/]\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com/]</a></p>\n<ul>\n<li>语法2（<em>参考式链接</em>）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[CSDN][CSDN网址]</span><br><span class=\"line\">[CSDN网址]:https://www.csdn.net/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果2</li>\n</ul>\n<ul>\n<li>语法3（<em>自动链接</em>）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;https://github.com/&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p><a href=\"https://link.jianshu.com/?t=https%3A%2F%2Fgithub.com%2F\" target=\"_blank\" rel=\"noopener\">https://github.com/</a></p>\n<h3 id=\"5-其它\"><a href=\"#5-其它\" class=\"headerlink\" title=\"5. 其它\"></a>5. 其它</h3><h4 id=\"5-1-斜体\"><a href=\"#5-1-斜体\" class=\"headerlink\" title=\"5.1 斜体\"></a>5.1 斜体</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*斜体*</span><br><span class=\"line\">_斜体_</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p><em>斜体</em></p>\n<p>_斜体_</p>\n<h4 id=\"5-2-加粗\"><a href=\"#5-2-加粗\" class=\"headerlink\" title=\"5.2 加粗\"></a>5.2 加粗</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**加粗**</span><br><span class=\"line\">___加粗__</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p><strong>加粗</strong></p>\n<p><strong>加粗</strong></p>\n<h4 id=\"5-3-下划线\"><a href=\"#5-3-下划线\" class=\"headerlink\" title=\"5.3 下划线\"></a>5.3 下划线</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;u&gt;下划线&lt;/u&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p><u>下划线</u></p>\n<h4 id=\"5-4-删除线\"><a href=\"#5-4-删除线\" class=\"headerlink\" title=\"5.4 删除线\"></a>5.4 删除线</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~删除线~~</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p><del>删除线</del></p>\n<h4 id=\"5-5-分隔线\"><a href=\"#5-5-分隔线\" class=\"headerlink\" title=\"5.5 分隔线\"></a>5.5 分隔线</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">***</span><br><span class=\"line\">---</span><br><span class=\"line\">___</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<hr>\n<hr>\n<hr>\n<h4 id=\"5-6-注脚\"><a href=\"#5-6-注脚\" class=\"headerlink\" title=\"5.6 注脚\"></a>5.6 注脚</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Typroa[^1]</span><br><span class=\"line\">[^1]markdown editor</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p>Typroa[^1]</p>\n<p>[^1] A markdown editor</p>\n<h4 id=\"5-7-上下标\"><a href=\"#5-7-上下标\" class=\"headerlink\" title=\"5.7 上下标\"></a>5.7 上下标</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$3^2=9$</span><br><span class=\"line\">$3^&#123;(3-1)&#125;=9$</span><br><span class=\"line\">$H_2SO_4$</span><br><span class=\"line\">$H_&#123;2SO_4&#125;$</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p>$3^2 = 9$</p>\n<p>$3^{(3-1)} = 9$</p>\n<p>$H_2SO_4$</p>\n<p>$H_{2SO_4}$</p>\n<h4 id=\"5-8-符号的输入\"><a href=\"#5-8-符号的输入\" class=\"headerlink\" title=\"5.8 符号的输入\"></a>5.8 符号的输入</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\\\   反斜线</span><br><span class=\"line\">\\`   反引号</span><br><span class=\"line\">\\*   星号</span><br><span class=\"line\">\\_   底线</span><br><span class=\"line\">\\&#123; \\&#125;  花括号</span><br><span class=\"line\">\\[ \\]  方括号</span><br><span class=\"line\">\\( \\)  括弧</span><br><span class=\"line\">\\#   井字号</span><br><span class=\"line\">\\+   加号</span><br><span class=\"line\">\\-   减号</span><br><span class=\"line\">\\.   英文句点</span><br><span class=\"line\">\\!   惊叹号</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p>\\ ` * _ {} [] () # + - . ! </p>\n<h4 id=\"5-9-特殊符号\"><a href=\"#5-9-特殊符号\" class=\"headerlink\" title=\"5.9 特殊符号\"></a>5.9 特殊符号</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;copy;      版权      </span><br><span class=\"line\">&amp;reg;       注册商标</span><br><span class=\"line\">&amp;trade;     商标</span><br><span class=\"line\">&amp;nbsp;      空格</span><br><span class=\"line\">&amp;amp;       和号</span><br><span class=\"line\">&amp;quot;      引号</span><br><span class=\"line\">&amp;apos;      撇号</span><br><span class=\"line\">&amp;lt;        小于号</span><br><span class=\"line\">&amp;gt;        大于号</span><br><span class=\"line\">&amp;ne;        不等号</span><br><span class=\"line\">&amp;le;        小于等于</span><br><span class=\"line\">&amp;ge;        大于等于</span><br><span class=\"line\">&amp;cent;      分</span><br><span class=\"line\">&amp;pound;     磅</span><br><span class=\"line\">&amp;euro;      欧元</span><br><span class=\"line\">&amp;yen;       元</span><br><span class=\"line\">&amp;sect;      节</span><br><span class=\"line\">&amp;times;     乘号</span><br><span class=\"line\">&amp;divide;    除号</span><br><span class=\"line\">&amp;plusmn;    正负号</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p>&copy; &reg; &trade; &nbsp; &amp; &quot; &apos; &lt; &gt; &ne; &le; &cent; &pound; &euro; &yen; &sect; &times; &divide; &plusmn; </p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-基本操作\"><a href=\"#1-基本操作\" class=\"headerlink\" title=\"1. 基本操作\"></a>1. 基本操作</h3><h4 id=\"1-1-内容目录\"><a href=\"#1-1-内容目录\" class=\"headerlink\" title=\"1.1 内容目录\"></a>1.1 内容目录</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[toc]</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-2-标题\"><a href=\"#1-2-标题\" class=\"headerlink\" title=\"1.2 标题\"></a>1.2 标题</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#          一级标题</span><br><span class=\"line\">##         二级标题</span><br><span class=\"line\">###        三级标题</span><br><span class=\"line\">####       四级标题</span><br><span class=\"line\">#####      五级标题</span><br><span class=\"line\">######     六级标题</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-3-引用\"><a href=\"#1-3-引用\" class=\"headerlink\" title=\"1.3 引用\"></a>1.3 引用</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;  引用内容1</span><br><span class=\"line\">&gt;  引用内容2</span><br><span class=\"line\">&gt;&gt; 引用内容3</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<blockquote>\n<p>引用内容1</p>\n<p>引用内容2</p>\n<blockquote>\n<p>引用内容3</p>\n</blockquote>\n</blockquote>\n<h3 id=\"2-代码\"><a href=\"#2-代码\" class=\"headerlink\" title=\"2. 代码\"></a>2. 代码</h3><h4 id=\"2-1-单行代码\"><a href=\"#2-1-单行代码\" class=\"headerlink\" title=\"2.1 单行代码\"></a>2.1 单行代码</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`String str1=&quot;hello&quot;;`</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p><code>String str1 = &quot;hello&quot;;</code></p>\n<h4 id=\"2-2-多行代码\"><a href=\"#2-2-多行代码\" class=\"headerlink\" title=\"2.2 多行代码\"></a>2.2 多行代码</h4><ul>\n<li><p>语法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~~</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  ​```c</span><br><span class=\"line\">  ```</span><br><span class=\"line\"></span><br><span class=\"line\">* 效果</span><br><span class=\"line\"></span><br><span class=\"line\">~~~java</span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">20</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"3-列表\"><a href=\"#3-列表\" class=\"headerlink\" title=\"3.列表\"></a>3.列表</h3><h4 id=\"3-1-无序列表\"><a href=\"#3-1-无序列表\" class=\"headerlink\" title=\"3.1 无序列表\"></a>3.1 无序列表</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 无序列表1</span><br><span class=\"line\">+ 无序列表2</span><br><span class=\"line\">- 无序列表3</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n<li>无序列表1</li>\n<li>无序列表2</li>\n<li>无序列表3</li>\n</ul>\n<h4 id=\"3-2-多行无序列表\"><a href=\"#3-2-多行无序列表\" class=\"headerlink\" title=\"3.2 多行无序列表\"></a>3.2 多行无序列表</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 多行无序列表1</span><br><span class=\"line\">TAB * 多行无序列表2</span><br><span class=\"line\">TAB TAB * 多行无序列表3</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>效果</p>\n</li>\n<li><p>多行无序列表1</p>\n<ul>\n<li>多行无序列表2<ul>\n<li>多行无序列表3</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-3-有序列表\"><a href=\"#3-3-有序列表\" class=\"headerlink\" title=\"3.3 有序列表\"></a>3.3 有序列表</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 有序列表1</span><br><span class=\"line\">2. 有序列表2</span><br><span class=\"line\">3. 有序列表3</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<ol>\n<li>有序列表1</li>\n<li>有序列表2</li>\n<li>有序列表3</li>\n</ol>\n<h4 id=\"3-4多行有序列表\"><a href=\"#3-4多行有序列表\" class=\"headerlink\" title=\"3.4多行有序列表\"></a>3.4多行有序列表</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 多行有序列表1</span><br><span class=\"line\">2. 多行有序列表2</span><br><span class=\"line\">\t1. 多行有序列表2-1</span><br><span class=\"line\">\t2. 多行有序列表2-1</span><br><span class=\"line\">3. 多行有序列表2</span><br><span class=\"line\">\t1. 多行有序列表3-1</span><br><span class=\"line\">\t2. 多行有序列表3-1</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<ol>\n<li>多行有序列表1</li>\n<li>多行有序列表2<ol>\n<li>多行有序列表2-1</li>\n<li>多行有序列表2-2</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"3-5-任务列表\"><a href=\"#3-5-任务列表\" class=\"headerlink\" title=\"3.5 任务列表\"></a>3.5 任务列表</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-[ ] 抽烟</span><br><span class=\"line\">-[x] 喝酒</span><br><span class=\"line\">-[ ] 烫头</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p>-[  ] 抽烟 </p>\n<p>-[x] 喝酒</p>\n<p>-[ ] 烫头</p>\n<h4 id=\"3-6-表格\"><a href=\"#3-6-表格\" class=\"headerlink\" title=\"3.6 表格\"></a>3.6 表格</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|姓名|性别|年龄|手机号|</span><br><span class=\"line\">|:---|:--:|:--:|---:|</span><br><span class=\"line\">|张三|男|21|18975346876|</span><br><span class=\"line\">|李四|女|23|17789548964|</span><br><span class=\"line\">|王五|男|25|15876513546|</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">姓名</th>\n<th style=\"text-align:center\">性别</th>\n<th style=\"text-align:center\">年龄</th>\n<th style=\"text-align:right\">手机号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">张三</td>\n<td style=\"text-align:center\">男</td>\n<td style=\"text-align:center\">21</td>\n<td style=\"text-align:right\">18975346876</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">李四</td>\n<td style=\"text-align:center\">女</td>\n<td style=\"text-align:center\">23</td>\n<td style=\"text-align:right\">17789548964</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">王五</td>\n<td style=\"text-align:center\">男</td>\n<td style=\"text-align:center\">25</td>\n<td style=\"text-align:right\">15876513546</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"4-链接\"><a href=\"#4-链接\" class=\"headerlink\" title=\"4.链接\"></a>4.链接</h3><h4 id=\"4-1-图片\"><a href=\"#4-1-图片\" class=\"headerlink\" title=\"4.1 图片\"></a>4.1 图片</h4><ul>\n<li>语法1（<em>本地图片</em>）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[图片上传失败...(image-)]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>语法2（<em>网络图片</em>）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![typroa.jpg](https://upload-images.jianshu.io/upload_images/1538862-d91e815790b81e4a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果2</li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/1538862-d91e815790b81e4a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"typroa.jpg\"></p>\n<h4 id=\"4-2-超链接\"><a href=\"#4-2-超链接\" class=\"headerlink\" title=\"4.2 超链接\"></a>4.2 超链接</h4><ul>\n<li>语法1（<em>行内式链接</em>）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[百度][https://www.baidu.com/]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p>[百度][<a href=\"https://www.baidu.com/]\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com/]</a></p>\n<ul>\n<li>语法2（<em>参考式链接</em>）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[CSDN][CSDN网址]</span><br><span class=\"line\">[CSDN网址]:https://www.csdn.net/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果2</li>\n</ul>\n<ul>\n<li>语法3（<em>自动链接</em>）</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;https://github.com/&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p><a href=\"https://link.jianshu.com/?t=https%3A%2F%2Fgithub.com%2F\" target=\"_blank\" rel=\"noopener\">https://github.com/</a></p>\n<h3 id=\"5-其它\"><a href=\"#5-其它\" class=\"headerlink\" title=\"5. 其它\"></a>5. 其它</h3><h4 id=\"5-1-斜体\"><a href=\"#5-1-斜体\" class=\"headerlink\" title=\"5.1 斜体\"></a>5.1 斜体</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*斜体*</span><br><span class=\"line\">_斜体_</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p><em>斜体</em></p>\n<p>_斜体_</p>\n<h4 id=\"5-2-加粗\"><a href=\"#5-2-加粗\" class=\"headerlink\" title=\"5.2 加粗\"></a>5.2 加粗</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**加粗**</span><br><span class=\"line\">___加粗__</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p><strong>加粗</strong></p>\n<p><strong>加粗</strong></p>\n<h4 id=\"5-3-下划线\"><a href=\"#5-3-下划线\" class=\"headerlink\" title=\"5.3 下划线\"></a>5.3 下划线</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;u&gt;下划线&lt;/u&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p><u>下划线</u></p>\n<h4 id=\"5-4-删除线\"><a href=\"#5-4-删除线\" class=\"headerlink\" title=\"5.4 删除线\"></a>5.4 删除线</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~删除线~~</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p><del>删除线</del></p>\n<h4 id=\"5-5-分隔线\"><a href=\"#5-5-分隔线\" class=\"headerlink\" title=\"5.5 分隔线\"></a>5.5 分隔线</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">***</span><br><span class=\"line\">---</span><br><span class=\"line\">___</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<hr>\n<hr>\n<hr>\n<h4 id=\"5-6-注脚\"><a href=\"#5-6-注脚\" class=\"headerlink\" title=\"5.6 注脚\"></a>5.6 注脚</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Typroa[^1]</span><br><span class=\"line\">[^1]markdown editor</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p>Typroa[^1]</p>\n<p>[^1] A markdown editor</p>\n<h4 id=\"5-7-上下标\"><a href=\"#5-7-上下标\" class=\"headerlink\" title=\"5.7 上下标\"></a>5.7 上下标</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$3^2=9$</span><br><span class=\"line\">$3^&#123;(3-1)&#125;=9$</span><br><span class=\"line\">$H_2SO_4$</span><br><span class=\"line\">$H_&#123;2SO_4&#125;$</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p>$3^2 = 9$</p>\n<p>$3^{(3-1)} = 9$</p>\n<p>$H_2SO_4$</p>\n<p>$H_{2SO_4}$</p>\n<h4 id=\"5-8-符号的输入\"><a href=\"#5-8-符号的输入\" class=\"headerlink\" title=\"5.8 符号的输入\"></a>5.8 符号的输入</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\\\   反斜线</span><br><span class=\"line\">\\`   反引号</span><br><span class=\"line\">\\*   星号</span><br><span class=\"line\">\\_   底线</span><br><span class=\"line\">\\&#123; \\&#125;  花括号</span><br><span class=\"line\">\\[ \\]  方括号</span><br><span class=\"line\">\\( \\)  括弧</span><br><span class=\"line\">\\#   井字号</span><br><span class=\"line\">\\+   加号</span><br><span class=\"line\">\\-   减号</span><br><span class=\"line\">\\.   英文句点</span><br><span class=\"line\">\\!   惊叹号</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p>\\ ` * _ {} [] () # + - . ! </p>\n<h4 id=\"5-9-特殊符号\"><a href=\"#5-9-特殊符号\" class=\"headerlink\" title=\"5.9 特殊符号\"></a>5.9 特殊符号</h4><ul>\n<li>语法</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;copy;      版权      </span><br><span class=\"line\">&amp;reg;       注册商标</span><br><span class=\"line\">&amp;trade;     商标</span><br><span class=\"line\">&amp;nbsp;      空格</span><br><span class=\"line\">&amp;amp;       和号</span><br><span class=\"line\">&amp;quot;      引号</span><br><span class=\"line\">&amp;apos;      撇号</span><br><span class=\"line\">&amp;lt;        小于号</span><br><span class=\"line\">&amp;gt;        大于号</span><br><span class=\"line\">&amp;ne;        不等号</span><br><span class=\"line\">&amp;le;        小于等于</span><br><span class=\"line\">&amp;ge;        大于等于</span><br><span class=\"line\">&amp;cent;      分</span><br><span class=\"line\">&amp;pound;     磅</span><br><span class=\"line\">&amp;euro;      欧元</span><br><span class=\"line\">&amp;yen;       元</span><br><span class=\"line\">&amp;sect;      节</span><br><span class=\"line\">&amp;times;     乘号</span><br><span class=\"line\">&amp;divide;    除号</span><br><span class=\"line\">&amp;plusmn;    正负号</span><br></pre></td></tr></table></figure>\n<ul>\n<li>效果</li>\n</ul>\n<p>&copy; &reg; &trade; &nbsp; &amp; &quot; &apos; &lt; &gt; &ne; &le; &cent; &pound; &euro; &yen; &sect; &times; &divide; &plusmn; </p>\n"},{"title":"centos7安装Docker","date":"2018-09-03T13:52:56.000Z","description":"本文介绍了在centos7环境下面安装docker的步骤和注意事项。。。。。。","_content":"\n1. Docker版本 : \n\n   * 社区版（CE）:Docker Community Edition（CE）非常适合希望开始使用Docker并尝试使用基于容器的应用程序的个人开发人员和小型团队。\n   * 企业版（EE）: Docker企业版（EE）专为企业开发和IT团队而设计，他们可以在生产中大规模构建，发布和运行业务关键型应用程序。\n\n2. Docker安装方式：\n\n   安装之前需要卸载旧版本 \n\n   ```shell\n   $ sudo yum remove docker \\\n                     docker-client \\\n                     docker-client-latest \\\n                     docker-common \\\n                     docker-latest \\\n                     docker-latest-logrotate \\\n                     docker-logrotate \\\n                     docker-selinux \\\n                     docker-engine-selinux \\\n                     docker-engine\n   ```\n\n   * 使用存储库安装\n\n     * 设置存储库\n\n       * 安装所需的包。`yum-utils`提供了`yum-config-manager` 效用，并`device-mapper-persistent-data`和`lvm2`由需要 `devicemapper`存储驱动程序。\n\n         ```shell\n         $ sudo yum install -y yum-utils \\\n           device-mapper-persistent-data \\\n           lvm2\n         ```\n\n       * 使用以下命令设置稳定存储库。即使您还想从边缘或测试存储库安装构建，您始终需要稳定的存储 库。\n\n         ``` shell\n         $ sudo yum-config-manager \\\n             --add-repo \\\n             https://download.docker.com/linux/centos/docker-ce.repo\n         ```\n\n       * 可选：启用边缘和测试存储库。这些存储库包含在docker.repo上面的文件中，但默认情况下处于禁用状态。您可以将它们与稳定存储库一起启用。\n\n         ```shell\n         $ sudo yum-config-manager --enable docker-ce-edge\n         $ sudo yum-config-manager --enable docker-ce-test\n         ```\n\n     * 设置存储库\n\n       1. 安装最新版本的Docker CE，或转到下一步安装特定版本：\n\n          ```shell\n          $ sudo yum install docker-ce\n          ```\n\n       2. 要安装特定版本的Docker CE，请列出repo中的可用版本，然后选择并安装：\n\n          一个。列出并对您的仓库中可用的版本进行排序。此示例按版本号对结果进行排序，从最高到最低，并被截断\n\n          ``` shell\n          $ yum list docker-ce --showduplicates | sort -r\n          docker-ce.x86_64            18.03.0.ce-1.el7.centos             docker-ce-stable\n          $ sudo yum install docker-ce-<VERSION STRING>\n          ```\n\n       3. 尚未启动。该docker组已创建，但没有用户添加到该组。\n\n          ```shell\n          $ sudo systemctl start docker\n          ```\n\n   * 从包安装\n\n     1. 转到 https://download.docker.com/linux/centos/7/x86_64/stable/Packages/ 并下载.rpm要安装的Docker版本的文件。\n\n     2. 安装Docker CE，将下面的路径更改为您下载Docker软件包的路径。\n\n        ```\n        $ sudo yum install /path/to/package.rpm\n        ```\n\n        Docker已安装但尚未启动。该docker组已创建，但没有用户添加到该组。\n\n     3. 启动Docker。\n\n        ```shell\n        $ sudo systemctl start docker\n        ```\n\n     4. docker通过运行hello-world 映像验证是否已正确安装。\n\n        ```shell\n        $ sudo docker run hello-world\n        ```\n\n   * 使用便利脚本安装\n\n     ```shell\n     $ curl -fsSL https://get.docker.com -o get-docker.sh\n     $ sudo sh get-docker.sh\n     \n     <output truncated>\n     \n     If you would like to use Docker as a non-root user, you should now consider\n     adding your user to the \"docker\" group with something like:\n     \n       sudo usermod -aG docker your-user\n     \n     Remember to log out and back in for this to take effect!\n     \n     WARNING: Adding a user to the \"docker\" group grants the ability to run\n              containers which can be used to obtain root privileges on the\n              docker host.\n              Refer to https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface\n              for more information.\n     ```\n\n   * 卸载Docker CE\n\n     * 卸载Docker包：\n\n       ```shell\n       $ sudo yum remove docker-ce\n       ```\n\n     * 主机上的图像，容器，卷或自定义配置文件不会自动删除。要删除所有图像，容器和卷：\n\n       ```shell\n       $ sudo rm -rf /var/lib/docker\n       ```","source":"_posts/centos7安装Docker.md","raw":"---\ntitle: centos7安装Docker\ndate: 2018-09-03 21:52:56\ntags: Linux\ncategories: Linux\ndescription: 本文介绍了在centos7环境下面安装docker的步骤和注意事项。。。。。。\n---\n\n1. Docker版本 : \n\n   * 社区版（CE）:Docker Community Edition（CE）非常适合希望开始使用Docker并尝试使用基于容器的应用程序的个人开发人员和小型团队。\n   * 企业版（EE）: Docker企业版（EE）专为企业开发和IT团队而设计，他们可以在生产中大规模构建，发布和运行业务关键型应用程序。\n\n2. Docker安装方式：\n\n   安装之前需要卸载旧版本 \n\n   ```shell\n   $ sudo yum remove docker \\\n                     docker-client \\\n                     docker-client-latest \\\n                     docker-common \\\n                     docker-latest \\\n                     docker-latest-logrotate \\\n                     docker-logrotate \\\n                     docker-selinux \\\n                     docker-engine-selinux \\\n                     docker-engine\n   ```\n\n   * 使用存储库安装\n\n     * 设置存储库\n\n       * 安装所需的包。`yum-utils`提供了`yum-config-manager` 效用，并`device-mapper-persistent-data`和`lvm2`由需要 `devicemapper`存储驱动程序。\n\n         ```shell\n         $ sudo yum install -y yum-utils \\\n           device-mapper-persistent-data \\\n           lvm2\n         ```\n\n       * 使用以下命令设置稳定存储库。即使您还想从边缘或测试存储库安装构建，您始终需要稳定的存储 库。\n\n         ``` shell\n         $ sudo yum-config-manager \\\n             --add-repo \\\n             https://download.docker.com/linux/centos/docker-ce.repo\n         ```\n\n       * 可选：启用边缘和测试存储库。这些存储库包含在docker.repo上面的文件中，但默认情况下处于禁用状态。您可以将它们与稳定存储库一起启用。\n\n         ```shell\n         $ sudo yum-config-manager --enable docker-ce-edge\n         $ sudo yum-config-manager --enable docker-ce-test\n         ```\n\n     * 设置存储库\n\n       1. 安装最新版本的Docker CE，或转到下一步安装特定版本：\n\n          ```shell\n          $ sudo yum install docker-ce\n          ```\n\n       2. 要安装特定版本的Docker CE，请列出repo中的可用版本，然后选择并安装：\n\n          一个。列出并对您的仓库中可用的版本进行排序。此示例按版本号对结果进行排序，从最高到最低，并被截断\n\n          ``` shell\n          $ yum list docker-ce --showduplicates | sort -r\n          docker-ce.x86_64            18.03.0.ce-1.el7.centos             docker-ce-stable\n          $ sudo yum install docker-ce-<VERSION STRING>\n          ```\n\n       3. 尚未启动。该docker组已创建，但没有用户添加到该组。\n\n          ```shell\n          $ sudo systemctl start docker\n          ```\n\n   * 从包安装\n\n     1. 转到 https://download.docker.com/linux/centos/7/x86_64/stable/Packages/ 并下载.rpm要安装的Docker版本的文件。\n\n     2. 安装Docker CE，将下面的路径更改为您下载Docker软件包的路径。\n\n        ```\n        $ sudo yum install /path/to/package.rpm\n        ```\n\n        Docker已安装但尚未启动。该docker组已创建，但没有用户添加到该组。\n\n     3. 启动Docker。\n\n        ```shell\n        $ sudo systemctl start docker\n        ```\n\n     4. docker通过运行hello-world 映像验证是否已正确安装。\n\n        ```shell\n        $ sudo docker run hello-world\n        ```\n\n   * 使用便利脚本安装\n\n     ```shell\n     $ curl -fsSL https://get.docker.com -o get-docker.sh\n     $ sudo sh get-docker.sh\n     \n     <output truncated>\n     \n     If you would like to use Docker as a non-root user, you should now consider\n     adding your user to the \"docker\" group with something like:\n     \n       sudo usermod -aG docker your-user\n     \n     Remember to log out and back in for this to take effect!\n     \n     WARNING: Adding a user to the \"docker\" group grants the ability to run\n              containers which can be used to obtain root privileges on the\n              docker host.\n              Refer to https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface\n              for more information.\n     ```\n\n   * 卸载Docker CE\n\n     * 卸载Docker包：\n\n       ```shell\n       $ sudo yum remove docker-ce\n       ```\n\n     * 主机上的图像，容器，卷或自定义配置文件不会自动删除。要删除所有图像，容器和卷：\n\n       ```shell\n       $ sudo rm -rf /var/lib/docker\n       ```","slug":"centos7安装Docker","published":1,"updated":"2019-01-29T02:18:15.017Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsmu9nmt00064sjqqjvbgdl5","content":"<ol>\n<li><p>Docker版本 : </p>\n<ul>\n<li>社区版（CE）:Docker Community Edition（CE）非常适合希望开始使用Docker并尝试使用基于容器的应用程序的个人开发人员和小型团队。</li>\n<li>企业版（EE）: Docker企业版（EE）专为企业开发和IT团队而设计，他们可以在生产中大规模构建，发布和运行业务关键型应用程序。</li>\n</ul>\n</li>\n<li><p>Docker安装方式：</p>\n<p>安装之前需要卸载旧版本 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo yum remove docker \\</span><br><span class=\"line\">                  docker-client \\</span><br><span class=\"line\">                  docker-client-latest \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-latest \\</span><br><span class=\"line\">                  docker-latest-logrotate \\</span><br><span class=\"line\">                  docker-logrotate \\</span><br><span class=\"line\">                  docker-selinux \\</span><br><span class=\"line\">                  docker-engine-selinux \\</span><br><span class=\"line\">                  docker-engine</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>使用存储库安装</p>\n<ul>\n<li><p>设置存储库</p>\n<ul>\n<li><p>安装所需的包。<code>yum-utils</code>提供了<code>yum-config-manager</code> 效用，并<code>device-mapper-persistent-data</code>和<code>lvm2</code>由需要 <code>devicemapper</code>存储驱动程序。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo yum install -y yum-utils \\</span><br><span class=\"line\">  device-mapper-persistent-data \\</span><br><span class=\"line\">  lvm2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用以下命令设置稳定存储库。即使您还想从边缘或测试存储库安装构建，您始终需要稳定的存储 库。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可选：启用边缘和测试存储库。这些存储库包含在docker.repo上面的文件中，但默认情况下处于禁用状态。您可以将它们与稳定存储库一起启用。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo yum-config-manager --enable docker-ce-edge</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo yum-config-manager --enable docker-ce-test</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>设置存储库</p>\n<ol>\n<li><p>安装最新版本的Docker CE，或转到下一步安装特定版本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo yum install docker-ce</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>要安装特定版本的Docker CE，请列出repo中的可用版本，然后选择并安装：</p>\n<p>一个。列出并对您的仓库中可用的版本进行排序。此示例按版本号对结果进行排序，从最高到最低，并被截断</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> yum list docker-ce --showduplicates | sort -r</span><br><span class=\"line\">docker-ce.x86_64            18.03.0.ce-1.el7.centos             docker-ce-stable</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo yum install docker-ce-&lt;VERSION STRING&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>尚未启动。该docker组已创建，但没有用户添加到该组。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>从包安装</p>\n<ol>\n<li><p>转到 <a href=\"https://download.docker.com/linux/centos/7/x86_64/stable/Packages/\" target=\"_blank\" rel=\"noopener\">https://download.docker.com/linux/centos/7/x86_64/stable/Packages/</a> 并下载.rpm要安装的Docker版本的文件。</p>\n</li>\n<li><p>安装Docker CE，将下面的路径更改为您下载Docker软件包的路径。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install /path/to/package.rpm</span><br></pre></td></tr></table></figure>\n<p>Docker已安装但尚未启动。该docker组已创建，但没有用户添加到该组。</p>\n</li>\n<li><p>启动Docker。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>docker通过运行hello-world 映像验证是否已正确安装。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo docker run hello-world</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>使用便利脚本安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo sh get-docker.sh</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;output truncated&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">If you would like to use Docker as a non-root user, you should now consider</span><br><span class=\"line\">adding your user to the \"docker\" group with something like:</span><br><span class=\"line\"></span><br><span class=\"line\">  sudo usermod -aG docker your-user</span><br><span class=\"line\"></span><br><span class=\"line\">Remember to log out and back in for this to take effect!</span><br><span class=\"line\"></span><br><span class=\"line\">WARNING: Adding a user to the \"docker\" group grants the ability to run</span><br><span class=\"line\">         containers which can be used to obtain root privileges on the</span><br><span class=\"line\">         docker host.</span><br><span class=\"line\">         Refer to https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface</span><br><span class=\"line\">         for more information.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>卸载Docker CE</p>\n<ul>\n<li><p>卸载Docker包：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo yum remove docker-ce</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>主机上的图像，容器，卷或自定义配置文件不会自动删除。要删除所有图像，容器和卷：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>Docker版本 : </p>\n<ul>\n<li>社区版（CE）:Docker Community Edition（CE）非常适合希望开始使用Docker并尝试使用基于容器的应用程序的个人开发人员和小型团队。</li>\n<li>企业版（EE）: Docker企业版（EE）专为企业开发和IT团队而设计，他们可以在生产中大规模构建，发布和运行业务关键型应用程序。</li>\n</ul>\n</li>\n<li><p>Docker安装方式：</p>\n<p>安装之前需要卸载旧版本 </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo yum remove docker \\</span><br><span class=\"line\">                  docker-client \\</span><br><span class=\"line\">                  docker-client-latest \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-latest \\</span><br><span class=\"line\">                  docker-latest-logrotate \\</span><br><span class=\"line\">                  docker-logrotate \\</span><br><span class=\"line\">                  docker-selinux \\</span><br><span class=\"line\">                  docker-engine-selinux \\</span><br><span class=\"line\">                  docker-engine</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>使用存储库安装</p>\n<ul>\n<li><p>设置存储库</p>\n<ul>\n<li><p>安装所需的包。<code>yum-utils</code>提供了<code>yum-config-manager</code> 效用，并<code>device-mapper-persistent-data</code>和<code>lvm2</code>由需要 <code>devicemapper</code>存储驱动程序。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo yum install -y yum-utils \\</span><br><span class=\"line\">  device-mapper-persistent-data \\</span><br><span class=\"line\">  lvm2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用以下命令设置稳定存储库。即使您还想从边缘或测试存储库安装构建，您始终需要稳定的存储 库。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可选：启用边缘和测试存储库。这些存储库包含在docker.repo上面的文件中，但默认情况下处于禁用状态。您可以将它们与稳定存储库一起启用。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo yum-config-manager --enable docker-ce-edge</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo yum-config-manager --enable docker-ce-test</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>设置存储库</p>\n<ol>\n<li><p>安装最新版本的Docker CE，或转到下一步安装特定版本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo yum install docker-ce</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>要安装特定版本的Docker CE，请列出repo中的可用版本，然后选择并安装：</p>\n<p>一个。列出并对您的仓库中可用的版本进行排序。此示例按版本号对结果进行排序，从最高到最低，并被截断</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> yum list docker-ce --showduplicates | sort -r</span><br><span class=\"line\">docker-ce.x86_64            18.03.0.ce-1.el7.centos             docker-ce-stable</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo yum install docker-ce-&lt;VERSION STRING&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>尚未启动。该docker组已创建，但没有用户添加到该组。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>从包安装</p>\n<ol>\n<li><p>转到 <a href=\"https://download.docker.com/linux/centos/7/x86_64/stable/Packages/\" target=\"_blank\" rel=\"noopener\">https://download.docker.com/linux/centos/7/x86_64/stable/Packages/</a> 并下载.rpm要安装的Docker版本的文件。</p>\n</li>\n<li><p>安装Docker CE，将下面的路径更改为您下载Docker软件包的路径。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo yum install /path/to/package.rpm</span><br></pre></td></tr></table></figure>\n<p>Docker已安装但尚未启动。该docker组已创建，但没有用户添加到该组。</p>\n</li>\n<li><p>启动Docker。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo systemctl start docker</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>docker通过运行hello-world 映像验证是否已正确安装。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo docker run hello-world</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>使用便利脚本安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class=\"line\"><span class=\"meta\">$</span> sudo sh get-docker.sh</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;output truncated&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">If you would like to use Docker as a non-root user, you should now consider</span><br><span class=\"line\">adding your user to the \"docker\" group with something like:</span><br><span class=\"line\"></span><br><span class=\"line\">  sudo usermod -aG docker your-user</span><br><span class=\"line\"></span><br><span class=\"line\">Remember to log out and back in for this to take effect!</span><br><span class=\"line\"></span><br><span class=\"line\">WARNING: Adding a user to the \"docker\" group grants the ability to run</span><br><span class=\"line\">         containers which can be used to obtain root privileges on the</span><br><span class=\"line\">         docker host.</span><br><span class=\"line\">         Refer to https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface</span><br><span class=\"line\">         for more information.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>卸载Docker CE</p>\n<ul>\n<li><p>卸载Docker包：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo yum remove docker-ce</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>主机上的图像，容器，卷或自定义配置文件不会自动删除。要删除所有图像，容器和卷：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n"},{"title":"shadowsocks实现翻墙","date":"2019-01-28T10:49:30.000Z","toc":true,"description":"Linux 下搭建服务器实现翻墙。。。。。。","_content":"\n#### 一、环境介绍：\n\n　　1、服务器：\n\n　　　　CentOS7.0_x86_64\n\n　　2、Windows客户端\n\n　　　　Windows 10\n\n#### 二、安装部署：\n\n  1、安装Shadowsocks服务端：\n\n ```shell\n   # yum update\n   # yum install python-setuptools && easy_install pip\n   # pip install shadowsocks\n ```\n\n 2、配置Shadowsocks：\n\n  此文件默认不存在，需要创建：\n\n ```shell\n # vim /etc/shadowsocks.json\n {\n     \"server\":\"your_server_ip\",\n     \"server_port\":8388,\n     \"password\":\"yourpassword\",\n     \"timeout\":300,\n     \"method\":\"aes-256-cfb\",\n     \"fast_open\":false,\n     \"workers\": 1\n }\n 注：有的简化版centos 不识别 vim 命令，请先安装 vim \n \n \\# yum install vim -y\n \n 上面代码的解释：\n server：服务器 IP地址 (IPv4/IPv6)\n \n server_port：服务器监听的端口，一般设为80，443等，注意不要设为使用中的端口\n \n password：设置密码，自定义\n \n timeout：超时时间（秒）\n \n method：加密方法，可选择 “aes-256-cfb”, “rc4-md5”等等。推荐使用 “rc4-md5”\n \n fast_open：true 或 false。如果你的服务器 Linux 内核在3.7+，可以开启 fast_open 以降低延迟。\n \n workers：workers数量，默认为 1\n 　　\n ```\n\n3、多用户配置\n\n 如要你需要分享SS服务给朋友或家人，可以配置多个SS账户，具体可以参考下面的代码。\n\n ```\n {\n \t\"server\":\"your_server_ip\",\n     \"port_password\":{\n         \"8381\":\"pass1\", \n         \"8382\":\"pass2\",\n         \"8383\":\"pass3\",\n         \"8384\":\"pass4\"\n     },\n     \"timeout\":60,\n     \"method\":\"rc4-md5\",\n     \"fast_open\":false,\n     \"workers\":1\n }\n 注意：json的格式，注意空格和Tab的用法要一致！\n ```\n\n 　4、启动Shadowsocks：\n\n```shell\n# ssserver -c /etc/shadowsocks.json -d start\nINFO: loading config from /etc/shadowsocks.json\n2017-01-10 22:38:12 WARNING  warning: your timeout 60 seems too short\n2017-01-10 22:38:12 INFO     loading libcrypto from libcrypto.so.10\nstarted\n```\n\n```shell\n5、加入开机自启：\n修改下面文件\n# vim  /etc/rc.d/rc.local\n加入下面内容\n/usr/bin/ssserver -c /etc/shadowsocks.json -d start\n保存并推出 vim, CentOS 7正打算抛弃/etc/rc.d/rc.local，重启前需要运行以下命令获得权限，否则rc.local不会执行     \n# chmod +x /etc/rc.d/rc.local\n```\n\n####  三、使用Windows客户端连接测试：\n\n```\n1、下载Shadowsocks客户端：\n2、配置Shadowsocks客户端\n```\n\n![](G:\\编程资料\\日记\\shadowsocks客户端配置.png)\n\n具体信息如下：\n\n```shell\n服务器IP  ：your_server_ip\n服务器端口 ：8381\n密码: pass1\n加密：rc4-md5\n```\n\n```\n3.访问谷歌，看是否成功\n```\n\n   https://www.google.com/\n\n\n\n__推荐一个海外服务器地址：https://www.vultr.com/?ref=7539196 比较好用，适合自己搭建vpn。速度很快。__","source":"_posts/shadowsocks实现翻墙.md","raw":"---\ntitle: shadowsocks实现翻墙\ndate: 2019-01-28 18:49:30\ntags: Linux\ntoc: true\ndescription: Linux 下搭建服务器实现翻墙。。。。。。\n---\n\n#### 一、环境介绍：\n\n　　1、服务器：\n\n　　　　CentOS7.0_x86_64\n\n　　2、Windows客户端\n\n　　　　Windows 10\n\n#### 二、安装部署：\n\n  1、安装Shadowsocks服务端：\n\n ```shell\n   # yum update\n   # yum install python-setuptools && easy_install pip\n   # pip install shadowsocks\n ```\n\n 2、配置Shadowsocks：\n\n  此文件默认不存在，需要创建：\n\n ```shell\n # vim /etc/shadowsocks.json\n {\n     \"server\":\"your_server_ip\",\n     \"server_port\":8388,\n     \"password\":\"yourpassword\",\n     \"timeout\":300,\n     \"method\":\"aes-256-cfb\",\n     \"fast_open\":false,\n     \"workers\": 1\n }\n 注：有的简化版centos 不识别 vim 命令，请先安装 vim \n \n \\# yum install vim -y\n \n 上面代码的解释：\n server：服务器 IP地址 (IPv4/IPv6)\n \n server_port：服务器监听的端口，一般设为80，443等，注意不要设为使用中的端口\n \n password：设置密码，自定义\n \n timeout：超时时间（秒）\n \n method：加密方法，可选择 “aes-256-cfb”, “rc4-md5”等等。推荐使用 “rc4-md5”\n \n fast_open：true 或 false。如果你的服务器 Linux 内核在3.7+，可以开启 fast_open 以降低延迟。\n \n workers：workers数量，默认为 1\n 　　\n ```\n\n3、多用户配置\n\n 如要你需要分享SS服务给朋友或家人，可以配置多个SS账户，具体可以参考下面的代码。\n\n ```\n {\n \t\"server\":\"your_server_ip\",\n     \"port_password\":{\n         \"8381\":\"pass1\", \n         \"8382\":\"pass2\",\n         \"8383\":\"pass3\",\n         \"8384\":\"pass4\"\n     },\n     \"timeout\":60,\n     \"method\":\"rc4-md5\",\n     \"fast_open\":false,\n     \"workers\":1\n }\n 注意：json的格式，注意空格和Tab的用法要一致！\n ```\n\n 　4、启动Shadowsocks：\n\n```shell\n# ssserver -c /etc/shadowsocks.json -d start\nINFO: loading config from /etc/shadowsocks.json\n2017-01-10 22:38:12 WARNING  warning: your timeout 60 seems too short\n2017-01-10 22:38:12 INFO     loading libcrypto from libcrypto.so.10\nstarted\n```\n\n```shell\n5、加入开机自启：\n修改下面文件\n# vim  /etc/rc.d/rc.local\n加入下面内容\n/usr/bin/ssserver -c /etc/shadowsocks.json -d start\n保存并推出 vim, CentOS 7正打算抛弃/etc/rc.d/rc.local，重启前需要运行以下命令获得权限，否则rc.local不会执行     \n# chmod +x /etc/rc.d/rc.local\n```\n\n####  三、使用Windows客户端连接测试：\n\n```\n1、下载Shadowsocks客户端：\n2、配置Shadowsocks客户端\n```\n\n![](G:\\编程资料\\日记\\shadowsocks客户端配置.png)\n\n具体信息如下：\n\n```shell\n服务器IP  ：your_server_ip\n服务器端口 ：8381\n密码: pass1\n加密：rc4-md5\n```\n\n```\n3.访问谷歌，看是否成功\n```\n\n   https://www.google.com/\n\n\n\n__推荐一个海外服务器地址：https://www.vultr.com/?ref=7539196 比较好用，适合自己搭建vpn。速度很快。__","slug":"shadowsocks实现翻墙","published":1,"updated":"2019-02-27T06:33:51.631Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsmu9nmx00094sjqenk9mt82","content":"<h4 id=\"一、环境介绍：\"><a href=\"#一、环境介绍：\" class=\"headerlink\" title=\"一、环境介绍：\"></a>一、环境介绍：</h4><p>　　1、服务器：</p>\n<p>　　　　CentOS7.0_x86_64</p>\n<p>　　2、Windows客户端</p>\n<p>　　　　Windows 10</p>\n<h4 id=\"二、安装部署：\"><a href=\"#二、安装部署：\" class=\"headerlink\" title=\"二、安装部署：\"></a>二、安装部署：</h4><p>  1、安装Shadowsocks服务端：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> yum update</span><br><span class=\"line\"><span class=\"meta\">#</span> yum install python-setuptools &amp;&amp; easy_install pip</span><br><span class=\"line\"><span class=\"meta\">#</span> pip install shadowsocks</span><br></pre></td></tr></table></figure>\n<p> 2、配置Shadowsocks：</p>\n<p>  此文件默认不存在，需要创建：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> vim /etc/shadowsocks.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    \"server\":\"your_server_ip\",</span><br><span class=\"line\">    \"server_port\":8388,</span><br><span class=\"line\">    \"password\":\"yourpassword\",</span><br><span class=\"line\">    \"timeout\":300,</span><br><span class=\"line\">    \"method\":\"aes-256-cfb\",</span><br><span class=\"line\">    \"fast_open\":false,</span><br><span class=\"line\">    \"workers\": 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">注：有的简化版centos 不识别 vim 命令，请先安装 vim </span><br><span class=\"line\"></span><br><span class=\"line\">\\# yum install vim -y</span><br><span class=\"line\"></span><br><span class=\"line\">上面代码的解释：</span><br><span class=\"line\">server：服务器 IP地址 (IPv4/IPv6)</span><br><span class=\"line\"></span><br><span class=\"line\">server_port：服务器监听的端口，一般设为80，443等，注意不要设为使用中的端口</span><br><span class=\"line\"></span><br><span class=\"line\">password：设置密码，自定义</span><br><span class=\"line\"></span><br><span class=\"line\">timeout：超时时间（秒）</span><br><span class=\"line\"></span><br><span class=\"line\">method：加密方法，可选择 “aes-256-cfb”, “rc4-md5”等等。推荐使用 “rc4-md5”</span><br><span class=\"line\"></span><br><span class=\"line\">fast_open：true 或 false。如果你的服务器 Linux 内核在3.7+，可以开启 fast_open 以降低延迟。</span><br><span class=\"line\"></span><br><span class=\"line\">workers：workers数量，默认为 1</span><br></pre></td></tr></table></figure>\n<p>3、多用户配置</p>\n<p> 如要你需要分享SS服务给朋友或家人，可以配置多个SS账户，具体可以参考下面的代码。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;server&quot;:&quot;your_server_ip&quot;,</span><br><span class=\"line\">    &quot;port_password&quot;:&#123;</span><br><span class=\"line\">        &quot;8381&quot;:&quot;pass1&quot;, </span><br><span class=\"line\">        &quot;8382&quot;:&quot;pass2&quot;,</span><br><span class=\"line\">        &quot;8383&quot;:&quot;pass3&quot;,</span><br><span class=\"line\">        &quot;8384&quot;:&quot;pass4&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;timeout&quot;:60,</span><br><span class=\"line\">    &quot;method&quot;:&quot;rc4-md5&quot;,</span><br><span class=\"line\">    &quot;fast_open&quot;:false,</span><br><span class=\"line\">    &quot;workers&quot;:1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">注意：json的格式，注意空格和Tab的用法要一致！</span><br></pre></td></tr></table></figure>\n<p> 　4、启动Shadowsocks：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> ssserver -c /etc/shadowsocks.json -d start</span><br><span class=\"line\">INFO: loading config from /etc/shadowsocks.json</span><br><span class=\"line\">2017-01-10 22:38:12 WARNING  warning: your timeout 60 seems too short</span><br><span class=\"line\">2017-01-10 22:38:12 INFO     loading libcrypto from libcrypto.so.10</span><br><span class=\"line\">started</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5、加入开机自启：</span><br><span class=\"line\">修改下面文件</span><br><span class=\"line\"><span class=\"meta\">#</span> vim  /etc/rc.d/rc.local</span><br><span class=\"line\">加入下面内容</span><br><span class=\"line\">/usr/bin/ssserver -c /etc/shadowsocks.json -d start</span><br><span class=\"line\">保存并推出 vim, CentOS 7正打算抛弃/etc/rc.d/rc.local，重启前需要运行以下命令获得权限，否则rc.local不会执行     </span><br><span class=\"line\"><span class=\"meta\">#</span> chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>\n<h4 id=\"三、使用Windows客户端连接测试：\"><a href=\"#三、使用Windows客户端连接测试：\" class=\"headerlink\" title=\"三、使用Windows客户端连接测试：\"></a>三、使用Windows客户端连接测试：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、下载Shadowsocks客户端：</span><br><span class=\"line\">2、配置Shadowsocks客户端</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/01/28/shadowsocks实现翻墙/G:/编程资料\\日记\\shadowsocks客户端配置.png\" alt=\"\"></p>\n<p>具体信息如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务器IP  ：your_server_ip</span><br><span class=\"line\">服务器端口 ：8381</span><br><span class=\"line\">密码: pass1</span><br><span class=\"line\">加密：rc4-md5</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3.访问谷歌，看是否成功</span><br></pre></td></tr></table></figure>\n<p>   <a href=\"https://www.google.com/\" target=\"_blank\" rel=\"noopener\">https://www.google.com/</a></p>\n<p><strong>推荐一个海外服务器地址：<a href=\"https://www.vultr.com/?ref=7539196\" target=\"_blank\" rel=\"noopener\">https://www.vultr.com/?ref=7539196</a> 比较好用，适合自己搭建vpn。速度很快。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一、环境介绍：\"><a href=\"#一、环境介绍：\" class=\"headerlink\" title=\"一、环境介绍：\"></a>一、环境介绍：</h4><p>　　1、服务器：</p>\n<p>　　　　CentOS7.0_x86_64</p>\n<p>　　2、Windows客户端</p>\n<p>　　　　Windows 10</p>\n<h4 id=\"二、安装部署：\"><a href=\"#二、安装部署：\" class=\"headerlink\" title=\"二、安装部署：\"></a>二、安装部署：</h4><p>  1、安装Shadowsocks服务端：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> yum update</span><br><span class=\"line\"><span class=\"meta\">#</span> yum install python-setuptools &amp;&amp; easy_install pip</span><br><span class=\"line\"><span class=\"meta\">#</span> pip install shadowsocks</span><br></pre></td></tr></table></figure>\n<p> 2、配置Shadowsocks：</p>\n<p>  此文件默认不存在，需要创建：</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> vim /etc/shadowsocks.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    \"server\":\"your_server_ip\",</span><br><span class=\"line\">    \"server_port\":8388,</span><br><span class=\"line\">    \"password\":\"yourpassword\",</span><br><span class=\"line\">    \"timeout\":300,</span><br><span class=\"line\">    \"method\":\"aes-256-cfb\",</span><br><span class=\"line\">    \"fast_open\":false,</span><br><span class=\"line\">    \"workers\": 1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">注：有的简化版centos 不识别 vim 命令，请先安装 vim </span><br><span class=\"line\"></span><br><span class=\"line\">\\# yum install vim -y</span><br><span class=\"line\"></span><br><span class=\"line\">上面代码的解释：</span><br><span class=\"line\">server：服务器 IP地址 (IPv4/IPv6)</span><br><span class=\"line\"></span><br><span class=\"line\">server_port：服务器监听的端口，一般设为80，443等，注意不要设为使用中的端口</span><br><span class=\"line\"></span><br><span class=\"line\">password：设置密码，自定义</span><br><span class=\"line\"></span><br><span class=\"line\">timeout：超时时间（秒）</span><br><span class=\"line\"></span><br><span class=\"line\">method：加密方法，可选择 “aes-256-cfb”, “rc4-md5”等等。推荐使用 “rc4-md5”</span><br><span class=\"line\"></span><br><span class=\"line\">fast_open：true 或 false。如果你的服务器 Linux 内核在3.7+，可以开启 fast_open 以降低延迟。</span><br><span class=\"line\"></span><br><span class=\"line\">workers：workers数量，默认为 1</span><br></pre></td></tr></table></figure>\n<p>3、多用户配置</p>\n<p> 如要你需要分享SS服务给朋友或家人，可以配置多个SS账户，具体可以参考下面的代码。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;server&quot;:&quot;your_server_ip&quot;,</span><br><span class=\"line\">    &quot;port_password&quot;:&#123;</span><br><span class=\"line\">        &quot;8381&quot;:&quot;pass1&quot;, </span><br><span class=\"line\">        &quot;8382&quot;:&quot;pass2&quot;,</span><br><span class=\"line\">        &quot;8383&quot;:&quot;pass3&quot;,</span><br><span class=\"line\">        &quot;8384&quot;:&quot;pass4&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;timeout&quot;:60,</span><br><span class=\"line\">    &quot;method&quot;:&quot;rc4-md5&quot;,</span><br><span class=\"line\">    &quot;fast_open&quot;:false,</span><br><span class=\"line\">    &quot;workers&quot;:1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">注意：json的格式，注意空格和Tab的用法要一致！</span><br></pre></td></tr></table></figure>\n<p> 　4、启动Shadowsocks：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> ssserver -c /etc/shadowsocks.json -d start</span><br><span class=\"line\">INFO: loading config from /etc/shadowsocks.json</span><br><span class=\"line\">2017-01-10 22:38:12 WARNING  warning: your timeout 60 seems too short</span><br><span class=\"line\">2017-01-10 22:38:12 INFO     loading libcrypto from libcrypto.so.10</span><br><span class=\"line\">started</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5、加入开机自启：</span><br><span class=\"line\">修改下面文件</span><br><span class=\"line\"><span class=\"meta\">#</span> vim  /etc/rc.d/rc.local</span><br><span class=\"line\">加入下面内容</span><br><span class=\"line\">/usr/bin/ssserver -c /etc/shadowsocks.json -d start</span><br><span class=\"line\">保存并推出 vim, CentOS 7正打算抛弃/etc/rc.d/rc.local，重启前需要运行以下命令获得权限，否则rc.local不会执行     </span><br><span class=\"line\"><span class=\"meta\">#</span> chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>\n<h4 id=\"三、使用Windows客户端连接测试：\"><a href=\"#三、使用Windows客户端连接测试：\" class=\"headerlink\" title=\"三、使用Windows客户端连接测试：\"></a>三、使用Windows客户端连接测试：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、下载Shadowsocks客户端：</span><br><span class=\"line\">2、配置Shadowsocks客户端</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/01/28/shadowsocks实现翻墙/G:/编程资料\\日记\\shadowsocks客户端配置.png\" alt=\"\"></p>\n<p>具体信息如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">服务器IP  ：your_server_ip</span><br><span class=\"line\">服务器端口 ：8381</span><br><span class=\"line\">密码: pass1</span><br><span class=\"line\">加密：rc4-md5</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3.访问谷歌，看是否成功</span><br></pre></td></tr></table></figure>\n<p>   <a href=\"https://www.google.com/\" target=\"_blank\" rel=\"noopener\">https://www.google.com/</a></p>\n<p><strong>推荐一个海外服务器地址：<a href=\"https://www.vultr.com/?ref=7539196\" target=\"_blank\" rel=\"noopener\">https://www.vultr.com/?ref=7539196</a> 比较好用，适合自己搭建vpn。速度很快。</strong></p>\n"},{"title":"oninstack安装","date":"2018-08-29T11:07:11.000Z","description":"Linux 下搭建oninstack环境","_content":"1. **linux 命令**\n\n   - 修改主机名： vi /etc/hostname\n   - scp wfxAdmin.war root@39.104.48.138:/hnccnet/tomcat/cpsServer/webapps\n   - mv 重命名\n   - cp-r /www /aa 复制文件夹\n   - chown -R www:www  XXX\n   - jar-xvf  xxx.war xxx \n\n2. iptables\n\n   - 关闭iptables service iptables stop  \n   - 查看iptables iptables -nvL  cat/etc/sysconfig/iptables\n   - ptables -I INPUT 4 -p tcp -m state --state NEW -m tcp --dport 3306 -jACCEPT\n   - service iptables save #保存iptables规则\n\n3. nginx.conf 配置\n\n   ```nginx\n   root /data/wwwroot/default;\n   index index.html index.jsp; \n   location / {\n     proxy_pass http://lbbzcy.xin;\n   }\n   ```\n\n4. mysql 命令\n   -  mysql -uroot -p\n   -  source ***.sql\n   -  grant all privileges on 数据库.* to 用户@'%' identified by '密码';#授权语句，特别注意有分号\n   -  flush privileges;\n\n5. tomcat   tomcat  server.xml  vhost/localhost.xml      \n\n\n\n​\t\n\n","source":"_posts/oninstack安装.md","raw":"---\ntitle: oninstack安装\ndate: 2018-08-29 19:07:11\ntags: Linux\ndescription: Linux 下搭建oninstack环境\n---\n1. **linux 命令**\n\n   - 修改主机名： vi /etc/hostname\n   - scp wfxAdmin.war root@39.104.48.138:/hnccnet/tomcat/cpsServer/webapps\n   - mv 重命名\n   - cp-r /www /aa 复制文件夹\n   - chown -R www:www  XXX\n   - jar-xvf  xxx.war xxx \n\n2. iptables\n\n   - 关闭iptables service iptables stop  \n   - 查看iptables iptables -nvL  cat/etc/sysconfig/iptables\n   - ptables -I INPUT 4 -p tcp -m state --state NEW -m tcp --dport 3306 -jACCEPT\n   - service iptables save #保存iptables规则\n\n3. nginx.conf 配置\n\n   ```nginx\n   root /data/wwwroot/default;\n   index index.html index.jsp; \n   location / {\n     proxy_pass http://lbbzcy.xin;\n   }\n   ```\n\n4. mysql 命令\n   -  mysql -uroot -p\n   -  source ***.sql\n   -  grant all privileges on 数据库.* to 用户@'%' identified by '密码';#授权语句，特别注意有分号\n   -  flush privileges;\n\n5. tomcat   tomcat  server.xml  vhost/localhost.xml      \n\n\n\n​\t\n\n","slug":"oninstack安装","published":1,"updated":"2019-01-29T02:17:28.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsmu9nn0000b4sjqz9o2t71e","content":"<ol>\n<li><p><strong>linux 命令</strong></p>\n<ul>\n<li>修改主机名： vi /etc/hostname</li>\n<li>scp wfxAdmin.war <a href=\"mailto:root@39.104.48.138\" target=\"_blank\" rel=\"noopener\">root@39.104.48.138</a>:/hnccnet/tomcat/cpsServer/webapps</li>\n<li>mv 重命名</li>\n<li>cp-r /www /aa 复制文件夹</li>\n<li>chown -R www:www  XXX</li>\n<li>jar-xvf  xxx.war xxx </li>\n</ul>\n</li>\n<li><p>iptables</p>\n<ul>\n<li>关闭iptables service iptables stop  </li>\n<li>查看iptables iptables -nvL  cat/etc/sysconfig/iptables</li>\n<li>ptables -I INPUT 4 -p tcp -m state –state NEW -m tcp –dport 3306 -jACCEPT</li>\n<li>service iptables save #保存iptables规则</li>\n</ul>\n</li>\n<li><p>nginx.conf 配置</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">root</span> /data/wwwroot/default;</span><br><span class=\"line\"><span class=\"attribute\">index</span> index.html index.jsp; </span><br><span class=\"line\"><span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">  <span class=\"attribute\">proxy_pass</span> http://lbbzcy.xin;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>mysql 命令</p>\n<ul>\n<li>mysql -uroot -p</li>\n<li>source ***.sql</li>\n<li>grant all privileges on 数据库.* to 用户@’%’ identified by ‘密码’;#授权语句，特别注意有分号</li>\n<li>flush privileges;</li>\n</ul>\n</li>\n<li><p>tomcat   tomcat  server.xml  vhost/localhost.xml      </p>\n</li>\n</ol>\n<p>​    </p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p><strong>linux 命令</strong></p>\n<ul>\n<li>修改主机名： vi /etc/hostname</li>\n<li>scp wfxAdmin.war <a href=\"mailto:root@39.104.48.138\" target=\"_blank\" rel=\"noopener\">root@39.104.48.138</a>:/hnccnet/tomcat/cpsServer/webapps</li>\n<li>mv 重命名</li>\n<li>cp-r /www /aa 复制文件夹</li>\n<li>chown -R www:www  XXX</li>\n<li>jar-xvf  xxx.war xxx </li>\n</ul>\n</li>\n<li><p>iptables</p>\n<ul>\n<li>关闭iptables service iptables stop  </li>\n<li>查看iptables iptables -nvL  cat/etc/sysconfig/iptables</li>\n<li>ptables -I INPUT 4 -p tcp -m state –state NEW -m tcp –dport 3306 -jACCEPT</li>\n<li>service iptables save #保存iptables规则</li>\n</ul>\n</li>\n<li><p>nginx.conf 配置</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">root</span> /data/wwwroot/default;</span><br><span class=\"line\"><span class=\"attribute\">index</span> index.html index.jsp; </span><br><span class=\"line\"><span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">  <span class=\"attribute\">proxy_pass</span> http://lbbzcy.xin;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>mysql 命令</p>\n<ul>\n<li>mysql -uroot -p</li>\n<li>source ***.sql</li>\n<li>grant all privileges on 数据库.* to 用户@’%’ identified by ‘密码’;#授权语句，特别注意有分号</li>\n<li>flush privileges;</li>\n</ul>\n</li>\n<li><p>tomcat   tomcat  server.xml  vhost/localhost.xml      </p>\n</li>\n</ol>\n<p>​    </p>\n"},{"title":"如何优雅的设计和使用缓存","date":"2019-02-15T03:14:03.000Z","description":null,"_content":"\n# 1.确认是否需要缓存\n\n在使用缓存之前，需要确认你的项目是否真的需要缓存。使用缓存会引入的一定的技术复杂度，后文也将会一一介绍这些复杂度。一般来说从两个方面来个是否需要使用缓存:\n\n1. CPU占用:如果你有某些应用需要消耗大量的cpu去计算，比如正则表达式，如果你使用正则表达式比较频繁，而其又占用了很多CPU的话，那你就应该使用缓存将正则表达式的结果给缓存下来。\n2. 数据库IO占用:如果你发现你的数据库连接池比较空闲，那么不应该用缓存。但是如果数据库连接池比较繁忙，甚至经常报出连接不够的报警，那么是时候应该考虑缓存了。笔者曾经有个服务，被很多其他服务调用，其他时间都还好，但是在每天早上10点的时候总是会报出数据库连接池连接不够的报警，经过排查，发现有几个服务选择了在10点做定时任务，大量的请求打过来，DB连接池不够，从而报出连接池不够的报警。这个时候有几个选择，我们可以通过扩容机器来解决，也可以通过增加数据库连接池来解决，但是没有必要增加这些成本，因为只有在10点的时候才会出现这个问题。后来引入了缓存，不仅解决了这个问题，而且还增加了读的性能。\n\n如果并没有上述两个问题，那么你不必为了增加缓存而缓存。\n\n# 2.选择合适的缓存\n\n缓存又分进程内缓存和分布式缓存两种。很多人包括笔者在开始选缓存框架的时候都感到了困惑:网上的缓存太多了，大家都吹嘘自己很牛逼，我该怎么选择呢？\n\n## 2.1 选择合适的进程缓存\n\n首先看看几个比较常用的缓存的比较，具体原理可以参考[你应该知道的缓存进化史](https://juejin.im/post/5b7593496fb9a009b62904fa#comment):\n\n| 比较项       | ConcurrentHashMap | LRUMap                  | Ehcache                       | Guava Cache                       | Caffeine              |\n| ------------ | ----------------- | ----------------------- | ----------------------------- | --------------------------------- | --------------------- |\n| 读写性能     | 很好，分段锁      | 一般，全局加锁          | 好                            | 好，需要做淘汰操作                | 很好                  |\n| 淘汰算法     | 无                | LRU，一般               | 支持多种淘汰算法,LRU,LFU,FIFO | LRU，一般                         | W-TinyLFU, 很好       |\n| 功能丰富程度 | 功能比较简单      | 功能比较单一            | 功能很丰富                    | 功能很丰富，支持刷新和虚引用等    | 功能和Guava Cache类似 |\n| 工具大小     | jdk自带类，很小   | 基于LinkedHashMap，较小 | 很大，最新版本1.4MB           | 是Guava工具类中的一个小部分，较小 | 一般，最新版本644KB   |\n| 是否持久化   | 否                | 否                      | 是                            | 否                                | 否                    |\n| 是否支持集群 | 否                | 否                      | 是                            | 否                                | 否                    |\n\n- 对于ConcurrentHashMap来说，比较适合缓存比较固定不变的元素，且缓存的数量较小的。虽然从上面表格中比起来有点逊色，但是其由于是jdk自带的类，在各种框架中依然有大量的使用,比如我们可以用来缓存我们反射的Method,Field等等;也可以缓存一些链接，防止其重复建立。在Caffeine中也是使用的ConcurrentHashMap来存储元素。\n- 对于LRUMap来说，如果不想引入第三方包，又想使用淘汰算法淘汰数据，可以使用这个。\n- 对于Ehcache来说，由于其jar包很大，较重量级。对于需要持久化和集群的一些功能的，可以选择Ehcache。笔者没怎么使用过这个缓存，如果要选择的话，可以选择分布式缓存来替代Ehcache。\n- 对于Guava Cache来说，Guava这个jar包在很多Java应用程序中都有大量的引入，所以很多时候其实是直接用就好了，并且其本身是轻量级的而且功能较为丰富，在不了解Caffeine的情况下可以选择Guava Cache。\n- 对于Caffeine来说，笔者是非常推荐的，其在命中率，读写性能上都比Guava Cache好很多，并且其API和Guava cache基本一致，甚至会多一点。在真实环境中使用Caffeine，取得过不错的效果。\n\n总结一下:如果不需要淘汰算法则选择ConcurrentHashMap，如果需要淘汰算法和一些丰富的API，这里推荐选择Caffeine。\n\n## 2.2 选择合适的分布式缓存\n\n这里选取三个比较出名的分布式缓存来作为比较，MemCache(没有实战使用过)，Redis(在美团又叫Squirrel)，Tair(在美团又叫Cellar)。不同的分布式缓存功能特性和实现原理方面有很大的差异，因此他们所适应的场景也有所不同。\n\n| 比较项   | MemCache                     | Squirrel/Redis                        | Cellar/Tair                                            |\n| -------- | ---------------------------- | ------------------------------------- | ------------------------------------------------------ |\n| 数据结构 | 只支持简单的Key-Value结构    | String,Hash, List, Set, Sorted Set    | String,HashMap, List，Set                              |\n| 持久化   | 不支持                       | 支持                                  | 支持                                                   |\n| 容量大小 | 数据纯内存，数据存储不宜过多 | 数据全内存，资源成本考量不宜超过100GB | 可以配置全内存或内存+磁盘引擎，数据容量可无限扩充      |\n| 读写性能 | 很高                         | 很高(RT0.5ms左右)                     | String类型比较高(RT1ms左右)，复杂类型比较慢(RT5ms左右) |\n\n- MemCache：这一块接触得比较少，不做过多的推荐。其吞吐量较大，但是支持的数据结构较少，并且不支持持久化。\n- Redis:支持丰富的数据结构，读写性能很高，但是数据全内存，必须要考虑资源成本，支持持久化。\n- Tair: 支持丰富的数据结构，读写性能较高，部分类型比较慢，理论上容量可以无限扩充。\n\n总结:如果服务对延迟比较敏感，Map/Set数据也比较多的话，比较适合Redis。如果服务需要放入缓存量的数据很大，对延迟又不是特别敏感的话，那就可以选择Tair。在美团的很多应用中对Tair都有应用，在笔者的项目中使用其存放我们生成的支付token,支付码，用来替代数据库存储。大部分的情况下两者都可以选择，互为替代。\n\n# 3.多级缓存\n\n很多人一想到缓存马上脑子里面就会出现下面的图:\n![](如何优雅的设计和使用缓存/1550200994217.png)\nRedis用来存储热点数据，Redis中没有的数据则直接去数据库访问。\n\n在之前介绍本地缓存的时候，很多人都问我，我已经有Redis了，我干嘛还需要了解Guava，Caffeine这些进程缓存呢。我基本统一回复下面两个答案:\n\n1. Redis如果挂了或者使用老版本的Redis,其会进行全量同步，此时Redis是不可用的，这个时候我们只能访问数据库，很容易造成雪崩。\n2. 访问Redis会有一定的网络I/O以及序列化反序列化，虽然性能很高但是其终究没有本地方法快，可以将最热的数据存放在本地，以便进一步加快访问速度。这个思路并不是我们做互联网架构独有的，在计算机系统中使用L1,L2,L3多级缓存，用来减少对内存的直接访问，从而加快访问速度。\n\n![](如何优雅的设计和使用缓存/1550201017361.png)\n\n所以如果仅仅是使用Redis，能满足我们大部分需求，但是当需要追求更高的性能以及更高的可用性的时候，那就不得不了解多级缓存。\n\n## 3.1使用进程缓存\n\n对于进程内缓存，其本来受限于内存的大小的限制，以及进程缓存更新后其他缓存无法得知，所以一般来说进程缓存适用于:\n\n1. 数据量不是很大，数据更新频率较低，之前我们有个查询商家名字的服务，在发送短信的时候需要调用，由于商家名字变更频率较低，并且就算是变更了没有及时变更缓存，短信里面带有老的商家名字客户也能接受。利用Caffeine作为本地缓存,size设置为1万，过期时间设置为1个小时，基本能在高峰期解决问题。\n2. 如果数据量更新频繁，也想使用进程缓存的话，那么可以将其过期时间设置为较短，或者设置其较短的自动刷新的时间。这些对于Caffeine或者Guava Cache来说都是现成的API。\n\n## 3.2使用多级缓存\n\n> 俗话说得好，世界上没有什么是一个缓存解决不了的事，如果有，那就两个。\n\n一般来说我们选择一个进程缓存和一个分布式缓存来搭配做多级缓存，一般来说引入两个也足够了，如果使用三个，四个的话，技术维护成本会很高，反而有可能会得不偿失，如下图所示: \n\n![](如何优雅的设计和使用缓存/1550201060498.png)\n\n利用Caffeine做一级缓存，Redis作为二级缓存。\n\n1. 首先去Caffeine中查询数据，如果有直接返回。如果没有则进行第2步。\n2. 再去Redis中查询，如果查询到了返回数据并在Caffeine中填充此数据。如果没有查到则进行第3步。\n3. 最后去Mysql中查询，如果查询到了返回数据并在Redis，Caffeine中依次填充此数据。\n\n对于Caffeine的缓存，如果有数据更新，只能删除更新数据的那台机器上的缓存，其他机器只能通过超时来过期缓存，超时设定可以有两种策略:\n\n- 设置成写入后多少时间后过期\n- 设置成写入后多少时间刷新\n\n对于Redis的缓存更新，其他机器立马可见，但是也必须要设置超时时间，其时间比Caffeine的过期长。\n\n为了解决进程内缓存的问题，设计进一步优化:\n\n![](如何优雅的设计和使用缓存/1550201074569.png)\n\n 通过Redis的pub/sub，可以通知其他进程缓存对此缓存进行删除。如果Redis挂了或者订阅机制不靠谱，依靠超时设定，依然可以做兜底处理。\n\n\n\n# 4.缓存更新\n\n一般来说缓存的更新有两种情况:\n\n- 先删除缓存，再更新数据库。\n- 先更新数据库，再删除缓存。 这两种情况在业界，大家对其都有自己的看法。具体怎么使用还得看各自的取舍。当然肯定会有人问为什么要删除缓存呢？而不是更新缓存呢？你可以想想当有多个并发的请求更新数据，你并不能保证更新数据库的顺序和更新缓存的顺序一致，那就会出现数据库中和缓存中数据不一致的情况。所以一般来说考虑删除缓存。\n\n## 4.1先删除缓存，再更新数据库\n\n对于一个更新操作简单来说，就是先去各级缓存进行删除，然后更新数据库。这个操作有一个比较大的问题，在对缓存删除完之后，有一个读请求，这个时候由于缓存被删除所以直接会读库，读操作的数据是老的并且会被加载进入缓存当中，后续读请求全部访问的老数据。\n\n![](如何优雅的设计和使用缓存/1550201097208.png)\n\n对缓存的操作不论成功失败都不能阻塞我们对数据库的操作，那么很多时候删除缓存可以用异步的操作，但是先删除缓存不能很好的适用于这个场景。\n\n先删除缓存也有一个好处是，如果对数据库操作失败了，那么由于先删除的缓存，最多只是造成Cache Miss。\n\n## 4.2先更新数据库，再删除缓存(推荐)\n\n如果我们使用更新数据库，再删除缓存就能避免上面的问题。但是同样的引入了新的问题,试想一下有一个数据此时是没有缓存的，所以查询请求会直接落库，更新操作在查询请求之后，但是更新操作删除数据库操作在查询完之后回填缓存之前，就会导致我们缓存中和数据库出现缓存不一致。\n\n为什么我们这种情况有问题，很多公司包括Facebook还会选择呢？因为要触发这个条件比较苛刻。\n\n1. 首先需要数据不在缓存中。\n2. 其次查询操作需要在更新操作先到达数据库。\n3. 最后查询操作的回填比更新操作的删除后触发，这个条件基本很难出现，因为更新操作的本来在查询操作之后，一般来说更新操作比查询操作稍慢。但是更新操作的删除却在查询操作之后，所以这个情况比较少出现。\n\n对比上面4.1的问题来说这种问题的概率很低，况且我们有超时机制保底所以基本能满足我们的需求。如果真的需要追求完美，可以使用二阶段提交，但是其成本和收益一般来说不成正比。\n\n当然还有个问题是如果我们删除失败了，缓存的数据就会和数据库的数据不一致，那么我们就只能靠过期超时来进行兜底。对此我们可以进行优化，如果删除失败的话 我们不能影响主流程那么我们可以将其放入队列后续进行异步删除。\n\n# 5.缓存挖坑三剑客\n\n大家一听到缓存有哪些注意事项，肯定首先想到的是缓存穿透，缓存击穿，缓存雪崩这三个挖坑的小能手，这里简单介绍一下他们具体是什么以及应对的方法。\n\n## 5.1缓存穿透\n\n缓存穿透是指查询的数据在数据库是没有的，那么在缓存中自然也没有，所以，在缓存中查不到就会去数据库取查询，这样的请求一多，那么我们的数据库的压力自然会增大。\n\n为了避免这个问题，可以采取下面两个手段:\n\n1. 约定:对于返回为NULL的依然缓存，对于抛出异常的返回不进行缓存,注意不要把抛异常的也给缓存了。采用这种手段的会增加我们缓存的维护成本，需要在插入缓存的时候删除这个空缓存，当然我们可以通过设置较短的超时时间来解决这个问题。\n2. \n\n![](如何优雅的设计和使用缓存/1550201125950.png)\n\n 2. 制定一些规则过滤一些不可能存在的数据，小数据用BitMap，大数据可以用布隆过滤器，比如你的订单ID 明显是在一个范围1-1000，如果不是1-1000之内的数据那其实可以直接给过滤掉。\n\n![](如何优雅的设计和使用缓存/1550201151740.png)\n\n## 5.2缓存击穿\n\n对于某些key设置了过期时间，但是其是热点数据，如果某个key失效，可能大量的请求打过来，缓存未命中，然后去数据库访问，此时数据库访问量会急剧增加。\n\n为了避免这个问题，我们可以采取下面的两个手段:\n\n1. 加分布式锁:加载数据的时候可以利用分布式锁锁住这个数据的Key,在Redis中直接使用setNX操作即可，对于获取到这个锁的线程，查询数据库更新缓存，其他线程采取重试策略，这样数据库不会同时受到很多线程访问同一条数据。\n2. 异步加载:由于缓存击穿是热点数据才会出现的问题，可以对这部分热点数据采取到期自动刷新的策略，而不是到期自动淘汰。淘汰其实也是为了数据的时效性，所以采用自动刷新也可以。\n\n## 5.3缓存雪崩\n\n缓存雪崩是指缓存不可用或者大量缓存由于超时时间相同在同一时间段失效，大量请求直接访问数据库，数据库压力过大导致系统雪崩。\n\n为了避免这个问题，我们采取下面的手段:\n\n1. 增加缓存系统可用性,通过监控关注缓存的健康程度，根据业务量适当的扩容缓存。\n2. 采用多级缓存，不同级别缓存设置的超时时间不同，及时某个级别缓存都过期，也有其他级别缓存兜底。\n3. 缓存的过期时间可以取个随机值，比如以前是设置10分钟的超时时间，那每个Key都可以随机8-13分钟过期，尽量让不同Key的过期时间不同。\n\n# 6.缓存污染\n\n缓存污染一般出现在我们使用本地缓存中，可以想象，在本地缓存中如果你获得了缓存，但是你接下来修改了这个数据，但是这个数据并没有更新在数据库，这样就造成了缓存污染:\n\n![](如何优雅的设计和使用缓存/1550201180147.png)\n\n 上面的代码就造成了缓存污染，通过id获取Customer，但是需求需要修改Customer的名字，所以开发人员直接在取出来的对象中直接修改，这个Customer对象就会被污染，其他线程取出这个数据就是错误的数据。\n\n\n\n要想避免这个问题需要开发人员从编码上注意，并且代码必须经过严格的review，以及全方位的回归测试，才能从一定程度上解决这个问题。\n\n# 7.序列化\n\n序列化是很多人都不注意的一个问题，很多人忽略了序列化的问题，上线之后马上报出一下奇怪的错误异常，造成了不必要的损失，最后一排查都是序列化的问题。列举几个序列化常见的问题:\n\n1. key-value对象过于复杂导致序列化不支持:笔者之前出过一个问题，在美团的Tair内部默认是使用protostuff进行序列化，而美团使用的通讯框架是thfift，thrift的TO是自动生成的，这个TO里面很多复杂的数据结构，但是将其存放到了Tair中。查询的时候反序列化也没有报错，单测也通过，但是到qa测试的时候发现这一块功能有问题，发现有个字段是boolean类型默认是false，把它改成true之后，序列化到tair中再反序列化还是false。定位到是protostuff对于复杂结构的对象(比如数组，List等等)支持不是很好，会造成一定的问题。后来对这个TO进行了转换，用普通的Java对象就能进行正确的序列化反序列化。\n2. 添加了字段或者删除了字段，导致上线之后老的缓存获取的时候反序列化报错，或者出现一些数据移位。\n3. 不同的JVM的序列化不同，如果你的缓存有不同的服务都在共同使用(不提倡)，那么需要注意不同JVM可能会对Class内部的Field排序不同，而影响序列化。比如下面的代码，在Jdk7和Jdk8中对象A的排列顺序不同，最终会导致反序列化结果出现问题:\n\n```java\n//jdk 7\nclass A{\n    int a;\n    int b;\n}\n//jdk 8\nclass A{\n    int b;\n    int a;\n}\n```\n\n序列化的问题必须得到重视，解决的办法有如下几点:\n\n1. 测试:对于序列化需要进行全面的测试，如果有不同的服务并且他们的JVM不同那么你也需要做这一块的测试，在上面的问题中笔者的单测通过的原因是用的默认数据false，所以根本没有测试true的情况，还好QA给力，将其给测试出来了。\n2. 对于不同的序列化框架都有自己不同的原理，对于添加字段之后如果当前序列化框架不能兼容老的，那么可以换个序列化框架。 对于protostuff来说他是按照Field的顺序来进行反序列化的，对于添加字段我们需要放到末尾，也就是不能插在中间，否则会出现错误。对于删除字段来说，用@Deprecated注解进行标注弃用，如果贸然删除，除非是最后一个字段，否则肯定会出现序列化异常。\n3. 可以使用双写来避免，对于每个缓存的key值可以加上版本号，每次上线版本号都加1，比如现在线上的缓存用的是Key_1，即将要上线的是Key_2,上线之后对缓存的添加是会写新老两个不同的版本(Key_1,Key_2)的Key-Value，读取数据还是读取老版本Key_1的数据,假设之前的缓存的过期时间是半个小时，那么上线半个小时之后，之前的老缓存存量的数据都会被淘汰，此时线上老缓存和新缓存他们的数据基本是一样的,切换读操作到新缓存，然后停止双写。采用这种方法基本能平滑过渡新老Model交替，但是不好的点就是需要短暂的维护两套新老Model，下次上线的时候需要删除掉老Model，增加了维护成本。\n\n# 8. GC调优\n\n对于大量使用本地缓存的应用，由于涉及到缓存淘汰，那么GC问题必定是常事。如果出现GC较多，STW时间较长，那么必定会影响服务可用性。这一块给出下面几点建议:\n\n1. 经常查看GC监控，如何发现不正常，需要想办法对其进行优化。\n2. 对于CMS垃圾收集器，如果发现remark过长，如果是大量本地缓存应用的话这个过长应该很正常，因为在并发阶段很容易有很多新对象进入缓存，从而remark阶段扫描很耗时，remark又会暂停。可以开启-XX:CMSScavengeBeforeRemark，在remark阶段前进行一次YGC，从而减少remark阶段扫描gc root的开销。\n3. 可以使用G1垃圾收集器，通过-XX:MaxGCPauseMillis设置最大停顿时间，提高服务可用性。\n\n# 9. 缓存的监控\n\n很多人对于缓存的监控也比较忽略，基本上线之后如果不报错然后就默认他就生效了。但是存在这个问题，很多人由于经验不足，有可能设置了不恰当的过期时间，或者不恰当的缓存大小导致缓存命中率不高，让缓存就成为了代码中的一个装饰品。所以对于缓存各种指标的监控，也比较重要，通过其不同的指标数据，我们可以对缓存的参数进行优化，从而让缓存达到最优化:\n\n![](如何优雅的设计和使用缓存/1550201212401.png)\n\n上面的代码中用来记录get操作的，通过Cat记录了获取缓存成功，缓存不存在，缓存过期，缓存失败(获取缓存时如果抛出异常，则叫失败)，通过这些指标，我们就能统计出命中率，我们调整过期时间和大小的时候就可以参考这些指标进行优化。\n\n转载自 https://juejin.im/post/5b849878e51d4538c77a974a\n\n","source":"_posts/如何优雅的设计和使用缓存.md","raw":"---\ntitle: 如何优雅的设计和使用缓存\ndate: 2019-02-15 11:14:03\ntags:\ndescription:\n---\n\n# 1.确认是否需要缓存\n\n在使用缓存之前，需要确认你的项目是否真的需要缓存。使用缓存会引入的一定的技术复杂度，后文也将会一一介绍这些复杂度。一般来说从两个方面来个是否需要使用缓存:\n\n1. CPU占用:如果你有某些应用需要消耗大量的cpu去计算，比如正则表达式，如果你使用正则表达式比较频繁，而其又占用了很多CPU的话，那你就应该使用缓存将正则表达式的结果给缓存下来。\n2. 数据库IO占用:如果你发现你的数据库连接池比较空闲，那么不应该用缓存。但是如果数据库连接池比较繁忙，甚至经常报出连接不够的报警，那么是时候应该考虑缓存了。笔者曾经有个服务，被很多其他服务调用，其他时间都还好，但是在每天早上10点的时候总是会报出数据库连接池连接不够的报警，经过排查，发现有几个服务选择了在10点做定时任务，大量的请求打过来，DB连接池不够，从而报出连接池不够的报警。这个时候有几个选择，我们可以通过扩容机器来解决，也可以通过增加数据库连接池来解决，但是没有必要增加这些成本，因为只有在10点的时候才会出现这个问题。后来引入了缓存，不仅解决了这个问题，而且还增加了读的性能。\n\n如果并没有上述两个问题，那么你不必为了增加缓存而缓存。\n\n# 2.选择合适的缓存\n\n缓存又分进程内缓存和分布式缓存两种。很多人包括笔者在开始选缓存框架的时候都感到了困惑:网上的缓存太多了，大家都吹嘘自己很牛逼，我该怎么选择呢？\n\n## 2.1 选择合适的进程缓存\n\n首先看看几个比较常用的缓存的比较，具体原理可以参考[你应该知道的缓存进化史](https://juejin.im/post/5b7593496fb9a009b62904fa#comment):\n\n| 比较项       | ConcurrentHashMap | LRUMap                  | Ehcache                       | Guava Cache                       | Caffeine              |\n| ------------ | ----------------- | ----------------------- | ----------------------------- | --------------------------------- | --------------------- |\n| 读写性能     | 很好，分段锁      | 一般，全局加锁          | 好                            | 好，需要做淘汰操作                | 很好                  |\n| 淘汰算法     | 无                | LRU，一般               | 支持多种淘汰算法,LRU,LFU,FIFO | LRU，一般                         | W-TinyLFU, 很好       |\n| 功能丰富程度 | 功能比较简单      | 功能比较单一            | 功能很丰富                    | 功能很丰富，支持刷新和虚引用等    | 功能和Guava Cache类似 |\n| 工具大小     | jdk自带类，很小   | 基于LinkedHashMap，较小 | 很大，最新版本1.4MB           | 是Guava工具类中的一个小部分，较小 | 一般，最新版本644KB   |\n| 是否持久化   | 否                | 否                      | 是                            | 否                                | 否                    |\n| 是否支持集群 | 否                | 否                      | 是                            | 否                                | 否                    |\n\n- 对于ConcurrentHashMap来说，比较适合缓存比较固定不变的元素，且缓存的数量较小的。虽然从上面表格中比起来有点逊色，但是其由于是jdk自带的类，在各种框架中依然有大量的使用,比如我们可以用来缓存我们反射的Method,Field等等;也可以缓存一些链接，防止其重复建立。在Caffeine中也是使用的ConcurrentHashMap来存储元素。\n- 对于LRUMap来说，如果不想引入第三方包，又想使用淘汰算法淘汰数据，可以使用这个。\n- 对于Ehcache来说，由于其jar包很大，较重量级。对于需要持久化和集群的一些功能的，可以选择Ehcache。笔者没怎么使用过这个缓存，如果要选择的话，可以选择分布式缓存来替代Ehcache。\n- 对于Guava Cache来说，Guava这个jar包在很多Java应用程序中都有大量的引入，所以很多时候其实是直接用就好了，并且其本身是轻量级的而且功能较为丰富，在不了解Caffeine的情况下可以选择Guava Cache。\n- 对于Caffeine来说，笔者是非常推荐的，其在命中率，读写性能上都比Guava Cache好很多，并且其API和Guava cache基本一致，甚至会多一点。在真实环境中使用Caffeine，取得过不错的效果。\n\n总结一下:如果不需要淘汰算法则选择ConcurrentHashMap，如果需要淘汰算法和一些丰富的API，这里推荐选择Caffeine。\n\n## 2.2 选择合适的分布式缓存\n\n这里选取三个比较出名的分布式缓存来作为比较，MemCache(没有实战使用过)，Redis(在美团又叫Squirrel)，Tair(在美团又叫Cellar)。不同的分布式缓存功能特性和实现原理方面有很大的差异，因此他们所适应的场景也有所不同。\n\n| 比较项   | MemCache                     | Squirrel/Redis                        | Cellar/Tair                                            |\n| -------- | ---------------------------- | ------------------------------------- | ------------------------------------------------------ |\n| 数据结构 | 只支持简单的Key-Value结构    | String,Hash, List, Set, Sorted Set    | String,HashMap, List，Set                              |\n| 持久化   | 不支持                       | 支持                                  | 支持                                                   |\n| 容量大小 | 数据纯内存，数据存储不宜过多 | 数据全内存，资源成本考量不宜超过100GB | 可以配置全内存或内存+磁盘引擎，数据容量可无限扩充      |\n| 读写性能 | 很高                         | 很高(RT0.5ms左右)                     | String类型比较高(RT1ms左右)，复杂类型比较慢(RT5ms左右) |\n\n- MemCache：这一块接触得比较少，不做过多的推荐。其吞吐量较大，但是支持的数据结构较少，并且不支持持久化。\n- Redis:支持丰富的数据结构，读写性能很高，但是数据全内存，必须要考虑资源成本，支持持久化。\n- Tair: 支持丰富的数据结构，读写性能较高，部分类型比较慢，理论上容量可以无限扩充。\n\n总结:如果服务对延迟比较敏感，Map/Set数据也比较多的话，比较适合Redis。如果服务需要放入缓存量的数据很大，对延迟又不是特别敏感的话，那就可以选择Tair。在美团的很多应用中对Tair都有应用，在笔者的项目中使用其存放我们生成的支付token,支付码，用来替代数据库存储。大部分的情况下两者都可以选择，互为替代。\n\n# 3.多级缓存\n\n很多人一想到缓存马上脑子里面就会出现下面的图:\n![](如何优雅的设计和使用缓存/1550200994217.png)\nRedis用来存储热点数据，Redis中没有的数据则直接去数据库访问。\n\n在之前介绍本地缓存的时候，很多人都问我，我已经有Redis了，我干嘛还需要了解Guava，Caffeine这些进程缓存呢。我基本统一回复下面两个答案:\n\n1. Redis如果挂了或者使用老版本的Redis,其会进行全量同步，此时Redis是不可用的，这个时候我们只能访问数据库，很容易造成雪崩。\n2. 访问Redis会有一定的网络I/O以及序列化反序列化，虽然性能很高但是其终究没有本地方法快，可以将最热的数据存放在本地，以便进一步加快访问速度。这个思路并不是我们做互联网架构独有的，在计算机系统中使用L1,L2,L3多级缓存，用来减少对内存的直接访问，从而加快访问速度。\n\n![](如何优雅的设计和使用缓存/1550201017361.png)\n\n所以如果仅仅是使用Redis，能满足我们大部分需求，但是当需要追求更高的性能以及更高的可用性的时候，那就不得不了解多级缓存。\n\n## 3.1使用进程缓存\n\n对于进程内缓存，其本来受限于内存的大小的限制，以及进程缓存更新后其他缓存无法得知，所以一般来说进程缓存适用于:\n\n1. 数据量不是很大，数据更新频率较低，之前我们有个查询商家名字的服务，在发送短信的时候需要调用，由于商家名字变更频率较低，并且就算是变更了没有及时变更缓存，短信里面带有老的商家名字客户也能接受。利用Caffeine作为本地缓存,size设置为1万，过期时间设置为1个小时，基本能在高峰期解决问题。\n2. 如果数据量更新频繁，也想使用进程缓存的话，那么可以将其过期时间设置为较短，或者设置其较短的自动刷新的时间。这些对于Caffeine或者Guava Cache来说都是现成的API。\n\n## 3.2使用多级缓存\n\n> 俗话说得好，世界上没有什么是一个缓存解决不了的事，如果有，那就两个。\n\n一般来说我们选择一个进程缓存和一个分布式缓存来搭配做多级缓存，一般来说引入两个也足够了，如果使用三个，四个的话，技术维护成本会很高，反而有可能会得不偿失，如下图所示: \n\n![](如何优雅的设计和使用缓存/1550201060498.png)\n\n利用Caffeine做一级缓存，Redis作为二级缓存。\n\n1. 首先去Caffeine中查询数据，如果有直接返回。如果没有则进行第2步。\n2. 再去Redis中查询，如果查询到了返回数据并在Caffeine中填充此数据。如果没有查到则进行第3步。\n3. 最后去Mysql中查询，如果查询到了返回数据并在Redis，Caffeine中依次填充此数据。\n\n对于Caffeine的缓存，如果有数据更新，只能删除更新数据的那台机器上的缓存，其他机器只能通过超时来过期缓存，超时设定可以有两种策略:\n\n- 设置成写入后多少时间后过期\n- 设置成写入后多少时间刷新\n\n对于Redis的缓存更新，其他机器立马可见，但是也必须要设置超时时间，其时间比Caffeine的过期长。\n\n为了解决进程内缓存的问题，设计进一步优化:\n\n![](如何优雅的设计和使用缓存/1550201074569.png)\n\n 通过Redis的pub/sub，可以通知其他进程缓存对此缓存进行删除。如果Redis挂了或者订阅机制不靠谱，依靠超时设定，依然可以做兜底处理。\n\n\n\n# 4.缓存更新\n\n一般来说缓存的更新有两种情况:\n\n- 先删除缓存，再更新数据库。\n- 先更新数据库，再删除缓存。 这两种情况在业界，大家对其都有自己的看法。具体怎么使用还得看各自的取舍。当然肯定会有人问为什么要删除缓存呢？而不是更新缓存呢？你可以想想当有多个并发的请求更新数据，你并不能保证更新数据库的顺序和更新缓存的顺序一致，那就会出现数据库中和缓存中数据不一致的情况。所以一般来说考虑删除缓存。\n\n## 4.1先删除缓存，再更新数据库\n\n对于一个更新操作简单来说，就是先去各级缓存进行删除，然后更新数据库。这个操作有一个比较大的问题，在对缓存删除完之后，有一个读请求，这个时候由于缓存被删除所以直接会读库，读操作的数据是老的并且会被加载进入缓存当中，后续读请求全部访问的老数据。\n\n![](如何优雅的设计和使用缓存/1550201097208.png)\n\n对缓存的操作不论成功失败都不能阻塞我们对数据库的操作，那么很多时候删除缓存可以用异步的操作，但是先删除缓存不能很好的适用于这个场景。\n\n先删除缓存也有一个好处是，如果对数据库操作失败了，那么由于先删除的缓存，最多只是造成Cache Miss。\n\n## 4.2先更新数据库，再删除缓存(推荐)\n\n如果我们使用更新数据库，再删除缓存就能避免上面的问题。但是同样的引入了新的问题,试想一下有一个数据此时是没有缓存的，所以查询请求会直接落库，更新操作在查询请求之后，但是更新操作删除数据库操作在查询完之后回填缓存之前，就会导致我们缓存中和数据库出现缓存不一致。\n\n为什么我们这种情况有问题，很多公司包括Facebook还会选择呢？因为要触发这个条件比较苛刻。\n\n1. 首先需要数据不在缓存中。\n2. 其次查询操作需要在更新操作先到达数据库。\n3. 最后查询操作的回填比更新操作的删除后触发，这个条件基本很难出现，因为更新操作的本来在查询操作之后，一般来说更新操作比查询操作稍慢。但是更新操作的删除却在查询操作之后，所以这个情况比较少出现。\n\n对比上面4.1的问题来说这种问题的概率很低，况且我们有超时机制保底所以基本能满足我们的需求。如果真的需要追求完美，可以使用二阶段提交，但是其成本和收益一般来说不成正比。\n\n当然还有个问题是如果我们删除失败了，缓存的数据就会和数据库的数据不一致，那么我们就只能靠过期超时来进行兜底。对此我们可以进行优化，如果删除失败的话 我们不能影响主流程那么我们可以将其放入队列后续进行异步删除。\n\n# 5.缓存挖坑三剑客\n\n大家一听到缓存有哪些注意事项，肯定首先想到的是缓存穿透，缓存击穿，缓存雪崩这三个挖坑的小能手，这里简单介绍一下他们具体是什么以及应对的方法。\n\n## 5.1缓存穿透\n\n缓存穿透是指查询的数据在数据库是没有的，那么在缓存中自然也没有，所以，在缓存中查不到就会去数据库取查询，这样的请求一多，那么我们的数据库的压力自然会增大。\n\n为了避免这个问题，可以采取下面两个手段:\n\n1. 约定:对于返回为NULL的依然缓存，对于抛出异常的返回不进行缓存,注意不要把抛异常的也给缓存了。采用这种手段的会增加我们缓存的维护成本，需要在插入缓存的时候删除这个空缓存，当然我们可以通过设置较短的超时时间来解决这个问题。\n2. \n\n![](如何优雅的设计和使用缓存/1550201125950.png)\n\n 2. 制定一些规则过滤一些不可能存在的数据，小数据用BitMap，大数据可以用布隆过滤器，比如你的订单ID 明显是在一个范围1-1000，如果不是1-1000之内的数据那其实可以直接给过滤掉。\n\n![](如何优雅的设计和使用缓存/1550201151740.png)\n\n## 5.2缓存击穿\n\n对于某些key设置了过期时间，但是其是热点数据，如果某个key失效，可能大量的请求打过来，缓存未命中，然后去数据库访问，此时数据库访问量会急剧增加。\n\n为了避免这个问题，我们可以采取下面的两个手段:\n\n1. 加分布式锁:加载数据的时候可以利用分布式锁锁住这个数据的Key,在Redis中直接使用setNX操作即可，对于获取到这个锁的线程，查询数据库更新缓存，其他线程采取重试策略，这样数据库不会同时受到很多线程访问同一条数据。\n2. 异步加载:由于缓存击穿是热点数据才会出现的问题，可以对这部分热点数据采取到期自动刷新的策略，而不是到期自动淘汰。淘汰其实也是为了数据的时效性，所以采用自动刷新也可以。\n\n## 5.3缓存雪崩\n\n缓存雪崩是指缓存不可用或者大量缓存由于超时时间相同在同一时间段失效，大量请求直接访问数据库，数据库压力过大导致系统雪崩。\n\n为了避免这个问题，我们采取下面的手段:\n\n1. 增加缓存系统可用性,通过监控关注缓存的健康程度，根据业务量适当的扩容缓存。\n2. 采用多级缓存，不同级别缓存设置的超时时间不同，及时某个级别缓存都过期，也有其他级别缓存兜底。\n3. 缓存的过期时间可以取个随机值，比如以前是设置10分钟的超时时间，那每个Key都可以随机8-13分钟过期，尽量让不同Key的过期时间不同。\n\n# 6.缓存污染\n\n缓存污染一般出现在我们使用本地缓存中，可以想象，在本地缓存中如果你获得了缓存，但是你接下来修改了这个数据，但是这个数据并没有更新在数据库，这样就造成了缓存污染:\n\n![](如何优雅的设计和使用缓存/1550201180147.png)\n\n 上面的代码就造成了缓存污染，通过id获取Customer，但是需求需要修改Customer的名字，所以开发人员直接在取出来的对象中直接修改，这个Customer对象就会被污染，其他线程取出这个数据就是错误的数据。\n\n\n\n要想避免这个问题需要开发人员从编码上注意，并且代码必须经过严格的review，以及全方位的回归测试，才能从一定程度上解决这个问题。\n\n# 7.序列化\n\n序列化是很多人都不注意的一个问题，很多人忽略了序列化的问题，上线之后马上报出一下奇怪的错误异常，造成了不必要的损失，最后一排查都是序列化的问题。列举几个序列化常见的问题:\n\n1. key-value对象过于复杂导致序列化不支持:笔者之前出过一个问题，在美团的Tair内部默认是使用protostuff进行序列化，而美团使用的通讯框架是thfift，thrift的TO是自动生成的，这个TO里面很多复杂的数据结构，但是将其存放到了Tair中。查询的时候反序列化也没有报错，单测也通过，但是到qa测试的时候发现这一块功能有问题，发现有个字段是boolean类型默认是false，把它改成true之后，序列化到tair中再反序列化还是false。定位到是protostuff对于复杂结构的对象(比如数组，List等等)支持不是很好，会造成一定的问题。后来对这个TO进行了转换，用普通的Java对象就能进行正确的序列化反序列化。\n2. 添加了字段或者删除了字段，导致上线之后老的缓存获取的时候反序列化报错，或者出现一些数据移位。\n3. 不同的JVM的序列化不同，如果你的缓存有不同的服务都在共同使用(不提倡)，那么需要注意不同JVM可能会对Class内部的Field排序不同，而影响序列化。比如下面的代码，在Jdk7和Jdk8中对象A的排列顺序不同，最终会导致反序列化结果出现问题:\n\n```java\n//jdk 7\nclass A{\n    int a;\n    int b;\n}\n//jdk 8\nclass A{\n    int b;\n    int a;\n}\n```\n\n序列化的问题必须得到重视，解决的办法有如下几点:\n\n1. 测试:对于序列化需要进行全面的测试，如果有不同的服务并且他们的JVM不同那么你也需要做这一块的测试，在上面的问题中笔者的单测通过的原因是用的默认数据false，所以根本没有测试true的情况，还好QA给力，将其给测试出来了。\n2. 对于不同的序列化框架都有自己不同的原理，对于添加字段之后如果当前序列化框架不能兼容老的，那么可以换个序列化框架。 对于protostuff来说他是按照Field的顺序来进行反序列化的，对于添加字段我们需要放到末尾，也就是不能插在中间，否则会出现错误。对于删除字段来说，用@Deprecated注解进行标注弃用，如果贸然删除，除非是最后一个字段，否则肯定会出现序列化异常。\n3. 可以使用双写来避免，对于每个缓存的key值可以加上版本号，每次上线版本号都加1，比如现在线上的缓存用的是Key_1，即将要上线的是Key_2,上线之后对缓存的添加是会写新老两个不同的版本(Key_1,Key_2)的Key-Value，读取数据还是读取老版本Key_1的数据,假设之前的缓存的过期时间是半个小时，那么上线半个小时之后，之前的老缓存存量的数据都会被淘汰，此时线上老缓存和新缓存他们的数据基本是一样的,切换读操作到新缓存，然后停止双写。采用这种方法基本能平滑过渡新老Model交替，但是不好的点就是需要短暂的维护两套新老Model，下次上线的时候需要删除掉老Model，增加了维护成本。\n\n# 8. GC调优\n\n对于大量使用本地缓存的应用，由于涉及到缓存淘汰，那么GC问题必定是常事。如果出现GC较多，STW时间较长，那么必定会影响服务可用性。这一块给出下面几点建议:\n\n1. 经常查看GC监控，如何发现不正常，需要想办法对其进行优化。\n2. 对于CMS垃圾收集器，如果发现remark过长，如果是大量本地缓存应用的话这个过长应该很正常，因为在并发阶段很容易有很多新对象进入缓存，从而remark阶段扫描很耗时，remark又会暂停。可以开启-XX:CMSScavengeBeforeRemark，在remark阶段前进行一次YGC，从而减少remark阶段扫描gc root的开销。\n3. 可以使用G1垃圾收集器，通过-XX:MaxGCPauseMillis设置最大停顿时间，提高服务可用性。\n\n# 9. 缓存的监控\n\n很多人对于缓存的监控也比较忽略，基本上线之后如果不报错然后就默认他就生效了。但是存在这个问题，很多人由于经验不足，有可能设置了不恰当的过期时间，或者不恰当的缓存大小导致缓存命中率不高，让缓存就成为了代码中的一个装饰品。所以对于缓存各种指标的监控，也比较重要，通过其不同的指标数据，我们可以对缓存的参数进行优化，从而让缓存达到最优化:\n\n![](如何优雅的设计和使用缓存/1550201212401.png)\n\n上面的代码中用来记录get操作的，通过Cat记录了获取缓存成功，缓存不存在，缓存过期，缓存失败(获取缓存时如果抛出异常，则叫失败)，通过这些指标，我们就能统计出命中率，我们调整过期时间和大小的时候就可以参考这些指标进行优化。\n\n转载自 https://juejin.im/post/5b849878e51d4538c77a974a\n\n","slug":"如何优雅的设计和使用缓存","published":1,"updated":"2019-02-27T06:40:39.030Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjsmu9nn4000e4sjqkhtuqoc2","content":"<h1 id=\"1-确认是否需要缓存\"><a href=\"#1-确认是否需要缓存\" class=\"headerlink\" title=\"1.确认是否需要缓存\"></a>1.确认是否需要缓存</h1><p>在使用缓存之前，需要确认你的项目是否真的需要缓存。使用缓存会引入的一定的技术复杂度，后文也将会一一介绍这些复杂度。一般来说从两个方面来个是否需要使用缓存:</p>\n<ol>\n<li>CPU占用:如果你有某些应用需要消耗大量的cpu去计算，比如正则表达式，如果你使用正则表达式比较频繁，而其又占用了很多CPU的话，那你就应该使用缓存将正则表达式的结果给缓存下来。</li>\n<li>数据库IO占用:如果你发现你的数据库连接池比较空闲，那么不应该用缓存。但是如果数据库连接池比较繁忙，甚至经常报出连接不够的报警，那么是时候应该考虑缓存了。笔者曾经有个服务，被很多其他服务调用，其他时间都还好，但是在每天早上10点的时候总是会报出数据库连接池连接不够的报警，经过排查，发现有几个服务选择了在10点做定时任务，大量的请求打过来，DB连接池不够，从而报出连接池不够的报警。这个时候有几个选择，我们可以通过扩容机器来解决，也可以通过增加数据库连接池来解决，但是没有必要增加这些成本，因为只有在10点的时候才会出现这个问题。后来引入了缓存，不仅解决了这个问题，而且还增加了读的性能。</li>\n</ol>\n<p>如果并没有上述两个问题，那么你不必为了增加缓存而缓存。</p>\n<h1 id=\"2-选择合适的缓存\"><a href=\"#2-选择合适的缓存\" class=\"headerlink\" title=\"2.选择合适的缓存\"></a>2.选择合适的缓存</h1><p>缓存又分进程内缓存和分布式缓存两种。很多人包括笔者在开始选缓存框架的时候都感到了困惑:网上的缓存太多了，大家都吹嘘自己很牛逼，我该怎么选择呢？</p>\n<h2 id=\"2-1-选择合适的进程缓存\"><a href=\"#2-1-选择合适的进程缓存\" class=\"headerlink\" title=\"2.1 选择合适的进程缓存\"></a>2.1 选择合适的进程缓存</h2><p>首先看看几个比较常用的缓存的比较，具体原理可以参考<a href=\"https://juejin.im/post/5b7593496fb9a009b62904fa#comment\" target=\"_blank\" rel=\"noopener\">你应该知道的缓存进化史</a>:</p>\n<table>\n<thead>\n<tr>\n<th>比较项</th>\n<th>ConcurrentHashMap</th>\n<th>LRUMap</th>\n<th>Ehcache</th>\n<th>Guava Cache</th>\n<th>Caffeine</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>读写性能</td>\n<td>很好，分段锁</td>\n<td>一般，全局加锁</td>\n<td>好</td>\n<td>好，需要做淘汰操作</td>\n<td>很好</td>\n</tr>\n<tr>\n<td>淘汰算法</td>\n<td>无</td>\n<td>LRU，一般</td>\n<td>支持多种淘汰算法,LRU,LFU,FIFO</td>\n<td>LRU，一般</td>\n<td>W-TinyLFU, 很好</td>\n</tr>\n<tr>\n<td>功能丰富程度</td>\n<td>功能比较简单</td>\n<td>功能比较单一</td>\n<td>功能很丰富</td>\n<td>功能很丰富，支持刷新和虚引用等</td>\n<td>功能和Guava Cache类似</td>\n</tr>\n<tr>\n<td>工具大小</td>\n<td>jdk自带类，很小</td>\n<td>基于LinkedHashMap，较小</td>\n<td>很大，最新版本1.4MB</td>\n<td>是Guava工具类中的一个小部分，较小</td>\n<td>一般，最新版本644KB</td>\n</tr>\n<tr>\n<td>是否持久化</td>\n<td>否</td>\n<td>否</td>\n<td>是</td>\n<td>否</td>\n<td>否</td>\n</tr>\n<tr>\n<td>是否支持集群</td>\n<td>否</td>\n<td>否</td>\n<td>是</td>\n<td>否</td>\n<td>否</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>对于ConcurrentHashMap来说，比较适合缓存比较固定不变的元素，且缓存的数量较小的。虽然从上面表格中比起来有点逊色，但是其由于是jdk自带的类，在各种框架中依然有大量的使用,比如我们可以用来缓存我们反射的Method,Field等等;也可以缓存一些链接，防止其重复建立。在Caffeine中也是使用的ConcurrentHashMap来存储元素。</li>\n<li>对于LRUMap来说，如果不想引入第三方包，又想使用淘汰算法淘汰数据，可以使用这个。</li>\n<li>对于Ehcache来说，由于其jar包很大，较重量级。对于需要持久化和集群的一些功能的，可以选择Ehcache。笔者没怎么使用过这个缓存，如果要选择的话，可以选择分布式缓存来替代Ehcache。</li>\n<li>对于Guava Cache来说，Guava这个jar包在很多Java应用程序中都有大量的引入，所以很多时候其实是直接用就好了，并且其本身是轻量级的而且功能较为丰富，在不了解Caffeine的情况下可以选择Guava Cache。</li>\n<li>对于Caffeine来说，笔者是非常推荐的，其在命中率，读写性能上都比Guava Cache好很多，并且其API和Guava cache基本一致，甚至会多一点。在真实环境中使用Caffeine，取得过不错的效果。</li>\n</ul>\n<p>总结一下:如果不需要淘汰算法则选择ConcurrentHashMap，如果需要淘汰算法和一些丰富的API，这里推荐选择Caffeine。</p>\n<h2 id=\"2-2-选择合适的分布式缓存\"><a href=\"#2-2-选择合适的分布式缓存\" class=\"headerlink\" title=\"2.2 选择合适的分布式缓存\"></a>2.2 选择合适的分布式缓存</h2><p>这里选取三个比较出名的分布式缓存来作为比较，MemCache(没有实战使用过)，Redis(在美团又叫Squirrel)，Tair(在美团又叫Cellar)。不同的分布式缓存功能特性和实现原理方面有很大的差异，因此他们所适应的场景也有所不同。</p>\n<table>\n<thead>\n<tr>\n<th>比较项</th>\n<th>MemCache</th>\n<th>Squirrel/Redis</th>\n<th>Cellar/Tair</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数据结构</td>\n<td>只支持简单的Key-Value结构</td>\n<td>String,Hash, List, Set, Sorted Set</td>\n<td>String,HashMap, List，Set</td>\n</tr>\n<tr>\n<td>持久化</td>\n<td>不支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>容量大小</td>\n<td>数据纯内存，数据存储不宜过多</td>\n<td>数据全内存，资源成本考量不宜超过100GB</td>\n<td>可以配置全内存或内存+磁盘引擎，数据容量可无限扩充</td>\n</tr>\n<tr>\n<td>读写性能</td>\n<td>很高</td>\n<td>很高(RT0.5ms左右)</td>\n<td>String类型比较高(RT1ms左右)，复杂类型比较慢(RT5ms左右)</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>MemCache：这一块接触得比较少，不做过多的推荐。其吞吐量较大，但是支持的数据结构较少，并且不支持持久化。</li>\n<li>Redis:支持丰富的数据结构，读写性能很高，但是数据全内存，必须要考虑资源成本，支持持久化。</li>\n<li>Tair: 支持丰富的数据结构，读写性能较高，部分类型比较慢，理论上容量可以无限扩充。</li>\n</ul>\n<p>总结:如果服务对延迟比较敏感，Map/Set数据也比较多的话，比较适合Redis。如果服务需要放入缓存量的数据很大，对延迟又不是特别敏感的话，那就可以选择Tair。在美团的很多应用中对Tair都有应用，在笔者的项目中使用其存放我们生成的支付token,支付码，用来替代数据库存储。大部分的情况下两者都可以选择，互为替代。</p>\n<h1 id=\"3-多级缓存\"><a href=\"#3-多级缓存\" class=\"headerlink\" title=\"3.多级缓存\"></a>3.多级缓存</h1><p>很多人一想到缓存马上脑子里面就会出现下面的图:<br><img src=\"/2019/02/15/如何优雅的设计和使用缓存/1550200994217.png\" alt=\"\"><br>Redis用来存储热点数据，Redis中没有的数据则直接去数据库访问。</p>\n<p>在之前介绍本地缓存的时候，很多人都问我，我已经有Redis了，我干嘛还需要了解Guava，Caffeine这些进程缓存呢。我基本统一回复下面两个答案:</p>\n<ol>\n<li>Redis如果挂了或者使用老版本的Redis,其会进行全量同步，此时Redis是不可用的，这个时候我们只能访问数据库，很容易造成雪崩。</li>\n<li>访问Redis会有一定的网络I/O以及序列化反序列化，虽然性能很高但是其终究没有本地方法快，可以将最热的数据存放在本地，以便进一步加快访问速度。这个思路并不是我们做互联网架构独有的，在计算机系统中使用L1,L2,L3多级缓存，用来减少对内存的直接访问，从而加快访问速度。</li>\n</ol>\n<p><img src=\"/2019/02/15/如何优雅的设计和使用缓存/1550201017361.png\" alt=\"\"></p>\n<p>所以如果仅仅是使用Redis，能满足我们大部分需求，但是当需要追求更高的性能以及更高的可用性的时候，那就不得不了解多级缓存。</p>\n<h2 id=\"3-1使用进程缓存\"><a href=\"#3-1使用进程缓存\" class=\"headerlink\" title=\"3.1使用进程缓存\"></a>3.1使用进程缓存</h2><p>对于进程内缓存，其本来受限于内存的大小的限制，以及进程缓存更新后其他缓存无法得知，所以一般来说进程缓存适用于:</p>\n<ol>\n<li>数据量不是很大，数据更新频率较低，之前我们有个查询商家名字的服务，在发送短信的时候需要调用，由于商家名字变更频率较低，并且就算是变更了没有及时变更缓存，短信里面带有老的商家名字客户也能接受。利用Caffeine作为本地缓存,size设置为1万，过期时间设置为1个小时，基本能在高峰期解决问题。</li>\n<li>如果数据量更新频繁，也想使用进程缓存的话，那么可以将其过期时间设置为较短，或者设置其较短的自动刷新的时间。这些对于Caffeine或者Guava Cache来说都是现成的API。</li>\n</ol>\n<h2 id=\"3-2使用多级缓存\"><a href=\"#3-2使用多级缓存\" class=\"headerlink\" title=\"3.2使用多级缓存\"></a>3.2使用多级缓存</h2><blockquote>\n<p>俗话说得好，世界上没有什么是一个缓存解决不了的事，如果有，那就两个。</p>\n</blockquote>\n<p>一般来说我们选择一个进程缓存和一个分布式缓存来搭配做多级缓存，一般来说引入两个也足够了，如果使用三个，四个的话，技术维护成本会很高，反而有可能会得不偿失，如下图所示: </p>\n<p><img src=\"/2019/02/15/如何优雅的设计和使用缓存/1550201060498.png\" alt=\"\"></p>\n<p>利用Caffeine做一级缓存，Redis作为二级缓存。</p>\n<ol>\n<li>首先去Caffeine中查询数据，如果有直接返回。如果没有则进行第2步。</li>\n<li>再去Redis中查询，如果查询到了返回数据并在Caffeine中填充此数据。如果没有查到则进行第3步。</li>\n<li>最后去Mysql中查询，如果查询到了返回数据并在Redis，Caffeine中依次填充此数据。</li>\n</ol>\n<p>对于Caffeine的缓存，如果有数据更新，只能删除更新数据的那台机器上的缓存，其他机器只能通过超时来过期缓存，超时设定可以有两种策略:</p>\n<ul>\n<li>设置成写入后多少时间后过期</li>\n<li>设置成写入后多少时间刷新</li>\n</ul>\n<p>对于Redis的缓存更新，其他机器立马可见，但是也必须要设置超时时间，其时间比Caffeine的过期长。</p>\n<p>为了解决进程内缓存的问题，设计进一步优化:</p>\n<p><img src=\"/2019/02/15/如何优雅的设计和使用缓存/1550201074569.png\" alt=\"\"></p>\n<p> 通过Redis的pub/sub，可以通知其他进程缓存对此缓存进行删除。如果Redis挂了或者订阅机制不靠谱，依靠超时设定，依然可以做兜底处理。</p>\n<h1 id=\"4-缓存更新\"><a href=\"#4-缓存更新\" class=\"headerlink\" title=\"4.缓存更新\"></a>4.缓存更新</h1><p>一般来说缓存的更新有两种情况:</p>\n<ul>\n<li>先删除缓存，再更新数据库。</li>\n<li>先更新数据库，再删除缓存。 这两种情况在业界，大家对其都有自己的看法。具体怎么使用还得看各自的取舍。当然肯定会有人问为什么要删除缓存呢？而不是更新缓存呢？你可以想想当有多个并发的请求更新数据，你并不能保证更新数据库的顺序和更新缓存的顺序一致，那就会出现数据库中和缓存中数据不一致的情况。所以一般来说考虑删除缓存。</li>\n</ul>\n<h2 id=\"4-1先删除缓存，再更新数据库\"><a href=\"#4-1先删除缓存，再更新数据库\" class=\"headerlink\" title=\"4.1先删除缓存，再更新数据库\"></a>4.1先删除缓存，再更新数据库</h2><p>对于一个更新操作简单来说，就是先去各级缓存进行删除，然后更新数据库。这个操作有一个比较大的问题，在对缓存删除完之后，有一个读请求，这个时候由于缓存被删除所以直接会读库，读操作的数据是老的并且会被加载进入缓存当中，后续读请求全部访问的老数据。</p>\n<p><img src=\"/2019/02/15/如何优雅的设计和使用缓存/1550201097208.png\" alt=\"\"></p>\n<p>对缓存的操作不论成功失败都不能阻塞我们对数据库的操作，那么很多时候删除缓存可以用异步的操作，但是先删除缓存不能很好的适用于这个场景。</p>\n<p>先删除缓存也有一个好处是，如果对数据库操作失败了，那么由于先删除的缓存，最多只是造成Cache Miss。</p>\n<h2 id=\"4-2先更新数据库，再删除缓存-推荐\"><a href=\"#4-2先更新数据库，再删除缓存-推荐\" class=\"headerlink\" title=\"4.2先更新数据库，再删除缓存(推荐)\"></a>4.2先更新数据库，再删除缓存(推荐)</h2><p>如果我们使用更新数据库，再删除缓存就能避免上面的问题。但是同样的引入了新的问题,试想一下有一个数据此时是没有缓存的，所以查询请求会直接落库，更新操作在查询请求之后，但是更新操作删除数据库操作在查询完之后回填缓存之前，就会导致我们缓存中和数据库出现缓存不一致。</p>\n<p>为什么我们这种情况有问题，很多公司包括Facebook还会选择呢？因为要触发这个条件比较苛刻。</p>\n<ol>\n<li>首先需要数据不在缓存中。</li>\n<li>其次查询操作需要在更新操作先到达数据库。</li>\n<li>最后查询操作的回填比更新操作的删除后触发，这个条件基本很难出现，因为更新操作的本来在查询操作之后，一般来说更新操作比查询操作稍慢。但是更新操作的删除却在查询操作之后，所以这个情况比较少出现。</li>\n</ol>\n<p>对比上面4.1的问题来说这种问题的概率很低，况且我们有超时机制保底所以基本能满足我们的需求。如果真的需要追求完美，可以使用二阶段提交，但是其成本和收益一般来说不成正比。</p>\n<p>当然还有个问题是如果我们删除失败了，缓存的数据就会和数据库的数据不一致，那么我们就只能靠过期超时来进行兜底。对此我们可以进行优化，如果删除失败的话 我们不能影响主流程那么我们可以将其放入队列后续进行异步删除。</p>\n<h1 id=\"5-缓存挖坑三剑客\"><a href=\"#5-缓存挖坑三剑客\" class=\"headerlink\" title=\"5.缓存挖坑三剑客\"></a>5.缓存挖坑三剑客</h1><p>大家一听到缓存有哪些注意事项，肯定首先想到的是缓存穿透，缓存击穿，缓存雪崩这三个挖坑的小能手，这里简单介绍一下他们具体是什么以及应对的方法。</p>\n<h2 id=\"5-1缓存穿透\"><a href=\"#5-1缓存穿透\" class=\"headerlink\" title=\"5.1缓存穿透\"></a>5.1缓存穿透</h2><p>缓存穿透是指查询的数据在数据库是没有的，那么在缓存中自然也没有，所以，在缓存中查不到就会去数据库取查询，这样的请求一多，那么我们的数据库的压力自然会增大。</p>\n<p>为了避免这个问题，可以采取下面两个手段:</p>\n<ol>\n<li>约定:对于返回为NULL的依然缓存，对于抛出异常的返回不进行缓存,注意不要把抛异常的也给缓存了。采用这种手段的会增加我们缓存的维护成本，需要在插入缓存的时候删除这个空缓存，当然我们可以通过设置较短的超时时间来解决这个问题。</li>\n<li></li>\n</ol>\n<p><img src=\"/2019/02/15/如何优雅的设计和使用缓存/1550201125950.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>制定一些规则过滤一些不可能存在的数据，小数据用BitMap，大数据可以用布隆过滤器，比如你的订单ID 明显是在一个范围1-1000，如果不是1-1000之内的数据那其实可以直接给过滤掉。</li>\n</ol>\n<p><img src=\"/2019/02/15/如何优雅的设计和使用缓存/1550201151740.png\" alt=\"\"></p>\n<h2 id=\"5-2缓存击穿\"><a href=\"#5-2缓存击穿\" class=\"headerlink\" title=\"5.2缓存击穿\"></a>5.2缓存击穿</h2><p>对于某些key设置了过期时间，但是其是热点数据，如果某个key失效，可能大量的请求打过来，缓存未命中，然后去数据库访问，此时数据库访问量会急剧增加。</p>\n<p>为了避免这个问题，我们可以采取下面的两个手段:</p>\n<ol>\n<li>加分布式锁:加载数据的时候可以利用分布式锁锁住这个数据的Key,在Redis中直接使用setNX操作即可，对于获取到这个锁的线程，查询数据库更新缓存，其他线程采取重试策略，这样数据库不会同时受到很多线程访问同一条数据。</li>\n<li>异步加载:由于缓存击穿是热点数据才会出现的问题，可以对这部分热点数据采取到期自动刷新的策略，而不是到期自动淘汰。淘汰其实也是为了数据的时效性，所以采用自动刷新也可以。</li>\n</ol>\n<h2 id=\"5-3缓存雪崩\"><a href=\"#5-3缓存雪崩\" class=\"headerlink\" title=\"5.3缓存雪崩\"></a>5.3缓存雪崩</h2><p>缓存雪崩是指缓存不可用或者大量缓存由于超时时间相同在同一时间段失效，大量请求直接访问数据库，数据库压力过大导致系统雪崩。</p>\n<p>为了避免这个问题，我们采取下面的手段:</p>\n<ol>\n<li>增加缓存系统可用性,通过监控关注缓存的健康程度，根据业务量适当的扩容缓存。</li>\n<li>采用多级缓存，不同级别缓存设置的超时时间不同，及时某个级别缓存都过期，也有其他级别缓存兜底。</li>\n<li>缓存的过期时间可以取个随机值，比如以前是设置10分钟的超时时间，那每个Key都可以随机8-13分钟过期，尽量让不同Key的过期时间不同。</li>\n</ol>\n<h1 id=\"6-缓存污染\"><a href=\"#6-缓存污染\" class=\"headerlink\" title=\"6.缓存污染\"></a>6.缓存污染</h1><p>缓存污染一般出现在我们使用本地缓存中，可以想象，在本地缓存中如果你获得了缓存，但是你接下来修改了这个数据，但是这个数据并没有更新在数据库，这样就造成了缓存污染:</p>\n<p><img src=\"/2019/02/15/如何优雅的设计和使用缓存/1550201180147.png\" alt=\"\"></p>\n<p> 上面的代码就造成了缓存污染，通过id获取Customer，但是需求需要修改Customer的名字，所以开发人员直接在取出来的对象中直接修改，这个Customer对象就会被污染，其他线程取出这个数据就是错误的数据。</p>\n<p>要想避免这个问题需要开发人员从编码上注意，并且代码必须经过严格的review，以及全方位的回归测试，才能从一定程度上解决这个问题。</p>\n<h1 id=\"7-序列化\"><a href=\"#7-序列化\" class=\"headerlink\" title=\"7.序列化\"></a>7.序列化</h1><p>序列化是很多人都不注意的一个问题，很多人忽略了序列化的问题，上线之后马上报出一下奇怪的错误异常，造成了不必要的损失，最后一排查都是序列化的问题。列举几个序列化常见的问题:</p>\n<ol>\n<li>key-value对象过于复杂导致序列化不支持:笔者之前出过一个问题，在美团的Tair内部默认是使用protostuff进行序列化，而美团使用的通讯框架是thfift，thrift的TO是自动生成的，这个TO里面很多复杂的数据结构，但是将其存放到了Tair中。查询的时候反序列化也没有报错，单测也通过，但是到qa测试的时候发现这一块功能有问题，发现有个字段是boolean类型默认是false，把它改成true之后，序列化到tair中再反序列化还是false。定位到是protostuff对于复杂结构的对象(比如数组，List等等)支持不是很好，会造成一定的问题。后来对这个TO进行了转换，用普通的Java对象就能进行正确的序列化反序列化。</li>\n<li>添加了字段或者删除了字段，导致上线之后老的缓存获取的时候反序列化报错，或者出现一些数据移位。</li>\n<li>不同的JVM的序列化不同，如果你的缓存有不同的服务都在共同使用(不提倡)，那么需要注意不同JVM可能会对Class内部的Field排序不同，而影响序列化。比如下面的代码，在Jdk7和Jdk8中对象A的排列顺序不同，最终会导致反序列化结果出现问题:</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//jdk 7</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//jdk 8</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>序列化的问题必须得到重视，解决的办法有如下几点:</p>\n<ol>\n<li>测试:对于序列化需要进行全面的测试，如果有不同的服务并且他们的JVM不同那么你也需要做这一块的测试，在上面的问题中笔者的单测通过的原因是用的默认数据false，所以根本没有测试true的情况，还好QA给力，将其给测试出来了。</li>\n<li>对于不同的序列化框架都有自己不同的原理，对于添加字段之后如果当前序列化框架不能兼容老的，那么可以换个序列化框架。 对于protostuff来说他是按照Field的顺序来进行反序列化的，对于添加字段我们需要放到末尾，也就是不能插在中间，否则会出现错误。对于删除字段来说，用@Deprecated注解进行标注弃用，如果贸然删除，除非是最后一个字段，否则肯定会出现序列化异常。</li>\n<li>可以使用双写来避免，对于每个缓存的key值可以加上版本号，每次上线版本号都加1，比如现在线上的缓存用的是Key_1，即将要上线的是Key_2,上线之后对缓存的添加是会写新老两个不同的版本(Key_1,Key_2)的Key-Value，读取数据还是读取老版本Key_1的数据,假设之前的缓存的过期时间是半个小时，那么上线半个小时之后，之前的老缓存存量的数据都会被淘汰，此时线上老缓存和新缓存他们的数据基本是一样的,切换读操作到新缓存，然后停止双写。采用这种方法基本能平滑过渡新老Model交替，但是不好的点就是需要短暂的维护两套新老Model，下次上线的时候需要删除掉老Model，增加了维护成本。</li>\n</ol>\n<h1 id=\"8-GC调优\"><a href=\"#8-GC调优\" class=\"headerlink\" title=\"8. GC调优\"></a>8. GC调优</h1><p>对于大量使用本地缓存的应用，由于涉及到缓存淘汰，那么GC问题必定是常事。如果出现GC较多，STW时间较长，那么必定会影响服务可用性。这一块给出下面几点建议:</p>\n<ol>\n<li>经常查看GC监控，如何发现不正常，需要想办法对其进行优化。</li>\n<li>对于CMS垃圾收集器，如果发现remark过长，如果是大量本地缓存应用的话这个过长应该很正常，因为在并发阶段很容易有很多新对象进入缓存，从而remark阶段扫描很耗时，remark又会暂停。可以开启-XX:CMSScavengeBeforeRemark，在remark阶段前进行一次YGC，从而减少remark阶段扫描gc root的开销。</li>\n<li>可以使用G1垃圾收集器，通过-XX:MaxGCPauseMillis设置最大停顿时间，提高服务可用性。</li>\n</ol>\n<h1 id=\"9-缓存的监控\"><a href=\"#9-缓存的监控\" class=\"headerlink\" title=\"9. 缓存的监控\"></a>9. 缓存的监控</h1><p>很多人对于缓存的监控也比较忽略，基本上线之后如果不报错然后就默认他就生效了。但是存在这个问题，很多人由于经验不足，有可能设置了不恰当的过期时间，或者不恰当的缓存大小导致缓存命中率不高，让缓存就成为了代码中的一个装饰品。所以对于缓存各种指标的监控，也比较重要，通过其不同的指标数据，我们可以对缓存的参数进行优化，从而让缓存达到最优化:</p>\n<p><img src=\"/2019/02/15/如何优雅的设计和使用缓存/1550201212401.png\" alt=\"\"></p>\n<p>上面的代码中用来记录get操作的，通过Cat记录了获取缓存成功，缓存不存在，缓存过期，缓存失败(获取缓存时如果抛出异常，则叫失败)，通过这些指标，我们就能统计出命中率，我们调整过期时间和大小的时候就可以参考这些指标进行优化。</p>\n<p>转载自 <a href=\"https://juejin.im/post/5b849878e51d4538c77a974a\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5b849878e51d4538c77a974a</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-确认是否需要缓存\"><a href=\"#1-确认是否需要缓存\" class=\"headerlink\" title=\"1.确认是否需要缓存\"></a>1.确认是否需要缓存</h1><p>在使用缓存之前，需要确认你的项目是否真的需要缓存。使用缓存会引入的一定的技术复杂度，后文也将会一一介绍这些复杂度。一般来说从两个方面来个是否需要使用缓存:</p>\n<ol>\n<li>CPU占用:如果你有某些应用需要消耗大量的cpu去计算，比如正则表达式，如果你使用正则表达式比较频繁，而其又占用了很多CPU的话，那你就应该使用缓存将正则表达式的结果给缓存下来。</li>\n<li>数据库IO占用:如果你发现你的数据库连接池比较空闲，那么不应该用缓存。但是如果数据库连接池比较繁忙，甚至经常报出连接不够的报警，那么是时候应该考虑缓存了。笔者曾经有个服务，被很多其他服务调用，其他时间都还好，但是在每天早上10点的时候总是会报出数据库连接池连接不够的报警，经过排查，发现有几个服务选择了在10点做定时任务，大量的请求打过来，DB连接池不够，从而报出连接池不够的报警。这个时候有几个选择，我们可以通过扩容机器来解决，也可以通过增加数据库连接池来解决，但是没有必要增加这些成本，因为只有在10点的时候才会出现这个问题。后来引入了缓存，不仅解决了这个问题，而且还增加了读的性能。</li>\n</ol>\n<p>如果并没有上述两个问题，那么你不必为了增加缓存而缓存。</p>\n<h1 id=\"2-选择合适的缓存\"><a href=\"#2-选择合适的缓存\" class=\"headerlink\" title=\"2.选择合适的缓存\"></a>2.选择合适的缓存</h1><p>缓存又分进程内缓存和分布式缓存两种。很多人包括笔者在开始选缓存框架的时候都感到了困惑:网上的缓存太多了，大家都吹嘘自己很牛逼，我该怎么选择呢？</p>\n<h2 id=\"2-1-选择合适的进程缓存\"><a href=\"#2-1-选择合适的进程缓存\" class=\"headerlink\" title=\"2.1 选择合适的进程缓存\"></a>2.1 选择合适的进程缓存</h2><p>首先看看几个比较常用的缓存的比较，具体原理可以参考<a href=\"https://juejin.im/post/5b7593496fb9a009b62904fa#comment\" target=\"_blank\" rel=\"noopener\">你应该知道的缓存进化史</a>:</p>\n<table>\n<thead>\n<tr>\n<th>比较项</th>\n<th>ConcurrentHashMap</th>\n<th>LRUMap</th>\n<th>Ehcache</th>\n<th>Guava Cache</th>\n<th>Caffeine</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>读写性能</td>\n<td>很好，分段锁</td>\n<td>一般，全局加锁</td>\n<td>好</td>\n<td>好，需要做淘汰操作</td>\n<td>很好</td>\n</tr>\n<tr>\n<td>淘汰算法</td>\n<td>无</td>\n<td>LRU，一般</td>\n<td>支持多种淘汰算法,LRU,LFU,FIFO</td>\n<td>LRU，一般</td>\n<td>W-TinyLFU, 很好</td>\n</tr>\n<tr>\n<td>功能丰富程度</td>\n<td>功能比较简单</td>\n<td>功能比较单一</td>\n<td>功能很丰富</td>\n<td>功能很丰富，支持刷新和虚引用等</td>\n<td>功能和Guava Cache类似</td>\n</tr>\n<tr>\n<td>工具大小</td>\n<td>jdk自带类，很小</td>\n<td>基于LinkedHashMap，较小</td>\n<td>很大，最新版本1.4MB</td>\n<td>是Guava工具类中的一个小部分，较小</td>\n<td>一般，最新版本644KB</td>\n</tr>\n<tr>\n<td>是否持久化</td>\n<td>否</td>\n<td>否</td>\n<td>是</td>\n<td>否</td>\n<td>否</td>\n</tr>\n<tr>\n<td>是否支持集群</td>\n<td>否</td>\n<td>否</td>\n<td>是</td>\n<td>否</td>\n<td>否</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>对于ConcurrentHashMap来说，比较适合缓存比较固定不变的元素，且缓存的数量较小的。虽然从上面表格中比起来有点逊色，但是其由于是jdk自带的类，在各种框架中依然有大量的使用,比如我们可以用来缓存我们反射的Method,Field等等;也可以缓存一些链接，防止其重复建立。在Caffeine中也是使用的ConcurrentHashMap来存储元素。</li>\n<li>对于LRUMap来说，如果不想引入第三方包，又想使用淘汰算法淘汰数据，可以使用这个。</li>\n<li>对于Ehcache来说，由于其jar包很大，较重量级。对于需要持久化和集群的一些功能的，可以选择Ehcache。笔者没怎么使用过这个缓存，如果要选择的话，可以选择分布式缓存来替代Ehcache。</li>\n<li>对于Guava Cache来说，Guava这个jar包在很多Java应用程序中都有大量的引入，所以很多时候其实是直接用就好了，并且其本身是轻量级的而且功能较为丰富，在不了解Caffeine的情况下可以选择Guava Cache。</li>\n<li>对于Caffeine来说，笔者是非常推荐的，其在命中率，读写性能上都比Guava Cache好很多，并且其API和Guava cache基本一致，甚至会多一点。在真实环境中使用Caffeine，取得过不错的效果。</li>\n</ul>\n<p>总结一下:如果不需要淘汰算法则选择ConcurrentHashMap，如果需要淘汰算法和一些丰富的API，这里推荐选择Caffeine。</p>\n<h2 id=\"2-2-选择合适的分布式缓存\"><a href=\"#2-2-选择合适的分布式缓存\" class=\"headerlink\" title=\"2.2 选择合适的分布式缓存\"></a>2.2 选择合适的分布式缓存</h2><p>这里选取三个比较出名的分布式缓存来作为比较，MemCache(没有实战使用过)，Redis(在美团又叫Squirrel)，Tair(在美团又叫Cellar)。不同的分布式缓存功能特性和实现原理方面有很大的差异，因此他们所适应的场景也有所不同。</p>\n<table>\n<thead>\n<tr>\n<th>比较项</th>\n<th>MemCache</th>\n<th>Squirrel/Redis</th>\n<th>Cellar/Tair</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数据结构</td>\n<td>只支持简单的Key-Value结构</td>\n<td>String,Hash, List, Set, Sorted Set</td>\n<td>String,HashMap, List，Set</td>\n</tr>\n<tr>\n<td>持久化</td>\n<td>不支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>容量大小</td>\n<td>数据纯内存，数据存储不宜过多</td>\n<td>数据全内存，资源成本考量不宜超过100GB</td>\n<td>可以配置全内存或内存+磁盘引擎，数据容量可无限扩充</td>\n</tr>\n<tr>\n<td>读写性能</td>\n<td>很高</td>\n<td>很高(RT0.5ms左右)</td>\n<td>String类型比较高(RT1ms左右)，复杂类型比较慢(RT5ms左右)</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>MemCache：这一块接触得比较少，不做过多的推荐。其吞吐量较大，但是支持的数据结构较少，并且不支持持久化。</li>\n<li>Redis:支持丰富的数据结构，读写性能很高，但是数据全内存，必须要考虑资源成本，支持持久化。</li>\n<li>Tair: 支持丰富的数据结构，读写性能较高，部分类型比较慢，理论上容量可以无限扩充。</li>\n</ul>\n<p>总结:如果服务对延迟比较敏感，Map/Set数据也比较多的话，比较适合Redis。如果服务需要放入缓存量的数据很大，对延迟又不是特别敏感的话，那就可以选择Tair。在美团的很多应用中对Tair都有应用，在笔者的项目中使用其存放我们生成的支付token,支付码，用来替代数据库存储。大部分的情况下两者都可以选择，互为替代。</p>\n<h1 id=\"3-多级缓存\"><a href=\"#3-多级缓存\" class=\"headerlink\" title=\"3.多级缓存\"></a>3.多级缓存</h1><p>很多人一想到缓存马上脑子里面就会出现下面的图:<br><img src=\"/2019/02/15/如何优雅的设计和使用缓存/1550200994217.png\" alt=\"\"><br>Redis用来存储热点数据，Redis中没有的数据则直接去数据库访问。</p>\n<p>在之前介绍本地缓存的时候，很多人都问我，我已经有Redis了，我干嘛还需要了解Guava，Caffeine这些进程缓存呢。我基本统一回复下面两个答案:</p>\n<ol>\n<li>Redis如果挂了或者使用老版本的Redis,其会进行全量同步，此时Redis是不可用的，这个时候我们只能访问数据库，很容易造成雪崩。</li>\n<li>访问Redis会有一定的网络I/O以及序列化反序列化，虽然性能很高但是其终究没有本地方法快，可以将最热的数据存放在本地，以便进一步加快访问速度。这个思路并不是我们做互联网架构独有的，在计算机系统中使用L1,L2,L3多级缓存，用来减少对内存的直接访问，从而加快访问速度。</li>\n</ol>\n<p><img src=\"/2019/02/15/如何优雅的设计和使用缓存/1550201017361.png\" alt=\"\"></p>\n<p>所以如果仅仅是使用Redis，能满足我们大部分需求，但是当需要追求更高的性能以及更高的可用性的时候，那就不得不了解多级缓存。</p>\n<h2 id=\"3-1使用进程缓存\"><a href=\"#3-1使用进程缓存\" class=\"headerlink\" title=\"3.1使用进程缓存\"></a>3.1使用进程缓存</h2><p>对于进程内缓存，其本来受限于内存的大小的限制，以及进程缓存更新后其他缓存无法得知，所以一般来说进程缓存适用于:</p>\n<ol>\n<li>数据量不是很大，数据更新频率较低，之前我们有个查询商家名字的服务，在发送短信的时候需要调用，由于商家名字变更频率较低，并且就算是变更了没有及时变更缓存，短信里面带有老的商家名字客户也能接受。利用Caffeine作为本地缓存,size设置为1万，过期时间设置为1个小时，基本能在高峰期解决问题。</li>\n<li>如果数据量更新频繁，也想使用进程缓存的话，那么可以将其过期时间设置为较短，或者设置其较短的自动刷新的时间。这些对于Caffeine或者Guava Cache来说都是现成的API。</li>\n</ol>\n<h2 id=\"3-2使用多级缓存\"><a href=\"#3-2使用多级缓存\" class=\"headerlink\" title=\"3.2使用多级缓存\"></a>3.2使用多级缓存</h2><blockquote>\n<p>俗话说得好，世界上没有什么是一个缓存解决不了的事，如果有，那就两个。</p>\n</blockquote>\n<p>一般来说我们选择一个进程缓存和一个分布式缓存来搭配做多级缓存，一般来说引入两个也足够了，如果使用三个，四个的话，技术维护成本会很高，反而有可能会得不偿失，如下图所示: </p>\n<p><img src=\"/2019/02/15/如何优雅的设计和使用缓存/1550201060498.png\" alt=\"\"></p>\n<p>利用Caffeine做一级缓存，Redis作为二级缓存。</p>\n<ol>\n<li>首先去Caffeine中查询数据，如果有直接返回。如果没有则进行第2步。</li>\n<li>再去Redis中查询，如果查询到了返回数据并在Caffeine中填充此数据。如果没有查到则进行第3步。</li>\n<li>最后去Mysql中查询，如果查询到了返回数据并在Redis，Caffeine中依次填充此数据。</li>\n</ol>\n<p>对于Caffeine的缓存，如果有数据更新，只能删除更新数据的那台机器上的缓存，其他机器只能通过超时来过期缓存，超时设定可以有两种策略:</p>\n<ul>\n<li>设置成写入后多少时间后过期</li>\n<li>设置成写入后多少时间刷新</li>\n</ul>\n<p>对于Redis的缓存更新，其他机器立马可见，但是也必须要设置超时时间，其时间比Caffeine的过期长。</p>\n<p>为了解决进程内缓存的问题，设计进一步优化:</p>\n<p><img src=\"/2019/02/15/如何优雅的设计和使用缓存/1550201074569.png\" alt=\"\"></p>\n<p> 通过Redis的pub/sub，可以通知其他进程缓存对此缓存进行删除。如果Redis挂了或者订阅机制不靠谱，依靠超时设定，依然可以做兜底处理。</p>\n<h1 id=\"4-缓存更新\"><a href=\"#4-缓存更新\" class=\"headerlink\" title=\"4.缓存更新\"></a>4.缓存更新</h1><p>一般来说缓存的更新有两种情况:</p>\n<ul>\n<li>先删除缓存，再更新数据库。</li>\n<li>先更新数据库，再删除缓存。 这两种情况在业界，大家对其都有自己的看法。具体怎么使用还得看各自的取舍。当然肯定会有人问为什么要删除缓存呢？而不是更新缓存呢？你可以想想当有多个并发的请求更新数据，你并不能保证更新数据库的顺序和更新缓存的顺序一致，那就会出现数据库中和缓存中数据不一致的情况。所以一般来说考虑删除缓存。</li>\n</ul>\n<h2 id=\"4-1先删除缓存，再更新数据库\"><a href=\"#4-1先删除缓存，再更新数据库\" class=\"headerlink\" title=\"4.1先删除缓存，再更新数据库\"></a>4.1先删除缓存，再更新数据库</h2><p>对于一个更新操作简单来说，就是先去各级缓存进行删除，然后更新数据库。这个操作有一个比较大的问题，在对缓存删除完之后，有一个读请求，这个时候由于缓存被删除所以直接会读库，读操作的数据是老的并且会被加载进入缓存当中，后续读请求全部访问的老数据。</p>\n<p><img src=\"/2019/02/15/如何优雅的设计和使用缓存/1550201097208.png\" alt=\"\"></p>\n<p>对缓存的操作不论成功失败都不能阻塞我们对数据库的操作，那么很多时候删除缓存可以用异步的操作，但是先删除缓存不能很好的适用于这个场景。</p>\n<p>先删除缓存也有一个好处是，如果对数据库操作失败了，那么由于先删除的缓存，最多只是造成Cache Miss。</p>\n<h2 id=\"4-2先更新数据库，再删除缓存-推荐\"><a href=\"#4-2先更新数据库，再删除缓存-推荐\" class=\"headerlink\" title=\"4.2先更新数据库，再删除缓存(推荐)\"></a>4.2先更新数据库，再删除缓存(推荐)</h2><p>如果我们使用更新数据库，再删除缓存就能避免上面的问题。但是同样的引入了新的问题,试想一下有一个数据此时是没有缓存的，所以查询请求会直接落库，更新操作在查询请求之后，但是更新操作删除数据库操作在查询完之后回填缓存之前，就会导致我们缓存中和数据库出现缓存不一致。</p>\n<p>为什么我们这种情况有问题，很多公司包括Facebook还会选择呢？因为要触发这个条件比较苛刻。</p>\n<ol>\n<li>首先需要数据不在缓存中。</li>\n<li>其次查询操作需要在更新操作先到达数据库。</li>\n<li>最后查询操作的回填比更新操作的删除后触发，这个条件基本很难出现，因为更新操作的本来在查询操作之后，一般来说更新操作比查询操作稍慢。但是更新操作的删除却在查询操作之后，所以这个情况比较少出现。</li>\n</ol>\n<p>对比上面4.1的问题来说这种问题的概率很低，况且我们有超时机制保底所以基本能满足我们的需求。如果真的需要追求完美，可以使用二阶段提交，但是其成本和收益一般来说不成正比。</p>\n<p>当然还有个问题是如果我们删除失败了，缓存的数据就会和数据库的数据不一致，那么我们就只能靠过期超时来进行兜底。对此我们可以进行优化，如果删除失败的话 我们不能影响主流程那么我们可以将其放入队列后续进行异步删除。</p>\n<h1 id=\"5-缓存挖坑三剑客\"><a href=\"#5-缓存挖坑三剑客\" class=\"headerlink\" title=\"5.缓存挖坑三剑客\"></a>5.缓存挖坑三剑客</h1><p>大家一听到缓存有哪些注意事项，肯定首先想到的是缓存穿透，缓存击穿，缓存雪崩这三个挖坑的小能手，这里简单介绍一下他们具体是什么以及应对的方法。</p>\n<h2 id=\"5-1缓存穿透\"><a href=\"#5-1缓存穿透\" class=\"headerlink\" title=\"5.1缓存穿透\"></a>5.1缓存穿透</h2><p>缓存穿透是指查询的数据在数据库是没有的，那么在缓存中自然也没有，所以，在缓存中查不到就会去数据库取查询，这样的请求一多，那么我们的数据库的压力自然会增大。</p>\n<p>为了避免这个问题，可以采取下面两个手段:</p>\n<ol>\n<li>约定:对于返回为NULL的依然缓存，对于抛出异常的返回不进行缓存,注意不要把抛异常的也给缓存了。采用这种手段的会增加我们缓存的维护成本，需要在插入缓存的时候删除这个空缓存，当然我们可以通过设置较短的超时时间来解决这个问题。</li>\n<li></li>\n</ol>\n<p><img src=\"/2019/02/15/如何优雅的设计和使用缓存/1550201125950.png\" alt=\"\"></p>\n<ol start=\"2\">\n<li>制定一些规则过滤一些不可能存在的数据，小数据用BitMap，大数据可以用布隆过滤器，比如你的订单ID 明显是在一个范围1-1000，如果不是1-1000之内的数据那其实可以直接给过滤掉。</li>\n</ol>\n<p><img src=\"/2019/02/15/如何优雅的设计和使用缓存/1550201151740.png\" alt=\"\"></p>\n<h2 id=\"5-2缓存击穿\"><a href=\"#5-2缓存击穿\" class=\"headerlink\" title=\"5.2缓存击穿\"></a>5.2缓存击穿</h2><p>对于某些key设置了过期时间，但是其是热点数据，如果某个key失效，可能大量的请求打过来，缓存未命中，然后去数据库访问，此时数据库访问量会急剧增加。</p>\n<p>为了避免这个问题，我们可以采取下面的两个手段:</p>\n<ol>\n<li>加分布式锁:加载数据的时候可以利用分布式锁锁住这个数据的Key,在Redis中直接使用setNX操作即可，对于获取到这个锁的线程，查询数据库更新缓存，其他线程采取重试策略，这样数据库不会同时受到很多线程访问同一条数据。</li>\n<li>异步加载:由于缓存击穿是热点数据才会出现的问题，可以对这部分热点数据采取到期自动刷新的策略，而不是到期自动淘汰。淘汰其实也是为了数据的时效性，所以采用自动刷新也可以。</li>\n</ol>\n<h2 id=\"5-3缓存雪崩\"><a href=\"#5-3缓存雪崩\" class=\"headerlink\" title=\"5.3缓存雪崩\"></a>5.3缓存雪崩</h2><p>缓存雪崩是指缓存不可用或者大量缓存由于超时时间相同在同一时间段失效，大量请求直接访问数据库，数据库压力过大导致系统雪崩。</p>\n<p>为了避免这个问题，我们采取下面的手段:</p>\n<ol>\n<li>增加缓存系统可用性,通过监控关注缓存的健康程度，根据业务量适当的扩容缓存。</li>\n<li>采用多级缓存，不同级别缓存设置的超时时间不同，及时某个级别缓存都过期，也有其他级别缓存兜底。</li>\n<li>缓存的过期时间可以取个随机值，比如以前是设置10分钟的超时时间，那每个Key都可以随机8-13分钟过期，尽量让不同Key的过期时间不同。</li>\n</ol>\n<h1 id=\"6-缓存污染\"><a href=\"#6-缓存污染\" class=\"headerlink\" title=\"6.缓存污染\"></a>6.缓存污染</h1><p>缓存污染一般出现在我们使用本地缓存中，可以想象，在本地缓存中如果你获得了缓存，但是你接下来修改了这个数据，但是这个数据并没有更新在数据库，这样就造成了缓存污染:</p>\n<p><img src=\"/2019/02/15/如何优雅的设计和使用缓存/1550201180147.png\" alt=\"\"></p>\n<p> 上面的代码就造成了缓存污染，通过id获取Customer，但是需求需要修改Customer的名字，所以开发人员直接在取出来的对象中直接修改，这个Customer对象就会被污染，其他线程取出这个数据就是错误的数据。</p>\n<p>要想避免这个问题需要开发人员从编码上注意，并且代码必须经过严格的review，以及全方位的回归测试，才能从一定程度上解决这个问题。</p>\n<h1 id=\"7-序列化\"><a href=\"#7-序列化\" class=\"headerlink\" title=\"7.序列化\"></a>7.序列化</h1><p>序列化是很多人都不注意的一个问题，很多人忽略了序列化的问题，上线之后马上报出一下奇怪的错误异常，造成了不必要的损失，最后一排查都是序列化的问题。列举几个序列化常见的问题:</p>\n<ol>\n<li>key-value对象过于复杂导致序列化不支持:笔者之前出过一个问题，在美团的Tair内部默认是使用protostuff进行序列化，而美团使用的通讯框架是thfift，thrift的TO是自动生成的，这个TO里面很多复杂的数据结构，但是将其存放到了Tair中。查询的时候反序列化也没有报错，单测也通过，但是到qa测试的时候发现这一块功能有问题，发现有个字段是boolean类型默认是false，把它改成true之后，序列化到tair中再反序列化还是false。定位到是protostuff对于复杂结构的对象(比如数组，List等等)支持不是很好，会造成一定的问题。后来对这个TO进行了转换，用普通的Java对象就能进行正确的序列化反序列化。</li>\n<li>添加了字段或者删除了字段，导致上线之后老的缓存获取的时候反序列化报错，或者出现一些数据移位。</li>\n<li>不同的JVM的序列化不同，如果你的缓存有不同的服务都在共同使用(不提倡)，那么需要注意不同JVM可能会对Class内部的Field排序不同，而影响序列化。比如下面的代码，在Jdk7和Jdk8中对象A的排列顺序不同，最终会导致反序列化结果出现问题:</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//jdk 7</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//jdk 8</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>序列化的问题必须得到重视，解决的办法有如下几点:</p>\n<ol>\n<li>测试:对于序列化需要进行全面的测试，如果有不同的服务并且他们的JVM不同那么你也需要做这一块的测试，在上面的问题中笔者的单测通过的原因是用的默认数据false，所以根本没有测试true的情况，还好QA给力，将其给测试出来了。</li>\n<li>对于不同的序列化框架都有自己不同的原理，对于添加字段之后如果当前序列化框架不能兼容老的，那么可以换个序列化框架。 对于protostuff来说他是按照Field的顺序来进行反序列化的，对于添加字段我们需要放到末尾，也就是不能插在中间，否则会出现错误。对于删除字段来说，用@Deprecated注解进行标注弃用，如果贸然删除，除非是最后一个字段，否则肯定会出现序列化异常。</li>\n<li>可以使用双写来避免，对于每个缓存的key值可以加上版本号，每次上线版本号都加1，比如现在线上的缓存用的是Key_1，即将要上线的是Key_2,上线之后对缓存的添加是会写新老两个不同的版本(Key_1,Key_2)的Key-Value，读取数据还是读取老版本Key_1的数据,假设之前的缓存的过期时间是半个小时，那么上线半个小时之后，之前的老缓存存量的数据都会被淘汰，此时线上老缓存和新缓存他们的数据基本是一样的,切换读操作到新缓存，然后停止双写。采用这种方法基本能平滑过渡新老Model交替，但是不好的点就是需要短暂的维护两套新老Model，下次上线的时候需要删除掉老Model，增加了维护成本。</li>\n</ol>\n<h1 id=\"8-GC调优\"><a href=\"#8-GC调优\" class=\"headerlink\" title=\"8. GC调优\"></a>8. GC调优</h1><p>对于大量使用本地缓存的应用，由于涉及到缓存淘汰，那么GC问题必定是常事。如果出现GC较多，STW时间较长，那么必定会影响服务可用性。这一块给出下面几点建议:</p>\n<ol>\n<li>经常查看GC监控，如何发现不正常，需要想办法对其进行优化。</li>\n<li>对于CMS垃圾收集器，如果发现remark过长，如果是大量本地缓存应用的话这个过长应该很正常，因为在并发阶段很容易有很多新对象进入缓存，从而remark阶段扫描很耗时，remark又会暂停。可以开启-XX:CMSScavengeBeforeRemark，在remark阶段前进行一次YGC，从而减少remark阶段扫描gc root的开销。</li>\n<li>可以使用G1垃圾收集器，通过-XX:MaxGCPauseMillis设置最大停顿时间，提高服务可用性。</li>\n</ol>\n<h1 id=\"9-缓存的监控\"><a href=\"#9-缓存的监控\" class=\"headerlink\" title=\"9. 缓存的监控\"></a>9. 缓存的监控</h1><p>很多人对于缓存的监控也比较忽略，基本上线之后如果不报错然后就默认他就生效了。但是存在这个问题，很多人由于经验不足，有可能设置了不恰当的过期时间，或者不恰当的缓存大小导致缓存命中率不高，让缓存就成为了代码中的一个装饰品。所以对于缓存各种指标的监控，也比较重要，通过其不同的指标数据，我们可以对缓存的参数进行优化，从而让缓存达到最优化:</p>\n<p><img src=\"/2019/02/15/如何优雅的设计和使用缓存/1550201212401.png\" alt=\"\"></p>\n<p>上面的代码中用来记录get操作的，通过Cat记录了获取缓存成功，缓存不存在，缓存过期，缓存失败(获取缓存时如果抛出异常，则叫失败)，通过这些指标，我们就能统计出命中率，我们调整过期时间和大小的时候就可以参考这些指标进行优化。</p>\n<p>转载自 <a href=\"https://juejin.im/post/5b849878e51d4538c77a974a\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5b849878e51d4538c77a974a</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/IntelliJ-IDEA-控制台中文乱码解决方案/20190227143717.png","slug":"20190227143717.png","post":"cjsmu9nm500004sjqyuplqc4n","modified":0,"renderable":0},{"_id":"source/_posts/IntelliJ-IDEA-控制台中文乱码解决方案/20190227144412.png","slug":"20190227144412.png","post":"cjsmu9nm500004sjqyuplqc4n","modified":0,"renderable":0},{"_id":"source/_posts/IntelliJ-IDEA-控制台中文乱码解决方案/20190227144538.png","slug":"20190227144538.png","post":"cjsmu9nm500004sjqyuplqc4n","modified":0,"renderable":0},{"_id":"source/_posts/如何优雅的设计和使用缓存/1550200980167.png","slug":"1550200980167.png","post":"cjsmu9nn4000e4sjqkhtuqoc2","modified":0,"renderable":0},{"_id":"source/_posts/如何优雅的设计和使用缓存/1550200994217.png","slug":"1550200994217.png","post":"cjsmu9nn4000e4sjqkhtuqoc2","modified":0,"renderable":0},{"_id":"source/_posts/如何优雅的设计和使用缓存/1550201017361.png","slug":"1550201017361.png","post":"cjsmu9nn4000e4sjqkhtuqoc2","modified":0,"renderable":0},{"_id":"source/_posts/如何优雅的设计和使用缓存/1550201060498.png","slug":"1550201060498.png","post":"cjsmu9nn4000e4sjqkhtuqoc2","modified":0,"renderable":0},{"_id":"source/_posts/如何优雅的设计和使用缓存/1550201074569.png","slug":"1550201074569.png","post":"cjsmu9nn4000e4sjqkhtuqoc2","modified":0,"renderable":0},{"_id":"source/_posts/如何优雅的设计和使用缓存/1550201097208.png","slug":"1550201097208.png","post":"cjsmu9nn4000e4sjqkhtuqoc2","modified":0,"renderable":0},{"_id":"source/_posts/如何优雅的设计和使用缓存/1550201125950.png","slug":"1550201125950.png","post":"cjsmu9nn4000e4sjqkhtuqoc2","modified":0,"renderable":0},{"_id":"source/_posts/如何优雅的设计和使用缓存/1550201151740.png","slug":"1550201151740.png","post":"cjsmu9nn4000e4sjqkhtuqoc2","modified":0,"renderable":0},{"_id":"source/_posts/如何优雅的设计和使用缓存/1550201180147.png","slug":"1550201180147.png","post":"cjsmu9nn4000e4sjqkhtuqoc2","modified":0,"renderable":0},{"_id":"source/_posts/如何优雅的设计和使用缓存/1550201212401.png","slug":"1550201212401.png","post":"cjsmu9nn4000e4sjqkhtuqoc2","modified":0,"renderable":0},{"_id":"source/_posts/如何优雅的设计和使用缓存/1550201224420.png","slug":"1550201224420.png","post":"cjsmu9nn4000e4sjqkhtuqoc2","modified":0,"renderable":0},{"_id":"source/_posts/如何优雅的设计和使用缓存/1550201242038.png","slug":"1550201242038.png","post":"cjsmu9nn4000e4sjqkhtuqoc2","modified":0,"renderable":0},{"_id":"source/_posts/如何优雅的设计和使用缓存/1550201259654.png","slug":"1550201259654.png","post":"cjsmu9nn4000e4sjqkhtuqoc2","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjsmu9nmt00064sjqqjvbgdl5","category_id":"cjsmu9nmz000a4sjqv3dtzzd0","_id":"cjsmu9nnb000j4sjqeetxgyiz"}],"PostTag":[{"post_id":"cjsmu9nm500004sjqyuplqc4n","tag_id":"cjsmu9nml00034sjqo1l1s3o1","_id":"cjsmu9nmw00084sjq9fv44xe3"},{"post_id":"cjsmu9nmx00094sjqenk9mt82","tag_id":"cjsmu9nmv00074sjqdsfh1r7o","_id":"cjsmu9nn4000d4sjqubg3igf9"},{"post_id":"cjsmu9nmh00024sjqrkjbxn0v","tag_id":"cjsmu9nmv00074sjqdsfh1r7o","_id":"cjsmu9nn8000f4sjq2v77fyll"},{"post_id":"cjsmu9nn0000b4sjqz9o2t71e","tag_id":"cjsmu9nmv00074sjqdsfh1r7o","_id":"cjsmu9nna000h4sjqklp2ojmn"},{"post_id":"cjsmu9nmo00044sjq6gccddaj","tag_id":"cjsmu9nmv00074sjqdsfh1r7o","_id":"cjsmu9nna000i4sjqgv8igh7m"},{"post_id":"cjsmu9nmq00054sjqmorqpw93","tag_id":"cjsmu9nn9000g4sjqz6utvasa","_id":"cjsmu9nnc000l4sjqn9kklajy"},{"post_id":"cjsmu9nmt00064sjqqjvbgdl5","tag_id":"cjsmu9nmv00074sjqdsfh1r7o","_id":"cjsmu9nnd000m4sjq9u9c1fup"}],"Tag":[{"name":"工具使用","_id":"cjsmu9nml00034sjqo1l1s3o1"},{"name":"Linux","_id":"cjsmu9nmv00074sjqdsfh1r7o"},{"name":"笔记","_id":"cjsmu9nn9000g4sjqz6utvasa"}]}}