<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>天道酬勤</title>
  
  <subtitle>不忘初心</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lbbzcy.github.io/"/>
  <updated>2019-02-15T03:28:02.320Z</updated>
  <id>https://lbbzcy.github.io/</id>
  
  <author>
    <name>zhucy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何优雅的设计和使用缓存</title>
    <link href="https://lbbzcy.github.io/2019/02/15/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E4%BD%BF%E7%94%A8%E7%BC%93%E5%AD%98/"/>
    <id>https://lbbzcy.github.io/2019/02/15/如何优雅的设计和使用缓存/</id>
    <published>2019-02-15T03:14:03.000Z</published>
    <updated>2019-02-15T03:28:02.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-确认是否需要缓存"><a href="#1-确认是否需要缓存" class="headerlink" title="1.确认是否需要缓存"></a>1.确认是否需要缓存</h1><p>在使用缓存之前，需要确认你的项目是否真的需要缓存。使用缓存会引入的一定的技术复杂度，后文也将会一一介绍这些复杂度。一般来说从两个方面来个是否需要使用缓存:</p><ol><li>CPU占用:如果你有某些应用需要消耗大量的cpu去计算，比如正则表达式，如果你使用正则表达式比较频繁，而其又占用了很多CPU的话，那你就应该使用缓存将正则表达式的结果给缓存下来。</li><li>数据库IO占用:如果你发现你的数据库连接池比较空闲，那么不应该用缓存。但是如果数据库连接池比较繁忙，甚至经常报出连接不够的报警，那么是时候应该考虑缓存了。笔者曾经有个服务，被很多其他服务调用，其他时间都还好，但是在每天早上10点的时候总是会报出数据库连接池连接不够的报警，经过排查，发现有几个服务选择了在10点做定时任务，大量的请求打过来，DB连接池不够，从而报出连接池不够的报警。这个时候有几个选择，我们可以通过扩容机器来解决，也可以通过增加数据库连接池来解决，但是没有必要增加这些成本，因为只有在10点的时候才会出现这个问题。后来引入了缓存，不仅解决了这个问题，而且还增加了读的性能。</li></ol><p>如果并没有上述两个问题，那么你不必为了增加缓存而缓存。</p><h1 id="2-选择合适的缓存"><a href="#2-选择合适的缓存" class="headerlink" title="2.选择合适的缓存"></a>2.选择合适的缓存</h1><p>缓存又分进程内缓存和分布式缓存两种。很多人包括笔者在开始选缓存框架的时候都感到了困惑:网上的缓存太多了，大家都吹嘘自己很牛逼，我该怎么选择呢？</p><h2 id="2-1-选择合适的进程缓存"><a href="#2-1-选择合适的进程缓存" class="headerlink" title="2.1 选择合适的进程缓存"></a>2.1 选择合适的进程缓存</h2><p>首先看看几个比较常用的缓存的比较，具体原理可以参考<a href="https://juejin.im/post/5b7593496fb9a009b62904fa#comment" target="_blank" rel="noopener">你应该知道的缓存进化史</a>:</p><table><thead><tr><th>比较项</th><th>ConcurrentHashMap</th><th>LRUMap</th><th>Ehcache</th><th>Guava Cache</th><th>Caffeine</th></tr></thead><tbody><tr><td>读写性能</td><td>很好，分段锁</td><td>一般，全局加锁</td><td>好</td><td>好，需要做淘汰操作</td><td>很好</td></tr><tr><td>淘汰算法</td><td>无</td><td>LRU，一般</td><td>支持多种淘汰算法,LRU,LFU,FIFO</td><td>LRU，一般</td><td>W-TinyLFU, 很好</td></tr><tr><td>功能丰富程度</td><td>功能比较简单</td><td>功能比较单一</td><td>功能很丰富</td><td>功能很丰富，支持刷新和虚引用等</td><td>功能和Guava Cache类似</td></tr><tr><td>工具大小</td><td>jdk自带类，很小</td><td>基于LinkedHashMap，较小</td><td>很大，最新版本1.4MB</td><td>是Guava工具类中的一个小部分，较小</td><td>一般，最新版本644KB</td></tr><tr><td>是否持久化</td><td>否</td><td>否</td><td>是</td><td>否</td><td>否</td></tr><tr><td>是否支持集群</td><td>否</td><td>否</td><td>是</td><td>否</td><td>否</td></tr></tbody></table><ul><li>对于ConcurrentHashMap来说，比较适合缓存比较固定不变的元素，且缓存的数量较小的。虽然从上面表格中比起来有点逊色，但是其由于是jdk自带的类，在各种框架中依然有大量的使用,比如我们可以用来缓存我们反射的Method,Field等等;也可以缓存一些链接，防止其重复建立。在Caffeine中也是使用的ConcurrentHashMap来存储元素。</li><li>对于LRUMap来说，如果不想引入第三方包，又想使用淘汰算法淘汰数据，可以使用这个。</li><li>对于Ehcache来说，由于其jar包很大，较重量级。对于需要持久化和集群的一些功能的，可以选择Ehcache。笔者没怎么使用过这个缓存，如果要选择的话，可以选择分布式缓存来替代Ehcache。</li><li>对于Guava Cache来说，Guava这个jar包在很多Java应用程序中都有大量的引入，所以很多时候其实是直接用就好了，并且其本身是轻量级的而且功能较为丰富，在不了解Caffeine的情况下可以选择Guava Cache。</li><li>对于Caffeine来说，笔者是非常推荐的，其在命中率，读写性能上都比Guava Cache好很多，并且其API和Guava cache基本一致，甚至会多一点。在真实环境中使用Caffeine，取得过不错的效果。</li></ul><p>总结一下:如果不需要淘汰算法则选择ConcurrentHashMap，如果需要淘汰算法和一些丰富的API，这里推荐选择Caffeine。</p><h2 id="2-2-选择合适的分布式缓存"><a href="#2-2-选择合适的分布式缓存" class="headerlink" title="2.2 选择合适的分布式缓存"></a>2.2 选择合适的分布式缓存</h2><p>这里选取三个比较出名的分布式缓存来作为比较，MemCache(没有实战使用过)，Redis(在美团又叫Squirrel)，Tair(在美团又叫Cellar)。不同的分布式缓存功能特性和实现原理方面有很大的差异，因此他们所适应的场景也有所不同。</p><table><thead><tr><th>比较项</th><th>MemCache</th><th>Squirrel/Redis</th><th>Cellar/Tair</th></tr></thead><tbody><tr><td>数据结构</td><td>只支持简单的Key-Value结构</td><td>String,Hash, List, Set, Sorted Set</td><td>String,HashMap, List，Set</td></tr><tr><td>持久化</td><td>不支持</td><td>支持</td><td>支持</td></tr><tr><td>容量大小</td><td>数据纯内存，数据存储不宜过多</td><td>数据全内存，资源成本考量不宜超过100GB</td><td>可以配置全内存或内存+磁盘引擎，数据容量可无限扩充</td></tr><tr><td>读写性能</td><td>很高</td><td>很高(RT0.5ms左右)</td><td>String类型比较高(RT1ms左右)，复杂类型比较慢(RT5ms左右)</td></tr></tbody></table><ul><li>MemCache：这一块接触得比较少，不做过多的推荐。其吞吐量较大，但是支持的数据结构较少，并且不支持持久化。</li><li>Redis:支持丰富的数据结构，读写性能很高，但是数据全内存，必须要考虑资源成本，支持持久化。</li><li>Tair: 支持丰富的数据结构，读写性能较高，部分类型比较慢，理论上容量可以无限扩充。</li></ul><p>总结:如果服务对延迟比较敏感，Map/Set数据也比较多的话，比较适合Redis。如果服务需要放入缓存量的数据很大，对延迟又不是特别敏感的话，那就可以选择Tair。在美团的很多应用中对Tair都有应用，在笔者的项目中使用其存放我们生成的支付token,支付码，用来替代数据库存储。大部分的情况下两者都可以选择，互为替代。</p><h1 id="3-多级缓存"><a href="#3-多级缓存" class="headerlink" title="3.多级缓存"></a>3.多级缓存</h1><p>很多人一想到缓存马上脑子里面就会出现下面的图:</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1550200994217.png" alt="1550200994217"></p><p>Redis用来存储热点数据，Redis中没有的数据则直接去数据库访问。</p><p>在之前介绍本地缓存的时候，很多人都问我，我已经有Redis了，我干嘛还需要了解Guava，Caffeine这些进程缓存呢。我基本统一回复下面两个答案:</p><ol><li>Redis如果挂了或者使用老版本的Redis,其会进行全量同步，此时Redis是不可用的，这个时候我们只能访问数据库，很容易造成雪崩。</li><li>访问Redis会有一定的网络I/O以及序列化反序列化，虽然性能很高但是其终究没有本地方法快，可以将最热的数据存放在本地，以便进一步加快访问速度。这个思路并不是我们做互联网架构独有的，在计算机系统中使用L1,L2,L3多级缓存，用来减少对内存的直接访问，从而加快访问速度。</li></ol><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1550201017361.png" alt="1550201017361"></p><p>所以如果仅仅是使用Redis，能满足我们大部分需求，但是当需要追求更高的性能以及更高的可用性的时候，那就不得不了解多级缓存。</p><h2 id="3-1使用进程缓存"><a href="#3-1使用进程缓存" class="headerlink" title="3.1使用进程缓存"></a>3.1使用进程缓存</h2><p>对于进程内缓存，其本来受限于内存的大小的限制，以及进程缓存更新后其他缓存无法得知，所以一般来说进程缓存适用于:</p><ol><li>数据量不是很大，数据更新频率较低，之前我们有个查询商家名字的服务，在发送短信的时候需要调用，由于商家名字变更频率较低，并且就算是变更了没有及时变更缓存，短信里面带有老的商家名字客户也能接受。利用Caffeine作为本地缓存,size设置为1万，过期时间设置为1个小时，基本能在高峰期解决问题。</li><li>如果数据量更新频繁，也想使用进程缓存的话，那么可以将其过期时间设置为较短，或者设置其较短的自动刷新的时间。这些对于Caffeine或者Guava Cache来说都是现成的API。</li></ol><h2 id="3-2使用多级缓存"><a href="#3-2使用多级缓存" class="headerlink" title="3.2使用多级缓存"></a>3.2使用多级缓存</h2><blockquote><p>俗话说得好，世界上没有什么是一个缓存解决不了的事，如果有，那就两个。</p></blockquote><p>一般来说我们选择一个进程缓存和一个分布式缓存来搭配做多级缓存，一般来说引入两个也足够了，如果使用三个，四个的话，技术维护成本会很高，反而有可能会得不偿失，如下图所示: </p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1550201060498.png" alt="1550201060498"></p><p>利用Caffeine做一级缓存，Redis作为二级缓存。</p><ol><li>首先去Caffeine中查询数据，如果有直接返回。如果没有则进行第2步。</li><li>再去Redis中查询，如果查询到了返回数据并在Caffeine中填充此数据。如果没有查到则进行第3步。</li><li>最后去Mysql中查询，如果查询到了返回数据并在Redis，Caffeine中依次填充此数据。</li></ol><p>对于Caffeine的缓存，如果有数据更新，只能删除更新数据的那台机器上的缓存，其他机器只能通过超时来过期缓存，超时设定可以有两种策略:</p><ul><li>设置成写入后多少时间后过期</li><li>设置成写入后多少时间刷新</li></ul><p>对于Redis的缓存更新，其他机器立马可见，但是也必须要设置超时时间，其时间比Caffeine的过期长。</p><p>为了解决进程内缓存的问题，设计进一步优化:</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1550201074569.png" alt="1550201074569"></p><p> 通过Redis的pub/sub，可以通知其他进程缓存对此缓存进行删除。如果Redis挂了或者订阅机制不靠谱，依靠超时设定，依然可以做兜底处理。</p><h1 id="4-缓存更新"><a href="#4-缓存更新" class="headerlink" title="4.缓存更新"></a>4.缓存更新</h1><p>一般来说缓存的更新有两种情况:</p><ul><li>先删除缓存，再更新数据库。</li><li>先更新数据库，再删除缓存。 这两种情况在业界，大家对其都有自己的看法。具体怎么使用还得看各自的取舍。当然肯定会有人问为什么要删除缓存呢？而不是更新缓存呢？你可以想想当有多个并发的请求更新数据，你并不能保证更新数据库的顺序和更新缓存的顺序一致，那就会出现数据库中和缓存中数据不一致的情况。所以一般来说考虑删除缓存。</li></ul><h2 id="4-1先删除缓存，再更新数据库"><a href="#4-1先删除缓存，再更新数据库" class="headerlink" title="4.1先删除缓存，再更新数据库"></a>4.1先删除缓存，再更新数据库</h2><p>对于一个更新操作简单来说，就是先去各级缓存进行删除，然后更新数据库。这个操作有一个比较大的问题，在对缓存删除完之后，有一个读请求，这个时候由于缓存被删除所以直接会读库，读操作的数据是老的并且会被加载进入缓存当中，后续读请求全部访问的老数据。</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1550201097208.png" alt="1550201097208"></p><p>对缓存的操作不论成功失败都不能阻塞我们对数据库的操作，那么很多时候删除缓存可以用异步的操作，但是先删除缓存不能很好的适用于这个场景。</p><p>先删除缓存也有一个好处是，如果对数据库操作失败了，那么由于先删除的缓存，最多只是造成Cache Miss。</p><h2 id="4-2先更新数据库，再删除缓存-推荐"><a href="#4-2先更新数据库，再删除缓存-推荐" class="headerlink" title="4.2先更新数据库，再删除缓存(推荐)"></a>4.2先更新数据库，再删除缓存(推荐)</h2><p>如果我们使用更新数据库，再删除缓存就能避免上面的问题。但是同样的引入了新的问题,试想一下有一个数据此时是没有缓存的，所以查询请求会直接落库，更新操作在查询请求之后，但是更新操作删除数据库操作在查询完之后回填缓存之前，就会导致我们缓存中和数据库出现缓存不一致。</p><p>为什么我们这种情况有问题，很多公司包括Facebook还会选择呢？因为要触发这个条件比较苛刻。</p><ol><li>首先需要数据不在缓存中。</li><li>其次查询操作需要在更新操作先到达数据库。</li><li>最后查询操作的回填比更新操作的删除后触发，这个条件基本很难出现，因为更新操作的本来在查询操作之后，一般来说更新操作比查询操作稍慢。但是更新操作的删除却在查询操作之后，所以这个情况比较少出现。</li></ol><p>对比上面4.1的问题来说这种问题的概率很低，况且我们有超时机制保底所以基本能满足我们的需求。如果真的需要追求完美，可以使用二阶段提交，但是其成本和收益一般来说不成正比。</p><p>当然还有个问题是如果我们删除失败了，缓存的数据就会和数据库的数据不一致，那么我们就只能靠过期超时来进行兜底。对此我们可以进行优化，如果删除失败的话 我们不能影响主流程那么我们可以将其放入队列后续进行异步删除。</p><h1 id="5-缓存挖坑三剑客"><a href="#5-缓存挖坑三剑客" class="headerlink" title="5.缓存挖坑三剑客"></a>5.缓存挖坑三剑客</h1><p>大家一听到缓存有哪些注意事项，肯定首先想到的是缓存穿透，缓存击穿，缓存雪崩这三个挖坑的小能手，这里简单介绍一下他们具体是什么以及应对的方法。</p><h2 id="5-1缓存穿透"><a href="#5-1缓存穿透" class="headerlink" title="5.1缓存穿透"></a>5.1缓存穿透</h2><p>缓存穿透是指查询的数据在数据库是没有的，那么在缓存中自然也没有，所以，在缓存中查不到就会去数据库取查询，这样的请求一多，那么我们的数据库的压力自然会增大。</p><p>为了避免这个问题，可以采取下面两个手段:</p><ol><li>约定:对于返回为NULL的依然缓存，对于抛出异常的返回不进行缓存,注意不要把抛异常的也给缓存了。采用这种手段的会增加我们缓存的维护成本，需要在插入缓存的时候删除这个空缓存，当然我们可以通过设置较短的超时时间来解决这个问题。</li><li></li></ol><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1550201125950.png" alt="1550201125950"></p><ol start="2"><li>制定一些规则过滤一些不可能存在的数据，小数据用BitMap，大数据可以用布隆过滤器，比如你的订单ID 明显是在一个范围1-1000，如果不是1-1000之内的数据那其实可以直接给过滤掉。</li></ol><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1550201151740.png" alt="1550201151740"></p><h2 id="5-2缓存击穿"><a href="#5-2缓存击穿" class="headerlink" title="5.2缓存击穿"></a>5.2缓存击穿</h2><p>对于某些key设置了过期时间，但是其是热点数据，如果某个key失效，可能大量的请求打过来，缓存未命中，然后去数据库访问，此时数据库访问量会急剧增加。</p><p>为了避免这个问题，我们可以采取下面的两个手段:</p><ol><li>加分布式锁:加载数据的时候可以利用分布式锁锁住这个数据的Key,在Redis中直接使用setNX操作即可，对于获取到这个锁的线程，查询数据库更新缓存，其他线程采取重试策略，这样数据库不会同时受到很多线程访问同一条数据。</li><li>异步加载:由于缓存击穿是热点数据才会出现的问题，可以对这部分热点数据采取到期自动刷新的策略，而不是到期自动淘汰。淘汰其实也是为了数据的时效性，所以采用自动刷新也可以。</li></ol><h2 id="5-3缓存雪崩"><a href="#5-3缓存雪崩" class="headerlink" title="5.3缓存雪崩"></a>5.3缓存雪崩</h2><p>缓存雪崩是指缓存不可用或者大量缓存由于超时时间相同在同一时间段失效，大量请求直接访问数据库，数据库压力过大导致系统雪崩。</p><p>为了避免这个问题，我们采取下面的手段:</p><ol><li>增加缓存系统可用性,通过监控关注缓存的健康程度，根据业务量适当的扩容缓存。</li><li>采用多级缓存，不同级别缓存设置的超时时间不同，及时某个级别缓存都过期，也有其他级别缓存兜底。</li><li>缓存的过期时间可以取个随机值，比如以前是设置10分钟的超时时间，那每个Key都可以随机8-13分钟过期，尽量让不同Key的过期时间不同。</li></ol><h1 id="6-缓存污染"><a href="#6-缓存污染" class="headerlink" title="6.缓存污染"></a>6.缓存污染</h1><p>缓存污染一般出现在我们使用本地缓存中，可以想象，在本地缓存中如果你获得了缓存，但是你接下来修改了这个数据，但是这个数据并没有更新在数据库，这样就造成了缓存污染:</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1550201180147.png" alt="1550201180147"></p><p> 上面的代码就造成了缓存污染，通过id获取Customer，但是需求需要修改Customer的名字，所以开发人员直接在取出来的对象中直接修改，这个Customer对象就会被污染，其他线程取出这个数据就是错误的数据。</p><p>要想避免这个问题需要开发人员从编码上注意，并且代码必须经过严格的review，以及全方位的回归测试，才能从一定程度上解决这个问题。</p><h1 id="7-序列化"><a href="#7-序列化" class="headerlink" title="7.序列化"></a>7.序列化</h1><p>序列化是很多人都不注意的一个问题，很多人忽略了序列化的问题，上线之后马上报出一下奇怪的错误异常，造成了不必要的损失，最后一排查都是序列化的问题。列举几个序列化常见的问题:</p><ol><li>key-value对象过于复杂导致序列化不支持:笔者之前出过一个问题，在美团的Tair内部默认是使用protostuff进行序列化，而美团使用的通讯框架是thfift，thrift的TO是自动生成的，这个TO里面很多复杂的数据结构，但是将其存放到了Tair中。查询的时候反序列化也没有报错，单测也通过，但是到qa测试的时候发现这一块功能有问题，发现有个字段是boolean类型默认是false，把它改成true之后，序列化到tair中再反序列化还是false。定位到是protostuff对于复杂结构的对象(比如数组，List等等)支持不是很好，会造成一定的问题。后来对这个TO进行了转换，用普通的Java对象就能进行正确的序列化反序列化。</li><li>添加了字段或者删除了字段，导致上线之后老的缓存获取的时候反序列化报错，或者出现一些数据移位。</li><li>不同的JVM的序列化不同，如果你的缓存有不同的服务都在共同使用(不提倡)，那么需要注意不同JVM可能会对Class内部的Field排序不同，而影响序列化。比如下面的代码，在Jdk7和Jdk8中对象A的排列顺序不同，最终会导致反序列化结果出现问题:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jdk 7</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//jdk 8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化的问题必须得到重视，解决的办法有如下几点:</p><ol><li>测试:对于序列化需要进行全面的测试，如果有不同的服务并且他们的JVM不同那么你也需要做这一块的测试，在上面的问题中笔者的单测通过的原因是用的默认数据false，所以根本没有测试true的情况，还好QA给力，将其给测试出来了。</li><li>对于不同的序列化框架都有自己不同的原理，对于添加字段之后如果当前序列化框架不能兼容老的，那么可以换个序列化框架。 对于protostuff来说他是按照Field的顺序来进行反序列化的，对于添加字段我们需要放到末尾，也就是不能插在中间，否则会出现错误。对于删除字段来说，用@Deprecated注解进行标注弃用，如果贸然删除，除非是最后一个字段，否则肯定会出现序列化异常。</li><li>可以使用双写来避免，对于每个缓存的key值可以加上版本号，每次上线版本号都加1，比如现在线上的缓存用的是Key_1，即将要上线的是Key_2,上线之后对缓存的添加是会写新老两个不同的版本(Key_1,Key_2)的Key-Value，读取数据还是读取老版本Key_1的数据,假设之前的缓存的过期时间是半个小时，那么上线半个小时之后，之前的老缓存存量的数据都会被淘汰，此时线上老缓存和新缓存他们的数据基本是一样的,切换读操作到新缓存，然后停止双写。采用这种方法基本能平滑过渡新老Model交替，但是不好的点就是需要短暂的维护两套新老Model，下次上线的时候需要删除掉老Model，增加了维护成本。</li></ol><h1 id="8-GC调优"><a href="#8-GC调优" class="headerlink" title="8. GC调优"></a>8. GC调优</h1><p>对于大量使用本地缓存的应用，由于涉及到缓存淘汰，那么GC问题必定是常事。如果出现GC较多，STW时间较长，那么必定会影响服务可用性。这一块给出下面几点建议:</p><ol><li>经常查看GC监控，如何发现不正常，需要想办法对其进行优化。</li><li>对于CMS垃圾收集器，如果发现remark过长，如果是大量本地缓存应用的话这个过长应该很正常，因为在并发阶段很容易有很多新对象进入缓存，从而remark阶段扫描很耗时，remark又会暂停。可以开启-XX:CMSScavengeBeforeRemark，在remark阶段前进行一次YGC，从而减少remark阶段扫描gc root的开销。</li><li>可以使用G1垃圾收集器，通过-XX:MaxGCPauseMillis设置最大停顿时间，提高服务可用性。</li></ol><h1 id="9-缓存的监控"><a href="#9-缓存的监控" class="headerlink" title="9. 缓存的监控"></a>9. 缓存的监控</h1><p>很多人对于缓存的监控也比较忽略，基本上线之后如果不报错然后就默认他就生效了。但是存在这个问题，很多人由于经验不足，有可能设置了不恰当的过期时间，或者不恰当的缓存大小导致缓存命中率不高，让缓存就成为了代码中的一个装饰品。所以对于缓存各种指标的监控，也比较重要，通过其不同的指标数据，我们可以对缓存的参数进行优化，从而让缓存达到最优化:</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1550201212401.png" alt="1550201212401"></p><p>上面的代码中用来记录get操作的，通过Cat记录了获取缓存成功，缓存不存在，缓存过期，缓存失败(获取缓存时如果抛出异常，则叫失败)，通过这些指标，我们就能统计出命中率，我们调整过期时间和大小的时候就可以参考这些指标进行优化。</p><p>转载自 <a href="https://juejin.im/post/5b849878e51d4538c77a974a" target="_blank" rel="noopener">https://juejin.im/post/5b849878e51d4538c77a974a</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-确认是否需要缓存&quot;&gt;&lt;a href=&quot;#1-确认是否需要缓存&quot; class=&quot;headerlink&quot; title=&quot;1.确认是否需要缓存&quot;&gt;&lt;/a&gt;1.确认是否需要缓存&lt;/h1&gt;&lt;p&gt;在使用缓存之前，需要确认你的项目是否真的需要缓存。使用缓存会引入的一定的技术
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>shadowsocks实现翻墙</title>
    <link href="https://lbbzcy.github.io/2019/01/28/shadowsocks%E5%AE%9E%E7%8E%B0%E7%BF%BB%E5%A2%99/"/>
    <id>https://lbbzcy.github.io/2019/01/28/shadowsocks实现翻墙/</id>
    <published>2019-01-28T10:49:30.000Z</published>
    <updated>2019-02-14T09:47:31.269Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、环境介绍："><a href="#一、环境介绍：" class="headerlink" title="一、环境介绍："></a>一、环境介绍：</h4><p>　　1、服务器：</p><p>　　　　CentOS7.0_x86_64</p><p>　　2、Windows客户端</p><p>　　　　Windows 10</p><h4 id="二、安装部署："><a href="#二、安装部署：" class="headerlink" title="二、安装部署："></a>二、安装部署：</h4><p>  1、安装Shadowsocks服务端：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> yum update</span><br><span class="line"><span class="meta">#</span> yum install python-setuptools &amp;&amp; easy_install pip</span><br><span class="line"><span class="meta">#</span> pip install shadowsocks</span><br></pre></td></tr></table></figure><p> 2、配置Shadowsocks：</p><p>  此文件默认不存在，需要创建：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> vim /etc/shadowsocks.json</span><br><span class="line">&#123;</span><br><span class="line">    "server":"your_server_ip",</span><br><span class="line">    "server_port":8388,</span><br><span class="line">    "password":"yourpassword",</span><br><span class="line">    "timeout":300,</span><br><span class="line">    "method":"aes-256-cfb",</span><br><span class="line">    "fast_open":false,</span><br><span class="line">    "workers": 1</span><br><span class="line">&#125;</span><br><span class="line">注：有的简化版centos 不识别 vim 命令，请先安装 vim </span><br><span class="line"></span><br><span class="line">\# yum install vim -y</span><br><span class="line"></span><br><span class="line">上面代码的解释：</span><br><span class="line">server：服务器 IP地址 (IPv4/IPv6)</span><br><span class="line"></span><br><span class="line">server_port：服务器监听的端口，一般设为80，443等，注意不要设为使用中的端口</span><br><span class="line"></span><br><span class="line">password：设置密码，自定义</span><br><span class="line"></span><br><span class="line">timeout：超时时间（秒）</span><br><span class="line"></span><br><span class="line">method：加密方法，可选择 “aes-256-cfb”, “rc4-md5”等等。推荐使用 “rc4-md5”</span><br><span class="line"></span><br><span class="line">fast_open：true 或 false。如果你的服务器 Linux 内核在3.7+，可以开启 fast_open 以降低延迟。</span><br><span class="line"></span><br><span class="line">workers：workers数量，默认为 1</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.多用户配置</span><br></pre></td></tr></table></figure><p> 如要你需要分享SS服务给朋友或家人，可以配置多个SS账户，具体可以参考下面的代码。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;server&quot;:&quot;your_server_ip&quot;,</span><br><span class="line">    &quot;port_password&quot;:&#123;</span><br><span class="line">        &quot;8381&quot;:&quot;pass1&quot;, </span><br><span class="line">        &quot;8382&quot;:&quot;pass2&quot;,</span><br><span class="line">        &quot;8383&quot;:&quot;pass3&quot;,</span><br><span class="line">        &quot;8384&quot;:&quot;pass4&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;timeout&quot;:60,</span><br><span class="line">    &quot;method&quot;:&quot;rc4-md5&quot;,</span><br><span class="line">    &quot;fast_open&quot;:false,</span><br><span class="line">    &quot;workers&quot;:1</span><br><span class="line">&#125;</span><br><span class="line">注意：json的格式，注意空格和Tab的用法要一致！</span><br></pre></td></tr></table></figure><p> 　4、启动Shadowsocks：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> ssserver -c /etc/shadowsocks.json -d start</span><br><span class="line">INFO: loading config from /etc/shadowsocks.json</span><br><span class="line">2017-01-10 22:38:12 WARNING  warning: your timeout 60 seems too short</span><br><span class="line">2017-01-10 22:38:12 INFO     loading libcrypto from libcrypto.so.10</span><br><span class="line">started</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">5、加入开机自启：</span><br><span class="line">修改下面文件</span><br><span class="line"><span class="meta">#</span> vim  /etc/rc.d/rc.local</span><br><span class="line">加入下面内容</span><br><span class="line">/usr/bin/ssserver -c /etc/shadowsocks.json -d start</span><br><span class="line">保存并推出 vim, CentOS 7正打算抛弃/etc/rc.d/rc.local，重启前需要运行以下命令获得权限，否则rc.local不会执行     </span><br><span class="line"><span class="meta">#</span> chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure><h4 id="三、使用Windows客户端连接测试："><a href="#三、使用Windows客户端连接测试：" class="headerlink" title="三、使用Windows客户端连接测试："></a>三、使用Windows客户端连接测试：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、下载Shadowsocks客户端：</span><br><span class="line">2、配置Shadowsocks客户端</span><br></pre></td></tr></table></figure><p><img src="G:\编程资料\日记\shadowsocks客户端配置.png" alt=""></p><p>具体信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">服务器IP  ：your_server_ip</span><br><span class="line">服务器端口 ：8381</span><br><span class="line">密码: pass1</span><br><span class="line">加密：rc4-md5</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.访问谷歌，看是否成功</span><br></pre></td></tr></table></figure><p>   <a href="https://www.google.com/" target="_blank" rel="noopener">https://www.google.com/</a></p><p><strong>推荐一个海外服务器地址：<a href="https://www.vultr.com/?ref=7539196" target="_blank" rel="noopener">https://www.vultr.com/?ref=7539196</a> 比较好用，适合自己搭建vpn。速度很快。</strong></p>]]></content>
    
    <summary type="html">
    
      Linux 下搭建服务器实现翻墙。。。。。。
    
    </summary>
    
    
      <category term="Linux" scheme="https://lbbzcy.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Typora Markdown 笔记</title>
    <link href="https://lbbzcy.github.io/2019/01/28/Typora-Markdown-%E7%AC%94%E8%AE%B0/"/>
    <id>https://lbbzcy.github.io/2019/01/28/Typora-Markdown-笔记/</id>
    <published>2019-01-28T06:50:59.000Z</published>
    <updated>2019-02-14T09:46:37.745Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-基本操作"><a href="#1-基本操作" class="headerlink" title="1. 基本操作"></a>1. 基本操作</h3><h4 id="1-1-内容目录"><a href="#1-1-内容目录" class="headerlink" title="1.1 内容目录"></a>1.1 内容目录</h4><ul><li>语法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[toc]</span><br></pre></td></tr></table></figure><h4 id="1-2-标题"><a href="#1-2-标题" class="headerlink" title="1.2 标题"></a>1.2 标题</h4><ul><li>语法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#          一级标题</span><br><span class="line">##         二级标题</span><br><span class="line">###        三级标题</span><br><span class="line">####       四级标题</span><br><span class="line">#####      五级标题</span><br><span class="line">######     六级标题</span><br></pre></td></tr></table></figure><h4 id="1-3-引用"><a href="#1-3-引用" class="headerlink" title="1.3 引用"></a>1.3 引用</h4><ul><li>语法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;  引用内容1</span><br><span class="line">&gt;  引用内容2</span><br><span class="line">&gt;&gt; 引用内容3</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><blockquote><p>引用内容1</p><p>引用内容2</p><blockquote><p>引用内容3</p></blockquote></blockquote><h3 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h3><h4 id="2-1-单行代码"><a href="#2-1-单行代码" class="headerlink" title="2.1 单行代码"></a>2.1 单行代码</h4><ul><li>语法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`String str1=&quot;hello&quot;;`</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><code>String str1 = &quot;hello&quot;;</code></p><h4 id="2-2-多行代码"><a href="#2-2-多行代码" class="headerlink" title="2.2 多行代码"></a>2.2 多行代码</h4><ul><li><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~~~</span><br><span class="line">​</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  ​```c</span><br><span class="line">  ```</span><br><span class="line"></span><br><span class="line">* 效果</span><br><span class="line"></span><br><span class="line">~~~java</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-列表"><a href="#3-列表" class="headerlink" title="3.列表"></a>3.列表</h3><h4 id="3-1-无序列表"><a href="#3-1-无序列表" class="headerlink" title="3.1 无序列表"></a>3.1 无序列表</h4><ul><li>语法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 无序列表1</span><br><span class="line">+ 无序列表2</span><br><span class="line">- 无序列表3</span><br></pre></td></tr></table></figure><ul><li>效果</li><li>无序列表1</li><li>无序列表2</li><li>无序列表3</li></ul><h4 id="3-2-多行无序列表"><a href="#3-2-多行无序列表" class="headerlink" title="3.2 多行无序列表"></a>3.2 多行无序列表</h4><ul><li>语法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 多行无序列表1</span><br><span class="line">TAB * 多行无序列表2</span><br><span class="line">TAB TAB * 多行无序列表3</span><br></pre></td></tr></table></figure><ul><li><p>效果</p></li><li><p>多行无序列表1</p><ul><li>多行无序列表2<ul><li>多行无序列表3</li></ul></li></ul></li></ul><h4 id="3-3-有序列表"><a href="#3-3-有序列表" class="headerlink" title="3.3 有序列表"></a>3.3 有序列表</h4><ul><li>语法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 有序列表1</span><br><span class="line">2. 有序列表2</span><br><span class="line">3. 有序列表3</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><ol><li>有序列表1</li><li>有序列表2</li><li>有序列表3</li></ol><h4 id="3-4多行有序列表"><a href="#3-4多行有序列表" class="headerlink" title="3.4多行有序列表"></a>3.4多行有序列表</h4><ul><li>语法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 多行有序列表1</span><br><span class="line">2. 多行有序列表2</span><br><span class="line">1. 多行有序列表2-1</span><br><span class="line">2. 多行有序列表2-1</span><br><span class="line">3. 多行有序列表2</span><br><span class="line">1. 多行有序列表3-1</span><br><span class="line">2. 多行有序列表3-1</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><ol><li>多行有序列表1</li><li>多行有序列表2<ol><li>多行有序列表2-1</li><li>多行有序列表2-2</li></ol></li></ol><h4 id="3-5-任务列表"><a href="#3-5-任务列表" class="headerlink" title="3.5 任务列表"></a>3.5 任务列表</h4><ul><li>语法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-[ ] 抽烟</span><br><span class="line">-[x] 喝酒</span><br><span class="line">-[ ] 烫头</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p>-[  ] 抽烟 </p><p>-[x] 喝酒</p><p>-[ ] 烫头</p><h4 id="3-6-表格"><a href="#3-6-表格" class="headerlink" title="3.6 表格"></a>3.6 表格</h4><ul><li>语法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|姓名|性别|年龄|手机号|</span><br><span class="line">|:---|:--:|:--:|---:|</span><br><span class="line">|张三|男|21|18975346876|</span><br><span class="line">|李四|女|23|17789548964|</span><br><span class="line">|王五|男|25|15876513546|</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><table><thead><tr><th style="text-align:left">姓名</th><th style="text-align:center">性别</th><th style="text-align:center">年龄</th><th style="text-align:right">手机号</th></tr></thead><tbody><tr><td style="text-align:left">张三</td><td style="text-align:center">男</td><td style="text-align:center">21</td><td style="text-align:right">18975346876</td></tr><tr><td style="text-align:left">李四</td><td style="text-align:center">女</td><td style="text-align:center">23</td><td style="text-align:right">17789548964</td></tr><tr><td style="text-align:left">王五</td><td style="text-align:center">男</td><td style="text-align:center">25</td><td style="text-align:right">15876513546</td></tr></tbody></table><h3 id="4-链接"><a href="#4-链接" class="headerlink" title="4.链接"></a>4.链接</h3><h4 id="4-1-图片"><a href="#4-1-图片" class="headerlink" title="4.1 图片"></a>4.1 图片</h4><ul><li>语法1（<em>本地图片</em>）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[图片上传失败...(image-)]</span><br></pre></td></tr></table></figure><ul><li>语法2（<em>网络图片</em>）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![typroa.jpg](https://upload-images.jianshu.io/upload_images/1538862-d91e815790b81e4a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br></pre></td></tr></table></figure><ul><li>效果2</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1538862-d91e815790b81e4a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="typroa.jpg"></p><h4 id="4-2-超链接"><a href="#4-2-超链接" class="headerlink" title="4.2 超链接"></a>4.2 超链接</h4><ul><li>语法1（<em>行内式链接</em>）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[百度][https://www.baidu.com/]</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p>[百度][<a href="https://www.baidu.com/]" target="_blank" rel="noopener">https://www.baidu.com/]</a></p><ul><li>语法2（<em>参考式链接</em>）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[CSDN][CSDN网址]</span><br><span class="line">[CSDN网址]:https://www.csdn.net/</span><br></pre></td></tr></table></figure><ul><li>效果2</li></ul><ul><li>语法3（<em>自动链接</em>）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;https://github.com/&gt;</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><a href="https://link.jianshu.com/?t=https%3A%2F%2Fgithub.com%2F" target="_blank" rel="noopener">https://github.com/</a></p><h3 id="5-其它"><a href="#5-其它" class="headerlink" title="5. 其它"></a>5. 其它</h3><h4 id="5-1-斜体"><a href="#5-1-斜体" class="headerlink" title="5.1 斜体"></a>5.1 斜体</h4><ul><li>语法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*斜体*</span><br><span class="line">_斜体_</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><em>斜体</em></p><p>_斜体_</p><h4 id="5-2-加粗"><a href="#5-2-加粗" class="headerlink" title="5.2 加粗"></a>5.2 加粗</h4><ul><li>语法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**加粗**</span><br><span class="line">___加粗__</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><strong>加粗</strong></p><p><strong>加粗</strong></p><h4 id="5-3-下划线"><a href="#5-3-下划线" class="headerlink" title="5.3 下划线"></a>5.3 下划线</h4><ul><li>语法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;下划线&lt;/u&gt;</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><u>下划线</u></p><h4 id="5-4-删除线"><a href="#5-4-删除线" class="headerlink" title="5.4 删除线"></a>5.4 删除线</h4><ul><li>语法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><del>删除线</del></p><h4 id="5-5-分隔线"><a href="#5-5-分隔线" class="headerlink" title="5.5 分隔线"></a>5.5 分隔线</h4><ul><li>语法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">---</span><br><span class="line">___</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><hr><hr><hr><h4 id="5-6-注脚"><a href="#5-6-注脚" class="headerlink" title="5.6 注脚"></a>5.6 注脚</h4><ul><li>语法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Typroa[^1]</span><br><span class="line">[^1]markdown editor</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p>Typroa[^1]</p><p>[^1] A markdown editor</p><h4 id="5-7-上下标"><a href="#5-7-上下标" class="headerlink" title="5.7 上下标"></a>5.7 上下标</h4><ul><li>语法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$3^2=9$</span><br><span class="line">$3^&#123;(3-1)&#125;=9$</span><br><span class="line">$H_2SO_4$</span><br><span class="line">$H_&#123;2SO_4&#125;$</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p>$3^2 = 9$</p><p>$3^{(3-1)} = 9$</p><p>$H_2SO_4$</p><p>$H_{2SO_4}$</p><h4 id="5-8-符号的输入"><a href="#5-8-符号的输入" class="headerlink" title="5.8 符号的输入"></a>5.8 符号的输入</h4><ul><li>语法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\\   反斜线</span><br><span class="line">\`   反引号</span><br><span class="line">\*   星号</span><br><span class="line">\_   底线</span><br><span class="line">\&#123; \&#125;  花括号</span><br><span class="line">\[ \]  方括号</span><br><span class="line">\( \)  括弧</span><br><span class="line">\#   井字号</span><br><span class="line">\+   加号</span><br><span class="line">\-   减号</span><br><span class="line">\.   英文句点</span><br><span class="line">\!   惊叹号</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p>\ ` * _ {} [] () # + - . ! </p><h4 id="5-9-特殊符号"><a href="#5-9-特殊符号" class="headerlink" title="5.9 特殊符号"></a>5.9 特殊符号</h4><ul><li>语法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&amp;copy;      版权      </span><br><span class="line">&amp;reg;       注册商标</span><br><span class="line">&amp;trade;     商标</span><br><span class="line">&amp;nbsp;      空格</span><br><span class="line">&amp;amp;       和号</span><br><span class="line">&amp;quot;      引号</span><br><span class="line">&amp;apos;      撇号</span><br><span class="line">&amp;lt;        小于号</span><br><span class="line">&amp;gt;        大于号</span><br><span class="line">&amp;ne;        不等号</span><br><span class="line">&amp;le;        小于等于</span><br><span class="line">&amp;ge;        大于等于</span><br><span class="line">&amp;cent;      分</span><br><span class="line">&amp;pound;     磅</span><br><span class="line">&amp;euro;      欧元</span><br><span class="line">&amp;yen;       元</span><br><span class="line">&amp;sect;      节</span><br><span class="line">&amp;times;     乘号</span><br><span class="line">&amp;divide;    除号</span><br><span class="line">&amp;plusmn;    正负号</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p>&copy; &reg; &trade; &nbsp; &amp; &quot; &apos; &lt; &gt; &ne; &le; &cent; &pound; &euro; &yen; &sect; &times; &divide; &plusmn; </p>]]></content>
    
    <summary type="html">
    
      typora markdown 常见语法介绍。。。。。。
    
    </summary>
    
    
      <category term="笔记" scheme="https://lbbzcy.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Linux查看系统配置参数命令</title>
    <link href="https://lbbzcy.github.io/2019/01/24/Linux%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E5%91%BD%E4%BB%A4/"/>
    <id>https://lbbzcy.github.io/2019/01/24/Linux查看系统配置参数命令/</id>
    <published>2019-01-24T08:39:35.000Z</published>
    <updated>2019-01-29T02:16:16.039Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">1. uname -a # 查看内核/操作系统/CPU信息的linux系统信息  </span><br><span class="line">2. head -n l /etc/issue # 查看操作系统版本  </span><br><span class="line">3. cat /proc/cpuinfo # 查看CPU信息  </span><br><span class="line">4. hostname # 查看计算机名的linux系统信息命令  </span><br><span class="line">5. lspci -tv # 列出所有PCI设备   </span><br><span class="line">6. lsusb -tv # 列出所有USB设备的linux系统信息命令  </span><br><span class="line">7. lsmod # 列出加载的内核模块   </span><br><span class="line">8. env # 查看环境变量资源  </span><br><span class="line">9. free -m # 查看内存使用量和交换区使用量   </span><br><span class="line">10. df -h # 查看各分区使用情况  </span><br><span class="line">11. du -sh # 查看指定目录的大小   </span><br><span class="line">12. grep MemTotal /proc/meminfo # 查看内存总量  </span><br><span class="line">13. grep MemFree /proc/meminfo # 查看空闲内存量   </span><br><span class="line">14. uptime # 查看系统运行时间、用户数、负载  </span><br><span class="line">15. cat /proc/loadavg # 查看系统负载磁盘和分区   </span><br><span class="line">16. mount | column -t # 查看挂接的分区状态  </span><br><span class="line">17. fdisk -l # 查看所有分区   </span><br><span class="line">18. swapon -s # 查看所有交换分区  </span><br><span class="line">19. hdparm -i /dev/hda # 查看磁盘参数(仅适用于IDE设备)   </span><br><span class="line">20. dmesg | grep IDE # 查看启动时IDE设备检测状况网络  </span><br><span class="line">21. ifconfig # 查看所有网络接口的属性   </span><br><span class="line">22. iptables -L # 查看防火墙设置  </span><br><span class="line">23. route -n # 查看路由表   </span><br><span class="line">24. netstat -lntp # 查看所有监听端口  </span><br><span class="line">25. netstat -antp # 查看所有已经建立的连接   </span><br><span class="line">26. netstat -s # 查看网络统计信息进程  </span><br><span class="line">27. ps -ef # 查看所有进程   </span><br><span class="line">28. top # 实时显示进程状态用户  </span><br><span class="line">29. w # 查看活动用户   </span><br><span class="line">30. id # 查看指定用户信息  </span><br><span class="line">31. last # 查看用户登录日志   </span><br><span class="line">32. cut -d: -f1 /etc/passwd # 查看系统所有用户  </span><br><span class="line">33. cut -d: -f1 /etc/group # 查看系统所有组   </span><br><span class="line">34. crontab -l # 查看当前用户的计划任务服务  </span><br><span class="line">35. chkconfig –list # 列出所有系统服务   </span><br><span class="line">36. chkconfig –list | grep on # 列出所有启动的系统服务程序  </span><br><span class="line">37. rpm -qa # 查看所有安装的软件包   </span><br><span class="line">38. cat /proc/cpuinfo ：查看CPU相关参数的linux系统命令  </span><br><span class="line">39. cat /proc/partitions ：查看linux硬盘和分区信息的系统信息命令   </span><br><span class="line">40. cat /proc/meminfo ：查看linux系统内存信息的linux系统命令  </span><br><span class="line">41. cat /proc/version ：查看版本，类似uname -r   </span><br><span class="line">42. cat /proc/ioports ：查看设备io端口  </span><br><span class="line">43. cat /proc/interrupts ：查看中断   </span><br><span class="line">44. cat /proc/pci ：查看pci设备的信息  </span><br><span class="line">45. cat /proc/swaps ：查看所有swap分区的信息</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      本文介绍了Linux系统下查看系统参数配置的一些常用命令。。。。。。
    
    </summary>
    
    
      <category term="Linux" scheme="https://lbbzcy.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>gitlab搭建</title>
    <link href="https://lbbzcy.github.io/2019/01/24/gitlab%E6%90%AD%E5%BB%BA/"/>
    <id>https://lbbzcy.github.io/2019/01/24/gitlab搭建/</id>
    <published>2019-01-24T08:32:26.000Z</published>
    <updated>2019-01-29T02:16:17.551Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>配置yum源<br>vim /etc/yum.repos.d/gitlab-ce.repo</p><p>复制以下内容：</p><p> [gitlab-ce]</p><p>name=Gitlab CE Repository</p><p>baseurl=<a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/</a></p><p>gpgcheck=0</p><p>enabled=1</p></li><li><p>更新本地yum缓存</p><p>sudo yum makecache</p></li><li><p>安装GitLab社区版</p><p>sudo yum install gitlab-ce        #自动安装最新版<br>sudo yum install gitlab-ce-x.x.x    #安装指定版本</p></li><li><p>GitLab常用命令</p><p>sudo gitlab-ctl start    # 启动所有 gitlab 组件；<br>sudo gitlab-ctl stop        # 停止所有 gitlab 组件；<br>sudo gitlab-ctl restart        # 重启所有 gitlab 组件；<br>sudo gitlab-ctl status        # 查看服务状态；<br>sudo gitlab-ctl reconfigure        # 启动服务；<br>sudo vim /etc/gitlab/gitlab.rb        # 修改默认的配置文件；<br>gitlab-rake gitlab:check SANITIZE=true –trace    # 检查gitlab；<br>sudo gitlab-ctl tail        # 查看日志；</p><p>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL get.docker.com -o get-docker.sh #下载get-docker.sh文件</span><br><span class="line">$ sudo sh get-docker.sh --mirror Aliyun #以阿里云镜像安装get-docker.sh脚本内容</span><br></pre></td></tr></table></figure><hr><p>调优：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl enable docker #开机启动docker</span><br><span class="line">$ sudo systemctl start docker #启动docker</span><br><span class="line">$ sudo groupadd docker #建立docker组</span><br><span class="line">$ sudo usermod -aG docker $USER #将当前用户加入 docker 组</span><br><span class="line">$ sudo vim /etc/systemd/system/multi-user.target.wants/docker.service #添加下面仓库地址到此文件</span><br><span class="line">ExecStart=/usr/bin/dockerd --registry-mirror=https://ckq4qobq.mirror.aliyuncs.com  #使用阿里云加速</span><br><span class="line">$ sudo systemctl daemon-reload #重新加载daemon</span><br><span class="line">$ sudo systemctl restart docker  #重启docker</span><br></pre></td></tr></table></figure><p>验证：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo docker run --name webserver -d -p</span><br><span class="line">81:80 nginx </span><br><span class="line"><span class="meta">#</span>docker从仓库pull下nginx镜像并命名为webserver，此镜像以后台模式，81端口映射宿主机80端口运行</span><br><span class="line"><span class="meta">#</span>如果下载速度较慢，可能国内镜像加速未成功。</span><br><span class="line"><span class="meta">$</span> firefox #打开firefox浏览器</span><br><span class="line"><span class="meta">#</span>输入  localhost：81  看到nginx欢迎界面表示搭建成功</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      本文介绍了在linux操作系统下安装gitlab的命令。。。。。。
    
    </summary>
    
    
      <category term="Linux" scheme="https://lbbzcy.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>centos7安装Docker</title>
    <link href="https://lbbzcy.github.io/2018/09/03/centos7%E5%AE%89%E8%A3%85Docker/"/>
    <id>https://lbbzcy.github.io/2018/09/03/centos7安装Docker/</id>
    <published>2018-09-03T13:52:56.000Z</published>
    <updated>2019-01-29T02:18:15.017Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>Docker版本 : </p><ul><li>社区版（CE）:Docker Community Edition（CE）非常适合希望开始使用Docker并尝试使用基于容器的应用程序的个人开发人员和小型团队。</li><li>企业版（EE）: Docker企业版（EE）专为企业开发和IT团队而设计，他们可以在生产中大规模构建，发布和运行业务关键型应用程序。</li></ul></li><li><p>Docker安装方式：</p><p>安装之前需要卸载旧版本 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><ul><li><p>使用存储库安装</p><ul><li><p>设置存储库</p><ul><li><p>安装所需的包。<code>yum-utils</code>提供了<code>yum-config-manager</code> 效用，并<code>device-mapper-persistent-data</code>和<code>lvm2</code>由需要 <code>devicemapper</code>存储驱动程序。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure></li><li><p>使用以下命令设置稳定存储库。即使您还想从边缘或测试存储库安装构建，您始终需要稳定的存储 库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li><li><p>可选：启用边缘和测试存储库。这些存储库包含在docker.repo上面的文件中，但默认情况下处于禁用状态。您可以将它们与稳定存储库一起启用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo yum-config-manager --enable docker-ce-edge</span><br><span class="line"><span class="meta">$</span> sudo yum-config-manager --enable docker-ce-test</span><br></pre></td></tr></table></figure></li></ul></li><li><p>设置存储库</p><ol><li><p>安装最新版本的Docker CE，或转到下一步安装特定版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo yum install docker-ce</span><br></pre></td></tr></table></figure></li><li><p>要安装特定版本的Docker CE，请列出repo中的可用版本，然后选择并安装：</p><p>一个。列出并对您的仓库中可用的版本进行排序。此示例按版本号对结果进行排序，从最高到最低，并被截断</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> yum list docker-ce --showduplicates | sort -r</span><br><span class="line">docker-ce.x86_64            18.03.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line"><span class="meta">$</span> sudo yum install docker-ce-&lt;VERSION STRING&gt;</span><br></pre></td></tr></table></figure></li><li><p>尚未启动。该docker组已创建，但没有用户添加到该组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo systemctl start docker</span><br></pre></td></tr></table></figure></li></ol></li></ul></li><li><p>从包安装</p><ol><li><p>转到 <a href="https://download.docker.com/linux/centos/7/x86_64/stable/Packages/" target="_blank" rel="noopener">https://download.docker.com/linux/centos/7/x86_64/stable/Packages/</a> 并下载.rpm要安装的Docker版本的文件。</p></li><li><p>安装Docker CE，将下面的路径更改为您下载Docker软件包的路径。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install /path/to/package.rpm</span><br></pre></td></tr></table></figure><p>Docker已安装但尚未启动。该docker组已创建，但没有用户添加到该组。</p></li><li><p>启动Docker。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo systemctl start docker</span><br></pre></td></tr></table></figure></li><li><p>docker通过运行hello-world 映像验证是否已正确安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo docker run hello-world</span><br></pre></td></tr></table></figure></li></ol></li><li><p>使用便利脚本安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line"><span class="meta">$</span> sudo sh get-docker.sh</span><br><span class="line"></span><br><span class="line">&lt;output truncated&gt;</span><br><span class="line"></span><br><span class="line">If you would like to use Docker as a non-root user, you should now consider</span><br><span class="line">adding your user to the "docker" group with something like:</span><br><span class="line"></span><br><span class="line">  sudo usermod -aG docker your-user</span><br><span class="line"></span><br><span class="line">Remember to log out and back in for this to take effect!</span><br><span class="line"></span><br><span class="line">WARNING: Adding a user to the "docker" group grants the ability to run</span><br><span class="line">         containers which can be used to obtain root privileges on the</span><br><span class="line">         docker host.</span><br><span class="line">         Refer to https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface</span><br><span class="line">         for more information.</span><br></pre></td></tr></table></figure></li><li><p>卸载Docker CE</p><ul><li><p>卸载Docker包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo yum remove docker-ce</span><br></pre></td></tr></table></figure></li><li><p>主机上的图像，容器，卷或自定义配置文件不会自动删除。要删除所有图像，容器和卷：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      本文介绍了在centos7环境下面安装docker的步骤和注意事项。。。。。。
    
    </summary>
    
      <category term="Linux" scheme="https://lbbzcy.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://lbbzcy.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>oninstack安装</title>
    <link href="https://lbbzcy.github.io/2018/08/29/oninstack%E5%AE%89%E8%A3%85/"/>
    <id>https://lbbzcy.github.io/2018/08/29/oninstack安装/</id>
    <published>2018-08-29T11:07:11.000Z</published>
    <updated>2019-01-29T02:17:28.660Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p><strong>linux 命令</strong></p><ul><li>修改主机名： vi /etc/hostname</li><li>scp wfxAdmin.war <a href="mailto:root@39.104.48.138" target="_blank" rel="noopener">root@39.104.48.138</a>:/hnccnet/tomcat/cpsServer/webapps</li><li>mv 重命名</li><li>cp-r /www /aa 复制文件夹</li><li>chown -R www:www  XXX</li><li>jar-xvf  xxx.war xxx </li></ul></li><li><p>iptables</p><ul><li>关闭iptables service iptables stop  </li><li>查看iptables iptables -nvL  cat/etc/sysconfig/iptables</li><li>ptables -I INPUT 4 -p tcp -m state –state NEW -m tcp –dport 3306 -jACCEPT</li><li>service iptables save #保存iptables规则</li></ul></li><li><p>nginx.conf 配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">root</span> /data/wwwroot/default;</span><br><span class="line"><span class="attribute">index</span> index.html index.jsp; </span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">  <span class="attribute">proxy_pass</span> http://lbbzcy.xin;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>mysql 命令</p><ul><li>mysql -uroot -p</li><li>source ***.sql</li><li>grant all privileges on 数据库.* to 用户@’%’ identified by ‘密码’;#授权语句，特别注意有分号</li><li>flush privileges;</li></ul></li><li><p>tomcat   tomcat  server.xml  vhost/localhost.xml      </p></li></ol><p>​    </p>]]></content>
    
    <summary type="html">
    
      Linux 下搭建oninstack环境
    
    </summary>
    
    
      <category term="Linux" scheme="https://lbbzcy.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
